using System;

using Autodesk.Revit.DB;

namespace dosymep.Revit {
    public partial class ParamExtensions {
        /// <summary>
        /// Возвращает тип параметра.
        /// </summary>
        /// <param name="builtInParameter">Системный тип параметра.</param>
        /// <returns></returns>
        /// <exception cref="System.ArgumentOutOfRangeException">Выбрасывает исключение если не был сопоставлен тип данных к параметру.</exception>
        public static StorageType GetStorageType(this BuiltInParameter builtInParameter) {
            switch(builtInParameter) {
                case BuiltInParameter.PATH_OF_TRAVEL_FROM_ROOM: return StorageType.String;
                case BuiltInParameter.PATH_OF_TRAVEL_TO_ROOM: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_PROFILE_VOLUME: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PROFILE_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PROFILE_TYPE: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_PLATE_JUSTIFICATION: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_PAINT_AREA: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_EXACT_WEIGHT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_WEIGHT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_VOLUME: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_AREA: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_WIDTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_TYPE: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_BOLT_TOTAL_WEIGHT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_SHEARSTUD_TOTAL_WEIGHT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_ANCHOR_TOTAL_WEIGHT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_ANCHOR_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_CUT_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_EXACT_WEIGHT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PAINT_AREA: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WEIGHT: return StorageType.Double;
                case BuiltInParameter.PATH_OF_TRAVEL_SPEED: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_BOLT_LOCATION: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_BOLT_FINISH_CALCULATION_AT_GAP: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_BOLT_INVERTED: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_BOLT_GRIP_LENGTH_INCREASE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_BOLT_GRIP_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_BOLT_LENGTH: return StorageType.Double;
                case BuiltInParameter.GENERIC_ZONE_NAME: return StorageType.String;
                case BuiltInParameter.RBS_PIPE_BOTTOM_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_TOP_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_THRU_LUGS_CURRENT_PHASEC: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_THRU_LUGS_CURRENT_PHASEB: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_THRU_LUGS_CURRENT_PHASEA: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_THRU_LUGS_APPARENT_LOAD_PHASEC: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_THRU_LUGS_APPARENT_LOAD_PHASEB: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_THRU_LUGS_APPARENT_LOAD_PHASEA: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_BRANCH_CIRCUIT_CURRENT_PHASEC: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_BRANCH_CIRCUIT_CURRENT_PHASEB: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_BRANCH_CIRCUIT_CURRENT_PHASEA: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_BRANCH_CIRCUIT_APPARENT_LOAD_PHASEC: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_BRANCH_CIRCUIT_APPARENT_LOAD_PHASEB: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_BRANCH_CIRCUIT_APPARENT_LOAD_PHASEA: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_DEFINITION: return StorageType.None;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_THRU_LUGS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_NUMBERING_TYPE: return StorageType.Integer;
                case BuiltInParameter.TAG_ON_PLACEMENT_UI: return StorageType.Integer;
                case BuiltInParameter.ROUTE_ANALYSIS_SETTINGS_PARAM: return StorageType.None;
                case BuiltInParameter.PATH_OF_TRAVEL_VIEW_NAME: return StorageType.String;
                case BuiltInParameter.PATH_OF_TRAVEL_LEVEL_NAME: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_CONNECTION_OVERRIDE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_CONNECTION_EDIT_TYPE: return StorageType.None;
                case BuiltInParameter.PATH_OF_TRAVEL_TIME: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_ZCLIP_TYPE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_COPE_AROUND_AXIS: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_COPE_AXIS_ANGLE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_COPE_Z_ANGLE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_COPE_X_ANGLE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_COPE_DISTANCE_AXIS: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_COPE_WIDTHX: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_Y_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_X_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_CUT_TYPE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_PLATE_SHORTEN_CUTSTRAIGHT: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_PLATE_SHORTEN_SUCTION: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PLATE_SHORTEN_ANGLE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_PREFIX: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_WELD_TEXT_MODULE: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_HOLE_DEPTH_OF_BOLT_HEAD: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_TAPPING: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_HOLE_BACK_TAPER_THREAD: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_TAPPING_HOLE: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_HEAD_DIAMETER: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_ANGLE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_HOLE_ALPHA: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_DEPTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_SLOT_DIRECTION: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_HOLE_SLOT_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_HOLE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_HOLE_DIAMETER: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_NUMBER: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_PATTERN_RADIUS: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_EDGE_DISTANCE_Y: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_EDGE_DISTANCE_X: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_INTERMEDIATE_DISTANCE_Y: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_INTERMEDIATE_DISTANCE_X: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_TOTAL_WIDTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_TOTAL_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_PATTERN_NUMBER_Y: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_PATTERN_NUMBER_X: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_PREPDEPTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_EFFECTIVETHROAT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_ROOTOPENING: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_WELDPREP: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_SURFACESHAPE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_TEXT: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_DOUBLE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_PREPDEPTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_EFFECTIVETHROAT: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_ROOTOPENING: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_WELDPREP: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_SURFACESHAPE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_TEXT: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_WELD_PITCH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_CONTINUOUS: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_LOCATION: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_WELD_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_WELD_MAIN_TYPE: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_PARAM_BORINGOUT: return StorageType.Integer;
                case BuiltInParameter.STEEL_ELEM_PARAM_RADIUS: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_CONTOUR_SIDE2DIST: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_CONTOUR_SIDE1DIST: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_CONTOUR_GAP_WIDTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_SHORTEN_ANGLEZ: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_SHORTEN_ANGLEY: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_SHORTEN_REFLENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_SHEARSTUD_LENGTH: return StorageType.Double;
                case BuiltInParameter.STEEL_ELEM_BOLT_COATING: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_ANCHOR_LENGTH: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_SHEARSTUD_DIAMETER: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_SHEARSTUD_GRADE: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_SHEARSTUD_STANDARD: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_ANCHOR_DIAMETER: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_ANCHOR_ASSEMBLY: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_ANCHOR_GRADE: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_ANCHOR_STANDARD: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_COATING: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_BOLT_DIAMETER: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_BOLT_ASSEMBLY: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_BOLT_GRADE: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_BOLT_STANDARD: return StorageType.String;
                case BuiltInParameter.STEEL_ELEM_PLATE_THICKNESS: return StorageType.Double;
                case BuiltInParameter.REBAR_WORKSHOP_INSTRUCTIONS: return StorageType.Integer;
                case BuiltInParameter.REBAR_GEOMETRY_TYPE: return StorageType.Integer;
                case BuiltInParameter.BASEPOINT_LATITUDE_PARAM: return StorageType.Double;
                case BuiltInParameter.BASEPOINT_LONGITUDE_PARAM: return StorageType.Double;
                case BuiltInParameter.REBAR_FREE_FORM_HOOK_END_PLANE_ANGLE: return StorageType.Double;
                case BuiltInParameter.REBAR_FREE_FORM_HOOK_START_PLANE_ANGLE: return StorageType.Double;
                case BuiltInParameter.ROOM_OUTDOOR_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_OUTDOOR_AIRFLOW_STANDARD_PARAM: return StorageType.Integer;
                case BuiltInParameter.DIRECTCONTEXT3D_SOURCE_ID: return StorageType.String;
                case BuiltInParameter.DIRECTCONTEXT3D_APPLICATION_ID: return StorageType.String;
                case BuiltInParameter.DIRECTCONTEXT3D_SERVER_ID: return StorageType.String;
                case BuiltInParameter.DIRECTCONTEXT3D_NAME: return StorageType.String;
                case BuiltInParameter.ROOM_AIR_CHANGES_PER_HOUR_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_OUTDOOR_AIR_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_OUTDOOR_AIR_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_OUTDOOR_AIR_INFO_PARAM: return StorageType.String;
                case BuiltInParameter.REBAR_SHAPE_ENDTREATMENT_END_TYPE: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SHAPE_ENDTREATMENT_START_TYPE: return StorageType.ElementId;
                case BuiltInParameter.REBAR_ELEM_ENDTREATMENT_END: return StorageType.ElementId;
                case BuiltInParameter.REBAR_ELEM_ENDTREATMENT_START: return StorageType.ElementId;
                case BuiltInParameter.END_TREATMENT: return StorageType.String;
                case BuiltInParameter.COUPLER_COUPLED_ENDTREATMENT: return StorageType.ElementId;
                case BuiltInParameter.COUPLER_MAIN_ENDTREATMENT: return StorageType.ElementId;
                case BuiltInParameter.COUPLER_WIDTH: return StorageType.Double;
                case BuiltInParameter.COUPLER_MARK: return StorageType.String;
                case BuiltInParameter.FAMILY_FREEINST_DEFAULT_ELEVATION: return StorageType.Double;
                case BuiltInParameter.COUPLER_COUPLED_ENGAGEMENT: return StorageType.Double;
                case BuiltInParameter.COUPLER_MAIN_ENGAGEMENT: return StorageType.Double;
                case BuiltInParameter.COUPLER_LENGTH: return StorageType.Double;
                case BuiltInParameter.COUPLER_WEIGHT: return StorageType.Double;
                case BuiltInParameter.COUPLER_NUMBER: return StorageType.String;
                case BuiltInParameter.COUPLER_QUANTITY: return StorageType.Integer;
                case BuiltInParameter.COUPLER_COUPLED_BAR_SIZE: return StorageType.ElementId;
                case BuiltInParameter.COUPLER_MAIN_BAR_SIZE: return StorageType.ElementId;
                case BuiltInParameter.COUPLER_CODE: return StorageType.String;
                case BuiltInParameter.MULTISTORY_STAIRS_ACTUAL_TREAD_DEPTH: return StorageType.Double;
                case BuiltInParameter.MULTISTORY_STAIRS_REF_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.REBAR_ELEM_HOST_MARK: return StorageType.String;
                case BuiltInParameter.REBAR_SHAPE_IMAGE: return StorageType.ElementId;
                case BuiltInParameter.FABRIC_NUMBER: return StorageType.String;
                case BuiltInParameter.REBAR_NUMBER: return StorageType.String;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_SKETCHY_LINES: return StorageType.None;
                case BuiltInParameter.NUMBER_PARTITION_PARAM: return StorageType.String;
                case BuiltInParameter.VIEW_SHOW_HIDDEN_LINES: return StorageType.Integer;
                case BuiltInParameter.MEP_ZONE_EQUIPMENT_DRAW_VENTILATION: return StorageType.Integer;
                case BuiltInParameter.MEP_VRF_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_REHEAT_HOTWATER_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_ZONE_EQUIPMENT: return StorageType.ElementId;
                case BuiltInParameter.MEP_ANALYTICAL_EQUIPMENT_NAME: return StorageType.String;
                case BuiltInParameter.MEP_ZONE_HOTWATER_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_ZONE_AIR_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_REHEAT_COIL_TYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_ZONE_EQUIPMENT_BEHAVIOR: return StorageType.Integer;
                case BuiltInParameter.MEP_ZONE_EQUIPMENT_TYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_AIRLOOP_FANTYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_CHILLED_WATER_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_COOLING_COIL_TYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_HEATING_HOTWATER_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_HEATING_COIL_TYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_PREHEAT_HOTWATER_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_AIRLOOP_PREHEAT_COILTYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_AIRLOOP_HEATEXCHANGER_TYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_CONDENSER_WATER_LOOP: return StorageType.ElementId;
                case BuiltInParameter.MEP_WATERLOOP_CHILLERTYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_WATERLOOP_TYPE: return StorageType.Integer;
                case BuiltInParameter.MEP_ANALYTICAL_LOOP_NAME: return StorageType.String;
                case BuiltInParameter.SYSTEM_EQUIPMENT_SETS: return StorageType.ElementId;
                case BuiltInParameter.MEP_IGNORE_FLOW_ANALYSIS: return StorageType.Integer;
                case BuiltInParameter.MEP_ANALYTICAL_LOOP_BOUNDARY_PARAM: return StorageType.Integer;
                case BuiltInParameter.MECHANICAL_EQUIPMENT_SET_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.MECHANICAL_EQUIPMENT_SET_NAME: return StorageType.String;
                case BuiltInParameter.MECHANICAL_EQUIPMENT_SET_ON_STANDBY: return StorageType.Integer;
                case BuiltInParameter.MECHANICAL_EQUIPMENT_SET_ON_DUTY: return StorageType.Integer;
                case BuiltInParameter.MEP_ANALYTICAL_CRITICALPATH_PARAM: return StorageType.Integer;
                case BuiltInParameter.MEP_ANALYTICAL_PIPE_DESIGNFLOW: return StorageType.Double;
                case BuiltInParameter.MEP_EQUIPMENT_CALC_PIPINGPRESSUREDROP_PARAM: return StorageType.Double;
                case BuiltInParameter.MEP_EQUIPMENT_CALC_PIPINGFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.MEP_EQUIPMENT_CLASSIFICATION: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_CONNECTION_INPUT_ELEMENTS: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_CONNECTION_NOBLE_STATUS: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_CONNECTION_CODE_CHECKING_STATUS: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_CONNECTION_APPROVAL_STATUS: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_CONNECTION_MODIFY_CONNECTION_PARAMETERS: return StorageType.None;
                case BuiltInParameter.STRUCTURAL_CONNECTION_SYMBOL: return StorageType.None;
                case BuiltInParameter.ALL_MODEL_IMAGE: return StorageType.ElementId;
                case BuiltInParameter.ALL_MODEL_TYPE_IMAGE: return StorageType.ElementId;
                case BuiltInParameter.STRUCT_FRAM_JOIN_STATUS: return StorageType.Integer;
                case BuiltInParameter.REFERENCED_VIEW: return StorageType.ElementId;
                case BuiltInParameter.ENERGY_ANALYSIS_ADVANCED_OPTIONS: return StorageType.None;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_MODE: return StorageType.Integer;
                case BuiltInParameter.FAMILY_ROUNDCONNECTOR_DIMENSIONTYPE: return StorageType.Integer;
                case BuiltInParameter.FAM_PROFILE_DEFINITION: return StorageType.Integer;
                case BuiltInParameter.END_Z_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.END_Z_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.END_Y_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.END_Y_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.START_Z_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.START_Z_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.START_Y_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.START_Y_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.Z_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.Z_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.Y_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.Y_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.YZ_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.END_JOIN_CUTBACK: return StorageType.Double;
                case BuiltInParameter.START_JOIN_CUTBACK: return StorageType.Double;
                case BuiltInParameter.END_EXTENSION: return StorageType.Double;
                case BuiltInParameter.START_EXTENSION: return StorageType.Double;
                case BuiltInParameter.DIVISION_SKETCH_CURVE_DIVISION_PARAMS_OVERRIDE_PARAM: return StorageType.Integer;
                case BuiltInParameter.DIVISION_SKETCH_CURVE_EXTENTD_TO_SILH_PARAM: return StorageType.Integer;
                case BuiltInParameter.DIVISION_RULE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.PATTERN_MIRROR_FOR_DIVISION_RULE: return StorageType.Integer;
                case BuiltInParameter.ALL_GRID_ROTATION_FOR_DIVISION_RULE: return StorageType.Double;
                case BuiltInParameter.PATTERN_INDENT_2_FOR_DIVISION_RULE: return StorageType.Integer;
                case BuiltInParameter.PATTERN_INDENT_1_FOR_DIVISION_RULE: return StorageType.Integer;
                case BuiltInParameter.DIVISION_PATTERN: return StorageType.ElementId;
                case BuiltInParameter.DPART_SHAPE_MODIFIED: return StorageType.Integer;
                case BuiltInParameter.DPART_EXCLUDED: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_MANUALLY_ADJUSTED: return StorageType.Integer;
                case BuiltInParameter.PROPERTY_SET_KEYWORDS: return StorageType.String;
                case BuiltInParameter.MATERIAL_ASSET_PARAM_SOURCE_URL: return StorageType.String;
                case BuiltInParameter.MATERIAL_ASSET_PARAM_SOURCE: return StorageType.String;
                case BuiltInParameter.MATERIAL_ASSET_PARAM_EXTERNAL_MATERIAL_ID: return StorageType.String;
                case BuiltInParameter.MATERIAL_ASSET_PARAM_COMMON_SHARED_ASSET: return StorageType.Integer;
                case BuiltInParameter.MATERIAL_ASSET_PARAM_ASSET_LIB_ID: return StorageType.String;
                case BuiltInParameter.DPART_BASE_LEVEL_BY_ORIGINAL: return StorageType.Integer;
                case BuiltInParameter.DPART_BASE_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.POINT_ADAPTIVE_NUM_PARAM: return StorageType.Integer;
                case BuiltInParameter.POINT_ADAPTIVE_SHOW_NUMBER: return StorageType.Integer;
                case BuiltInParameter.POINT_ADAPTIVE_CONSTRAINED: return StorageType.Integer;
                case BuiltInParameter.POINT_ADAPTIVE_ORIENTATION_TYPE: return StorageType.Integer;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_ELECTRICAL_RESISTIVITY: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_REFLECTIVITY: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_POROSITY: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_PERMEABILITY: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_TRANSMITS_LIGHT: return StorageType.Integer;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_VAPOR_PRESSURE: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_SPECIFIC_HEAT_OF_VAPORIZATION: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_LIQUID_VISCOSITY: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_COMPRESSIBILITY: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_GAS_VISCOSITY: return StorageType.Double;
                case BuiltInParameter.THERMAL_MATERIAL_PARAM_EMISSIVITY: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_WOOD_CONSTRUCTION: return StorageType.Integer;
                case BuiltInParameter.PHY_MATERIAL_PARAM_FIVEPERCENT_MODULUS_OF_ELACTICITY: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_AVERAGE_MODULUS: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_TENSION_PERPENDICULAR: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_TENSION_PARALLEL: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_STRUCTURAL_THERMAL_TREATED: return StorageType.Integer;
                case BuiltInParameter.PHY_MATERIAL_PARAM_STRUCTURAL_DENSITY: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_STRUCTURAL_SPECIFIC_HEAT: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Z: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Y: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_X: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_EXP_COEFF_2: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_EXP_COEFF_1: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_MOD_12: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_POISSON_MOD_23: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_POISSON_MOD_12: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_YOUNG_MOD_2: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_YOUNG_MOD_1: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_PLACEMENT_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_TRISERTYPE_RISER_IS_SLANTED: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_RISER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_NOSING_PLACEMENT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_RISER_PROFILE: return StorageType.ElementId;
                case BuiltInParameter.TERMINATION_EXTENSION_LENGTH: return StorageType.Double;
                case BuiltInParameter.SUPPORT_HEIGHT: return StorageType.Double;
                case BuiltInParameter.SUPPORT_HAND_CLEARANCE: return StorageType.Double;
                case BuiltInParameter.STAIRS_TRISERTYPE_TREAD_PROFILE: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_TRISERTYPE_RISER_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_TRISERTYPE_TREAD_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_TRISERTYPE_RISER_TREAD_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_RISER_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_TRISERTYPE_RISER_STYLE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_BACK_NOSING: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_LEFT_NOSING: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_RIGHT_NOSING: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_FRONT_NOSING: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISERTYPE_NOSING_LENGTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_TRISERTYPE_NOSING_PROFILE: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_TRISERTYPE_TREAD_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_TRISERTYPE_TREAD: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISER_RISER_MARK: return StorageType.String;
                case BuiltInParameter.STAIRS_TRISER_TREAD_MARK: return StorageType.String;
                case BuiltInParameter.STAIRS_TRISER_RISER_NUMBER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISER_TREAD_NUMBER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TRISER_IS_TYPE_OVERRIDDEN: return StorageType.Integer;
                case BuiltInParameter.STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_END: return StorageType.Integer;
                case BuiltInParameter.STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_BEGIN:
                    return StorageType.Integer;
                case BuiltInParameter.STAIRS_WINDERPATTERN_RADIUS_INTERIOR: return StorageType.Double;
                case BuiltInParameter.STAIRS_WINDERPATTERN_FILLET_INSIDE_CORNER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_WINDERPATTERN_STAIR_PATH_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_WINDERPATTERN_MINIMUM_WIDTH_INSIDE_WALKLINE: return StorageType.Double;
                case BuiltInParameter.STAIRS_WINDERPATTERN_MINIMUM_WIDTH_CORNER: return StorageType.Double;
                case BuiltInParameter.STAIRS_WINDERPATTERN_WINDER_STYLE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_FLIP_SECTION_PROFILE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_LANDING: return StorageType.Double;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_RUN: return StorageType.Double;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_WIDTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_TOTAL_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_UNDERSIDE_SURFACE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_TOPSIDE_SURFACE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORTTYPE_SECTION_PROFILE: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_SUPPORT_LANDINGSUPPORT_TYPE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORT_OVERRIDDEN: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORT_TRIM_SUPPORT_UPPER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORT_UPPER_END_CUT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORT_LOWER_END_CUT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_SUPPORT_VERTICAL_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_SUPPORT_HORIZONTAL_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_LANDINGTYPE_LANDING_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_LANDINGTYPE_TREADRISER_TYPE: return StorageType.None;
                case BuiltInParameter.STAIRS_LANDINGTYPE_USE_SAME_TRISER_AS_RUN: return StorageType.Integer;
                case BuiltInParameter.STAIRS_LANDINGTYPE_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_LANDINGTYPE_STRUCTURE: return StorageType.None;
                case BuiltInParameter.STAIRS_LANDINGTYPE_HAS_MONOLITHIC_SUPPORT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_LANDING_OVERRIDDEN: return StorageType.Integer;
                case BuiltInParameter.STAIRS_LANDING_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_LANDING_STRUCTURAL: return StorageType.Integer;
                case BuiltInParameter.STAIRS_LANDING_BASE_ELEVATION: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUNTYPE_RUN_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_RUNTYPE_TOTAL_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUNTYPE_STRUCTURAL_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUNTYPE_STRUCTURE: return StorageType.None;
                case BuiltInParameter.STAIRS_RUNTYPE_UNDERSIDE_SURFACE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUNTYPE_HAS_MONOLITHIC_SUPPORT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_EXTEND_BELOW_TREAD_BASE: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_CCW: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_CREATE_AUTO_LANDING: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_WINDER_END_WITH_STRAIGHT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_WINDER_BEGIN_WITH_STRAIGHT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_LOCATIONPATH_JUSTFICATION: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_END_WITH_RISER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_BEGIN_WITH_RISER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_OVERRIDDEN: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_STRUCTURAL: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_CENTER_MARK_VISIBLE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_ACTUAL_RUN_WIDTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_ACTUAL_TREAD_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_ACTUAL_RISER_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_ACTUAL_NUMBER_OF_TREADS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_ACTUAL_NUMBER_OF_RISERS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RUN_EXTEND_BELOW_RISER_BASE: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_TOP_ELEVATION: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_BOTTOM_ELEVATION: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_HAS_INTERMEDIATE_SUPPORT: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_LEFT_SUPPORT_LATERAL_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_RIGHT_SUPPORT_LATERAL_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_CUTMARK_TYPE: return StorageType.ElementId;
                case BuiltInParameter.STAIRSTYPE_CONSTRUCTION_METHOD: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_HAS_RIGHT_SUPPORT: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_HAS_LEFT_SUPPORT: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_NOTCH_WIDTH: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_NOTCH_VERTICAL_GAP: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_NOTCH_HORIZONTAL_GAP: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_NOTCH_CUSTOM_WIDTH: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_NOTCH_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_NOTCH_EXTENSION: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_GEOMUNJOINED_END_CUT_STYLE: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_CALC_RULE_TARGET_RESULT: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_CALC_RULE_MIN_RESULT: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_CALC_RULE_MAX_RESULT: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_CALC_RULE_TREAD_MULTIPLIER: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_CALC_RULE_RISER_MULTIPLIER: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_IS_ASSEMBLED_STAIRS: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_NUMBER_OF_INTERMEDIATE_SUPPORTS: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_MINIMUM_RUN_WIDTH: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_WINDER_STEP_FRONT_MEASUREMENT: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_SHOW_UPDOWN: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_SHOW_STAIR_PATH: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_SHOW_CUTLINE: return StorageType.Integer;
                case BuiltInParameter.STAIRSTYPE_INTERMEDIATE_SUPPORT_TYPE: return StorageType.ElementId;
                case BuiltInParameter.STAIRSTYPE_LEFT_SIDE_SUPPORT_TYPE: return StorageType.ElementId;
                case BuiltInParameter.STAIRSTYPE_RIGHT_SIDE_SUPPORT_TYPE: return StorageType.ElementId;
                case BuiltInParameter.STAIRSTYPE_LANDING_TYPE: return StorageType.ElementId;
                case BuiltInParameter.STAIRSTYPE_RUN_TYPE: return StorageType.ElementId;
                case BuiltInParameter.STAIRSTYPE_CALCULATION_RULES: return StorageType.None;
                case BuiltInParameter.STAIRSTYPE_MINIMUM_TREAD_WIDTH_INSIDE_BOUNDARY: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_MINIMUM_TREAD_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRSTYPE_MAXIMUM_RISER_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_TRISER_NUMBER_BASE_INDEX: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_ANNOTATION_CUT_MARK: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_CORSE_GEOM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_TRISER_CORSE_GEOM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RUN_CORSE_GEOM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_GEOM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_TRISER_GEOM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RUN_GEOM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_SUPPORT_PATH: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_BOUNDARY_3D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_BOUNDARY_2D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_LANDING_PATH: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_LANDING_BOUNDARY: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RUN_OUTLINE_FOR_PLAN: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RUN_NOSING: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RUN_RISER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RUN_PATH_3D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RUN_PATH_2D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_3D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_3D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_2D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_2D: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_LANDING_FACES: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DBG_SHOW_TREAD_FACES: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ENABLE_CALCULATION_RULE_CHECKING: return StorageType.Integer;
                case BuiltInParameter.STAIRS_MIN_AUTOMATIC_LANDING_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RUN_WIDTH_MEASUREMENT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TOTAL_NUMBER_OF_TREADS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TOTAL_NUMBER_OF_RISERS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ACTUAL_NUMBER_OF_RISERS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_DESIRED_NUMBER_OF_RISERS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_MULTISTORY_UP_TO_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_STAIRS_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_TOP_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_BASE_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.PART_MAKER_DIVISION_PROFILE_OFFSET: return StorageType.Double;
                case BuiltInParameter.DIVISION_PROFILE_WIDTH: return StorageType.Double;
                case BuiltInParameter.PART_MAKER_SPLITTER_PROFILE_EDGE_MATCH: return StorageType.Integer;
                case BuiltInParameter.PART_MAKER_SPLITTER_PROFILE_FLIP_ALONG: return StorageType.Integer;
                case BuiltInParameter.PART_MAKER_SPLITTER_PROFILE_FLIP_ACROSS: return StorageType.Integer;
                case BuiltInParameter.PART_MAKER_SPLITTER_PROFILE: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_KEYWORD_PROTECTED: return StorageType.Integer;
                case BuiltInParameter.PARTMAKER_PARAM_DIVISION_GAP: return StorageType.Double;
                case BuiltInParameter.POINTCLOUDINSTANCE_NAME: return StorageType.String;
                case BuiltInParameter.ANALYTICAL_MODEL_ROTATION: return StorageType.Double;
                case BuiltInParameter.POINTCLOUDTYPE_SCALE: return StorageType.Double;
                case BuiltInParameter.PROPERTY_SET_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.PROPERTY_SET_MATERIAL_ASPECT: return StorageType.Integer;
                case BuiltInParameter.RBS_DUCT_PIPE_SYSTEM_ABBREVIATION_PARAM: return StorageType.String;
                case BuiltInParameter.PHY_MATERIAL_PROPERTIES: return StorageType.Integer;
                case BuiltInParameter.PROPERTY_SET_NAME: return StorageType.String;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SUBCLASS: return StorageType.String;
                case BuiltInParameter.PHY_MATERIAL_PARAM_CLASS: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_PERIMETER: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MODEL_AREA: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MODEL_LENGTH: return StorageType.Double;
                case BuiltInParameter.SHEET_ASSEMBLY_KEYNOTE: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_ASSEMBLY_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_COST: return StorageType.Double;
                case BuiltInParameter.SHEET_ASSEMBLY_TYPE_MARK: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_ASSEMBLY_CODE: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_URL: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_TYPE_COMMENTS: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_MANUFACTURER: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_MODEL: return StorageType.String;
                case BuiltInParameter.SHEET_ASSEMBLY_NAME: return StorageType.String;
                case BuiltInParameter.RBS_REFERENCE_FREESIZE: return StorageType.String;
                case BuiltInParameter.RBS_REFERENCE_OVERALLSIZE: return StorageType.String;
                case BuiltInParameter.RBS_REFERENCE_LINING_THICKNESS: return StorageType.Double;
                case BuiltInParameter.RBS_REFERENCE_LINING_TYPE: return StorageType.String;
                case BuiltInParameter.RBS_REFERENCE_INSULATION_THICKNESS: return StorageType.Double;
                case BuiltInParameter.RBS_REFERENCE_INSULATION_TYPE: return StorageType.String;
                case BuiltInParameter.RBS_PIPE_CALCULATED_SIZE: return StorageType.String;
                case BuiltInParameter.RBS_DUCT_CALCULATED_SIZE: return StorageType.String;
                case BuiltInParameter.RBS_INSULATION_LINING_VOLUME: return StorageType.Double;
                case BuiltInParameter.ASSEMBLY_NAME: return StorageType.String;
                case BuiltInParameter.RBS_COMPONENT_CLASSIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_RISEDROP_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_RISEDROP_2LINEDROPSYMBOL_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_RISEDROP_2LINERISESYMBOL_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_RISEDROP_1LINEDROPSYMBOL_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_RISEDROP_1LINERISESYMBOL_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_RISEDROP_1LINETEEUPSYMBOL_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_RISEDROP_1LINETEEDOWNSYMBOL_PARAM: return StorageType.Integer;
                case BuiltInParameter.ASSEMBLY_NAMING_CATEGORY: return StorageType.ElementId;
                case BuiltInParameter.RAILING_SYSTEM_HAS_TOP_RAIL: return StorageType.Integer;
                case BuiltInParameter.CONTINUOUSRAIL_JOIN_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONTINUOUSRAIL_PLUS_TREAD_DEPTH_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONTINUOUSRAIL_LENGTH_PARAM: return StorageType.Double;
                case BuiltInParameter.HANDRAIL_SUPPORTS_JUSTIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.HANDRAIL_SUPPORTS_NUMBER_PARAM: return StorageType.Integer;
                case BuiltInParameter.HANDRAIL_SUPPORTS_SPACING_PARAM: return StorageType.Double;
                case BuiltInParameter.HANDRAIL_SUPPORTS_LAYOUT_PARAM: return StorageType.Integer;
                case BuiltInParameter.HANDRAIL_SUPPORTS_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.CONTINUOUSRAIL_END_EXTENSION_LENGTH_PARAM: return StorageType.Double;
                case BuiltInParameter.CONTINUOUSRAIL_END_TERMINATION_ATTACHMENT_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONTINUOUSRAIL_EXTENSION_LENGTH_PARAM: return StorageType.Double;
                case BuiltInParameter.CONTINUOUSRAIL_BEGINNING_TERMINATION_ATTACHMENT_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONTINUOUSRAIL_END_TERMINATION_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.CONTINUOUSRAIL_BEGINNING_TERMINATION_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.CONTINUOUSRAIL_MATERIALS_PARAM: return StorageType.ElementId;
                case BuiltInParameter.CONTINUOUSRAIL_TRANSITION_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.HANDRAIL_HAND_CLEARANCE_PARAM: return StorageType.Double;
                case BuiltInParameter.HANDRAIL_PROJECTION_PARAM: return StorageType.Double;
                case BuiltInParameter.HANDRAIL_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.CONTINUOUSRAIL_PROFILE_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.CONTINUOUSRAIL_FILLET_RADIUS_PARAM: return StorageType.Double;
                case BuiltInParameter.CONTINUOUSRAIL_DEFAULT_JOIN_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RAILING_SYSTEM_SECONDARY_HANDRAILS_LATTERAL_OFFSET: return StorageType.Double;
                case BuiltInParameter.RAILING_SYSTEM_SECONDARY_HANDRAILS_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RAILING_SYSTEM_SECONDARY_HANDRAILS_POSITION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RAILING_SYSTEM_SECONDARY_HANDRAILS_TYPES_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RAILING_SYSTEM_HANDRAILS_LATTERAL_OFFSET: return StorageType.Double;
                case BuiltInParameter.RAILING_SYSTEM_HANDRAILS_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RAILING_SYSTEM_HANDRAILS_POSITION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RAILING_SYSTEM_HANDRAILS_TYPES_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RAILING_SYSTEM_TOP_RAIL_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RAILING_SYSTEM_TOP_RAIL_TYPES_PARAM: return StorageType.ElementId;
                case BuiltInParameter.POINT_ELEMENT_ROTATION_ANGLE: return StorageType.Double;
                case BuiltInParameter.FLEXIBLE_INSTANCE_FLIP: return StorageType.Integer;
                case BuiltInParameter.POINT_FLEXIBLE_ORIENTATION_TYPE: return StorageType.Integer;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_FLOOR: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_OPENING: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_SKYLIGHT: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_GLAZING: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_EXT_WALL_UNDERGROUND: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_SLAB: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_SHADE: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_ROOF: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_INTERIOR_WALL: return StorageType.ElementId;
                case BuiltInParameter.DEFAULT_CONSTRUCTION_MASS_EXTERIOR_WALL: return StorageType.ElementId;
                case BuiltInParameter.ENERGY_ANALYSIS_SPACE_BOUNDING_PARAM: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_HORIZONTAL_VOID_THRESHOLD: return StorageType.Double;
                case BuiltInParameter.ENERGY_ANALYSIS_VERTICAL_VOID_THRESHOLD: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_GRID_CELL_SIZE:
                    return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_DETERMINATION_PARAM:
                    return StorageType.Integer;
                case BuiltInParameter.LEADER_RIGHT_ATTACHMENT: return StorageType.Integer;
                case BuiltInParameter.LEADER_LEFT_ATTACHMENT: return StorageType.Integer;
                case BuiltInParameter.POINT_ELEMENT_MEASURE_FROM: return StorageType.Integer;
                case BuiltInParameter.POINT_ELEMENT_ANGLE: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_CHORD_LENGTH: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_NORMALIZED_SEGMENT_LENGTH: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_SEGMENT_LENGTH: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_NORMALIZED_CURVE_PARAMATER: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_NON_NORMALIZED_CURVE_PARAMATER: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_MEASUREMENT_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_END_ATTACHMENT_REFCOLUMN_END: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_START_ATTACHMENT_REFCOLUMN_END: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_END_ATTACHMENT_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_BEAM_START_ATTACHMENT_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_BEAM_END_ATTACHMENT_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_START_ATTACHMENT_TYPE: return StorageType.Integer;
                case BuiltInParameter.TEXT_BOX_VISIBILITY: return StorageType.Integer;
                case BuiltInParameter.CURVE_BY_POINTS_PROJECTION_TYPE: return StorageType.Integer;
                case BuiltInParameter.FOLLOW_SURFACE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_INCLUDE_THERMAL_PROPERTIES: return StorageType.Integer;
                case BuiltInParameter.POINT_FLEXIBLE_NUM_PARAM: return StorageType.Integer;
                case BuiltInParameter.FRAMING_LENGTH_ROUNDOFF: return StorageType.Double;
                case BuiltInParameter.SLANTED_COLUMN_BASE_EXTENSION: return StorageType.Double;
                case BuiltInParameter.SLANTED_COLUMN_TOP_EXTENSION: return StorageType.Double;
                case BuiltInParameter.SLANTED_COLUMN_BASE_CUT_STYLE: return StorageType.Integer;
                case BuiltInParameter.SLANTED_COLUMN_TOP_CUT_STYLE: return StorageType.Integer;
                case BuiltInParameter.RBS_BUILDING_USELOADCREDITS: return StorageType.Integer;
                case BuiltInParameter.TILE_PATTERN_FAMREF_COMPONENT_EXTENTS: return StorageType.Integer;
                case BuiltInParameter.TILE_PATTERN_GRID_CELLS_Y: return StorageType.Integer;
                case BuiltInParameter.TILE_PATTERN_GRID_CELLS_X: return StorageType.Integer;
                case BuiltInParameter.TILE_PATTERN_GRID_UNIT_Y: return StorageType.Double;
                case BuiltInParameter.TILE_PATTERN_GRID_UNIT_X: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_SHOW_NORMAL_PLANE_ONLY: return StorageType.Integer;
                case BuiltInParameter.LEVEL_IS_GROUND_PLANE: return StorageType.Integer;
                case BuiltInParameter.BASEPOINT_ANGLETON_PARAM: return StorageType.Double;
                case BuiltInParameter.BASEPOINT_ELEVATION_PARAM: return StorageType.Double;
                case BuiltInParameter.BASEPOINT_EASTWEST_PARAM: return StorageType.Double;
                case BuiltInParameter.BASEPOINT_NORTHSOUTH_PARAM: return StorageType.Double;
                case BuiltInParameter.SLANTED_COLUMN_GEOMETRY_TREATMENT_BASE: return StorageType.Integer;
                case BuiltInParameter.SLANTED_COLUMN_GEOMETRY_TREATMENT_TOP: return StorageType.Integer;
                case BuiltInParameter.ROOM_PLENUM_LIGHTING_PARAM: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_TOP_REFERENCEDEND: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_TOP_RATIO: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_TOP_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_TOP_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_BASE_REFERENCEDEND: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_BASE_RATIO: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_BASE_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_BASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.INSTANCE_MOVE_BASE_WITH_GRIDS: return StorageType.Integer;
                case BuiltInParameter.INSTANCE_MOVE_TOP_WITH_GRIDS: return StorageType.Integer;
                case BuiltInParameter.SLANTED_COLUMN_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.VIEW_SLANTED_COLUMN_SYMBOL_OFFSET: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_MIRRORED: return StorageType.Integer;
                case BuiltInParameter.POINT_ELEMENT_ZFLIPPED: return StorageType.Integer;
                case BuiltInParameter.POINT_ELEMENT_HOSTED_ON_FACE_V_PARAM: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_HOSTED_ON_FACE_U_PARAM: return StorageType.Double;
                case BuiltInParameter.LOCKED_END_OFFSET: return StorageType.Double;
                case BuiltInParameter.LOCKED_START_OFFSET: return StorageType.Double;
                case BuiltInParameter.LOCKED_BASE_OFFSET: return StorageType.Double;
                case BuiltInParameter.LOCKED_TOP_OFFSET: return StorageType.Double;
                case BuiltInParameter.RBS_PROJECT_REPORTTYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_BUILDING_CONSTRUCTIONCLASS: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_UTILITY_PARAM: return StorageType.Integer;
                case BuiltInParameter.POINT_FLEXIBLE_SHOW_NUMBER: return StorageType.Integer;
                case BuiltInParameter.POINT_FLEXIBLE_CONSTRAINED: return StorageType.Integer;
                case BuiltInParameter.POINT_NAME_PARAM: return StorageType.String;
                case BuiltInParameter.POINT_ADAPTIVE_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.SPOT_DIM_STYLE_SLOPE_UNITS: return StorageType.None;
                case BuiltInParameter.POINT_ELEMENT_DRIVING: return StorageType.Integer;
                case BuiltInParameter.SPOT_SLOPE_LEADER_LENGTH: return StorageType.Double;
                case BuiltInParameter.SPOT_SLOPE_SUFFIX: return StorageType.String;
                case BuiltInParameter.SPOT_SLOPE_PREFIX: return StorageType.String;
                case BuiltInParameter.POINT_VISIBILITY_PARAM: return StorageType.Integer;
                case BuiltInParameter.POINT_ELEMENT_SHOW_PLANES: return StorageType.Integer;
                case BuiltInParameter.CURVE_IS_REFERENCE_LINE: return StorageType.Integer;
                case BuiltInParameter.POINT_ELEMENT_HOSTED_PARAM: return StorageType.Double;
                case BuiltInParameter.POINT_ELEMENT_DRIVEN: return StorageType.Integer;
                case BuiltInParameter.POINT_ELEMENT_OFFSET: return StorageType.Double;
                case BuiltInParameter.SPOT_DIM_STYLE_SLOPE_UNITS_ALT: return StorageType.None;
                case BuiltInParameter.FBX_LIGHT_PHOTOMETRIC_FILE_CACHE: return StorageType.String;
                case BuiltInParameter.FBX_LIGHT_PHOTOMETRICS_FAM: return StorageType.String;
                case BuiltInParameter.FAMILY_CURVE_ATTACHMENT_PROPORTION: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_LOSS_FACTOR_CTRL: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_INITIAL_COLOR_CTRL: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_LOSS_FACTOR_METHOD: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_INITIAL_COLOR_NAME: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_AT_A_DISTANCE: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_INITIAL_INTENSITY_INPUT_METHOD: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_SOURCE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_SOURCE_DIAMETER: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_EMIT_CIRCLE_DIAMETER: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_EMIT_RECTANGLE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_EMIT_RECTANGLE_WIDTH: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_EMIT_LINE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_EMIT_SHAPE_VISIBLE: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_DIMMING_LIGHT_COLOR: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_LUMENAIRE_DIRT: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_LAMP_LUMEN_DEPR: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_SURFACE_LOSS: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_LAMP_TILT_LOSS: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_VOLTAGE_LOSS: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_TEMPERATURE_LOSS: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_COLOR_FILTER: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_INITIAL_COLOR_TEMPERATURE: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_ILLUMINANCE: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_LIMUNOUS_INTENSITY: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_EFFICACY: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_WATTAGE: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_INITIAL_INTENSITY: return StorageType.Integer;
                case BuiltInParameter.FBX_LIGHT_PHOTOMETRICS: return StorageType.None;
                case BuiltInParameter.FBX_ASSET_TYPE: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_GRID_OPTION_PARAM_2: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_GRID_OPTION_PARAM_1: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_DISCARDEDDIVISIONLINES: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_COMPONENT_TRIM_TYPE: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN_MIRROR: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_RULE_2_SUSPENSION: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_RULE_1_SUSPENSION: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_COMPONENTS: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN_FILL_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_PATTERN_FILL: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN_LINES_STYLE: return StorageType.ElementId;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_PATTERN_LINES: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_GRIDLINES_STYLE: return StorageType.ElementId;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_GRIDLINES: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_NODES: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_ORIGINAL_SURFACE_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_ORIGINAL_SURFACE: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_DISPLAY_SURFACE_OPTION: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_ALL_GRID_ROTATION: return StorageType.Double;
                case BuiltInParameter.DIVIDED_SURFACE_TILE_BORDER: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_ALL_POINTS: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN: return StorageType.ElementId;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN_FLIP: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN_ROTATION_ANGLE: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN_INDENT_2: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_PATTERN_INDENT_1: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_COVER_FACE_COMPLETELY: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_OFFSET_FROM_SURFACE: return StorageType.Double;
                case BuiltInParameter.DIVIDED_SURFACE_TOTAL_EDGE_LENGTH: return StorageType.Double;
                case BuiltInParameter.DIVIDED_SURFACE_EDGE_NUMBER: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_POINT_NUMBER: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_FACET_NUMBER: return StorageType.Integer;
                case BuiltInParameter.DIVIDED_SURFACE_SURFACE_AREA: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_ROOM_LIGHTING_CALC_LUMINAIREPLANE: return StorageType.Double;
                case BuiltInParameter.LAYOUTNODE_CURVETYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FABRICATION_PART_PAT_NO: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_END_SIZE: return StorageType.String;
                case BuiltInParameter.FABRICATION_SEC_SIZE: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRI_SIZE: return StorageType.String;
                case BuiltInParameter.FABRICATION_CHANGE_SERVICE_PARAM: return StorageType.None;
                case BuiltInParameter.FABRICATION_SET_UP_DOWN_TAG_FROM_BOTTOM: return StorageType.String;
                case BuiltInParameter.FABRICATION_INSULATION_MATERIAL_FINISH: return StorageType.ElementId;
                case BuiltInParameter.DISPLACED_ELEMENT_DISPLACEMENT_Z: return StorageType.Double;
                case BuiltInParameter.DISPLACED_ELEMENT_DISPLACEMENT_Y: return StorageType.Double;
                case BuiltInParameter.DISPLACED_ELEMENT_DISPLACEMENT_X: return StorageType.Double;
                case BuiltInParameter.DISPLACEMENT_PATH_STYLE: return StorageType.Integer;
                case BuiltInParameter.DISPLACEMENT_PATH_DEPTH: return StorageType.Integer;
                case BuiltInParameter.REFERENCE_VIEWER_UI_TARGET_VIEW: return StorageType.ElementId;
                case BuiltInParameter.REFERENCE_VIEWER_UI_TARGET_FILTER: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_FITTING_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_DOUBLEWALL_MATERIAL_ABBREVIATION: return StorageType.String;
                case BuiltInParameter.FABRICATION_MATERIAL_ABBREVIATION: return StorageType.String;
                case BuiltInParameter.FABRICATION_INSULATION_SPECIFICATION_ABBREVIATION: return StorageType.String;
                case BuiltInParameter.FABRICATION_INSULATION_ABBREVIATION: return StorageType.String;
                case BuiltInParameter.FABRICATION_SPECIFICATION_ABBREVIATION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PIPE_INVERT_ELEVATION: return StorageType.Double;
                case BuiltInParameter.FABRICATION_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART:
                    return StorageType.Double;
                case BuiltInParameter.FABRICATION_BOTTOM_ELEVATION_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_TOP_ELEVATION_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_CENTERLINE_ELEVATION_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_SPOT_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART:
                    return StorageType.Double;
                case BuiltInParameter.FABRICATION_SPOT_BOTTOM_ELEVATION_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_SPOT_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART:
                    return StorageType.Double;
                case BuiltInParameter.FABRICATION_SPOT_TOP_ELEVATION_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_DOUBLEWALL_MATERIAL_AREA: return StorageType.Double;
                case BuiltInParameter.FABRICATION_SET_UP_DOWN_TAG: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_SHEETMETAL_AREA: return StorageType.Double;
                case BuiltInParameter.FABRICATION_SERVICE_ABBREVIATION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_MATERIAL_THICKNESS: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_NOTES: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_LINING_AREA: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_ITEM_NUMBER: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_INSULATION_AREA: return StorageType.Double;
                case BuiltInParameter.FABRICATION_SERVICE_NAME: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_DOUBLEWALL_MATERIAL_THICKNESS: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_DOUBLEWALL_MATERIAL: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_PART_CUT_TYPE: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_PART_BOUGHT_OUT: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_ALIAS: return StorageType.String;
                case BuiltInParameter.FABRICATION_ROUTING_SOLUTIONS_UI_PARAM: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_CODE: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_TAKEOFF_DIALOG_PARAM: return StorageType.None;
                case BuiltInParameter.FABRICATION_PART_DEPTH_OUT_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_WIDTH_OUT_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_DIAMETER_OUT_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_DIAMETER_IN_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_DEPTH_IN_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_WIDTH_IN_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_ANGLE_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_LENGTH_OPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_INSULATION_SPEC: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_PART_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PRODUCT_ENTRY: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_DEPTH_OUT: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_WIDTH_OUT: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_DIAMETER_OUT: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_DEPTH_IN: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_WIDTH_IN: return StorageType.Double;
                case BuiltInParameter.FABRICATION_END_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.FABRICATION_START_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.FABRICATION_SLOPE_PARAM: return StorageType.Double;
                case BuiltInParameter.FABRICATION_RELATIVE_FILENAME: return StorageType.String;
                case BuiltInParameter.FABRICATION_VENDOR: return StorageType.String;
                case BuiltInParameter.FABRICATION_BOTTOM_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_TOP_OF_PART: return StorageType.Double;
                case BuiltInParameter.FABRICATION_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.FABRICATION_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FABRICATION_SPECIFICATION: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_VENDOR_CODE: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_WEIGHT: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_DIAMETER_IN: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PART_ANGLE: return StorageType.Double;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_INSTALL_TYPE: return StorageType.String;
                case BuiltInParameter.FABRICATION_PART_MATERIAL: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_OEM: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_PRODUCT: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_ITEM_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_SIZE_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_MATERIAL_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_SPECIFICATION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_LONG_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_RANGE: return StorageType.String;
                case BuiltInParameter.FABRICATION_PRODUCT_DATA_FINISH_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.TRUSS_FAMILY_BOTTOM_CHORD_STRUCTURAL_TYPES_PARAM: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_FAMILY_BOTTOM_CHORD_ANGLE_PARAM: return StorageType.Double;
                case BuiltInParameter.TRUSS_FAMILY_BOTTOM_CHORD_VERTICAL_PROJECTION_PARAM: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_FAMILY_BOTTOM_CHORD_START_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.TRUSS_FAMILY_BOTTOM_CHORD_END_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.REFERENCE_OTHER_VIEW_UI_REF_VIEW: return StorageType.ElementId;
                case BuiltInParameter.REFERENCE_OTHER_VIEW_UI_TOGGLE: return StorageType.Integer;
                case BuiltInParameter.JOIST_SYSTEM_ELEM_TAG_NEW_MEMBERS_VIEW: return StorageType.ElementId;
                case BuiltInParameter.REFERENCE_VIEWER_ATTR_TAG: return StorageType.ElementId;
                case BuiltInParameter.REFERENCE_VIEWER_TARGET_VIEW: return StorageType.ElementId;
                case BuiltInParameter.MATCHLINE_BOTTOM_PLANE: return StorageType.ElementId;
                case BuiltInParameter.MATCHLINE_TOP_PLANE: return StorageType.ElementId;
                case BuiltInParameter.MATCHLINE_BOTTOM_OFFSET: return StorageType.Double;
                case BuiltInParameter.MATCHLINE_TOP_OFFSET: return StorageType.Double;
                case BuiltInParameter.TRUSS_FAMILY_TOP_CHORD_STRUCTURAL_TYPES_PARAM: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_FAMILY_TOP_CHORD_ANGLE_PARAM: return StorageType.Double;
                case BuiltInParameter.TRUSS_FAMILY_TOP_CHORD_VERTICAL_PROJECTION_PARAM: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_FAMILY_TOP_CHORD_START_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.TRUSS_FAMILY_TOP_CHORD_END_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.TRUSS_FAMILY_DIAG_WEB_STRUCTURAL_TYPES_PARAM: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_FAMILY_DIAG_WEB_ANGLE_PARAM: return StorageType.Double;
                case BuiltInParameter.TRUSS_FAMILY_DIAG_WEB_START_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.TRUSS_FAMILY_DIAG_WEB_END_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.TRUSS_FAMILY_VERT_WEB_STRUCTURAL_TYPES_PARAM: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_FAMILY_VERT_WEB_ANGLE_PARAM: return StorageType.Double;
                case BuiltInParameter.TRUSS_FAMILY_VERT_WEB_START_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.TRUSS_FAMILY_VERT_WEB_END_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.TRUSS_ELEMENT_TAG_NEW_MEMBERS_VIEW: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_NON_BEARING_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.TRUSS_BEARING_CHORD_TOP_BOTTOM_PARAM: return StorageType.Integer;
                case BuiltInParameter.TRUSS_ELEMENT_SPAN_PARAM: return StorageType.Double;
                case BuiltInParameter.TRUSS_ELEMENT_STICK_JUST_PARAM: return StorageType.Integer;
                case BuiltInParameter.TRUSS_FAMILY_WEBS_HAVE_SYMBOLIC_CUTBACK_PARAM: return StorageType.Integer;
                case BuiltInParameter.TRUSS_HEIGHT: return StorageType.Double;
                case BuiltInParameter.TRUSS_FAMILY_TRANSFORMATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.TRUSS_ELEMENT_ROTATE_CHORDS_WITH_TRUSS: return StorageType.Integer;
                case BuiltInParameter.TRUSS_ELEMENT_REFERENCE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.TRUSS_ELEMENT_END1_ELEVATION: return StorageType.Double;
                case BuiltInParameter.TRUSS_ELEMENT_END0_ELEVATION: return StorageType.Double;
                case BuiltInParameter.TRUSS_ELEMENT_BEARING_JUST_PARAM: return StorageType.Integer;
                case BuiltInParameter.TRUSS_ELEMENT_CREATE_BOTTOM_PARAM: return StorageType.Integer;
                case BuiltInParameter.TRUSS_ELEMENT_CREATE_TOP_PARAM: return StorageType.Integer;
                case BuiltInParameter.TRUSS_ELEMENT_ANGLE_PARAM: return StorageType.Double;
                case BuiltInParameter.TRUSS_ELEMENT_CLASS_PARAM: return StorageType.String;
                case BuiltInParameter.TRUSS_LENGTH: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_PARAM_PRESET_AREA: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_PARAM_PRESET_LINEAR: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_PARAM_PRESET: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Z_TRANSLATION_SPRING: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Z_TRANSLATION_FIXED: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Z_ROTATION_SPRING: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Z_ROTATION_FIXED: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Y_TRANSLATION_SPRING: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Y_TRANSLATION_FIXED: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Y_ROTATION_SPRING: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_Y_ROTATION_FIXED: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_X_TRANSLATION_SPRING: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_X_TRANSLATION_FIXED: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_X_ROTATION_SPRING: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_X_ROTATION_FIXED: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_AREA_RESTRAINT_Z: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_AREA_RESTRAINT_Y: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_AREA_RESTRAINT_X: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_LINEAR_RESTRAINT_ROT_X: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_LINEAR_RESTRAINT_Z: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_LINEAR_RESTRAINT_Y: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_LINEAR_RESTRAINT_X: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_RESTRAINT_ROT_Z: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_RESTRAINT_ROT_Y: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_RESTRAINT_ROT_X: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_RESTRAINT_Z: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_RESTRAINT_Y: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_RESTRAINT_X: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_DIRECTION_ROT_Z: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_DIRECTION_ROT_Y: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_DIRECTION_ROT_X: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_DIRECTION_Z: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_DIRECTION_Y: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_DIRECTION_X: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_CONDITIONS_IS_EXT: return StorageType.Integer;
                case BuiltInParameter.BOUNDARY_CONDITIONS_TYPE: return StorageType.Integer;
                case BuiltInParameter.KEY_SOURCE_PARAM: return StorageType.String;
                case BuiltInParameter.KEYNOTE_PARAM: return StorageType.String;
                case BuiltInParameter.KEYNOTE_NUMBER: return StorageType.String;
                case BuiltInParameter.SHEET_KEY_NUMBER: return StorageType.Integer;
                case BuiltInParameter.KEYNOTE_TEXT: return StorageType.String;
                case BuiltInParameter.KEY_VALUE: return StorageType.String;
                case BuiltInParameter.PHY_MATERIAL_PARAM_GRADE: return StorageType.String;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SPECIES: return StorageType.String;
                case BuiltInParameter.PHY_MATERIAL_PARAM_EXP_COEFF: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_BENDING: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_MOD: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_POISSON_MOD: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_PERPENDICULAR: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_PARALLEL: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_COMPRESSION_PERPENDICULAR: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_COMPRESSION_PARALLEL: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_YOUNG_MOD: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_TYPE: return StorageType.Integer;
                case BuiltInParameter.ELEM_CATEGORY_PARAM_MT: return StorageType.ElementId;
                case BuiltInParameter.ELEM_CATEGORY_PARAM: return StorageType.ElementId;
                case BuiltInParameter.MATERIAL_VOLUME: return StorageType.Double;
                case BuiltInParameter.MATERIAL_AREA: return StorageType.Double;
                case BuiltInParameter.MATERIAL_ASPAINT: return StorageType.Integer;
                case BuiltInParameter.MATERIAL_NAME: return StorageType.String;
                case BuiltInParameter.RBS_PIPE_SLOPE_OPTIONS_DEF_PARAM: return StorageType.Integer;
                case BuiltInParameter.FABRICATION_SERVICE_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_ANGLE_OF_DEFLECTION: return StorageType.Double;
                case BuiltInParameter.CONNECTOR_LENGTH: return StorageType.Double;
                case BuiltInParameter.RBS_DUCT_SYSTEM_CALCULATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_SYSTEM_CALCULATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_DUCT_SYSTEM_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_SYSTEM_ABBREVIATION_PARAM: return StorageType.String;
                case BuiltInParameter.MEP_SYSTEM_LINE_GRAPHICS_OVERRIDES_PARAM: return StorageType.None;
                case BuiltInParameter.RBS_PIPE_SLOPE_DEF_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_ENGAGEMENT_LENGTH: return StorageType.Double;
                case BuiltInParameter.RBS_SYSTEM_FLOW_CONVERSION_METHOD_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_NUM_ELEMENTS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SYSTEM_BASE_ELEMENT_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_SYSTEM_NAME_PARAM: return StorageType.String;
                case BuiltInParameter.PHY_MATERIAL_PARAM_LIGHT_WEIGHT: return StorageType.Integer;
                case BuiltInParameter.PHY_MATERIAL_PARAM_BEHAVIOR: return StorageType.Integer;
                case BuiltInParameter.PHY_MATERIAL_PARAM_RESISTANCE_CALC_STRENGTH: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_REDUCTION_FACTOR: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_MINIMUM_TENSILE_STRENGTH: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_MINIMUM_YIELD_STRESS: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_STRENGTH_REDUCTION: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_REINFORCEMENT: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_BENDING_REINFORCEMENT: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_CONCRETE_COMPRESSION: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_EXP_COEFF3: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_EXP_COEFF2: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_EXP_COEFF1: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_UNIT_WEIGHT: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_MOD3: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_MOD2: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_SHEAR_MOD1: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_POISSON_MOD3: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_POISSON_MOD2: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_POISSON_MOD1: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_YOUNG_MOD3: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_YOUNG_MOD2: return StorageType.Double;
                case BuiltInParameter.PHY_MATERIAL_PARAM_YOUNG_MOD1: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_SIZE_MAXIMUM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_SIZE_MINIMUM: return StorageType.Double;
                case BuiltInParameter.RBS_DUCT_PRESSURE_DROP: return StorageType.Double;
                case BuiltInParameter.ROUTING_PREFERENCE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_DUCT_ROUTING_PREFERENCE_PARAM: return StorageType.None;
                case BuiltInParameter.RBS_SEGMENT_DESCRIPTION_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_PIPE_JOINTTYPE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_PIPE_SEGMENT_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_ROUTING_PREFERENCE_PARAM: return StorageType.None;
                case BuiltInParameter.RBS_PARALLELPIPES_VERTICAL_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.RBS_PARALLELPIPES_HORIZONTAL_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.RBS_PARALLELPIPES_VERTICAL_NUMBER: return StorageType.Integer;
                case BuiltInParameter.RBS_PARALLELPIPES_HORIZONTAL_NUMBER: return StorageType.Integer;
                case BuiltInParameter.RBS_PARALLELCONDUITS_VERTICAL_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.RBS_PARALLELCONDUITS_HORIZONTAL_OFFSET_VALUE: return StorageType.Double;
                case BuiltInParameter.RBS_PARALLELCONDUITS_VERTICAL_NUMBER: return StorageType.Integer;
                case BuiltInParameter.RBS_PARALLELCONDUITS_HORIZONTAL_NUMBER: return StorageType.Integer;
                case BuiltInParameter.RBS_FP_SPRINKLER_ORIFICE_SIZE_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_FP_SPRINKLER_TEMPERATURE_RATING_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_FP_SPRINKLER_K_FACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_FP_SPRINKLER_PRESSURE_CLASS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_FP_SPRINKLER_ORIFICE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_FP_SPRINKLER_COVERAGE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_FP_SPRINKLER_RESPONSE_PARAM: return StorageType.Integer;
                case BuiltInParameter.MEP_PROFILE_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_SHOW_PROFILE_TYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_SYSTEM_FIXTURE_UNIT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_SLOPE: return StorageType.Double;
                case BuiltInParameter.RBS_DUCT_SLOPE: return StorageType.Double;
                case BuiltInParameter.RBS_CURVE_UTSLOPE: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_VOLUME_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_WFU_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_HWFU_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_CWFU_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FLOW_CONFIGURATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_FLOW_DIRECTION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_FIXTURE_UNITS_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_STATIC_PRESSURE: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_INSULATION_THICKNESS: return StorageType.Double;
                case BuiltInParameter.RBS_DUCT_BOTTOM_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_DUCT_TOP_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_OUTER_DIAMETER: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_INVERT_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_TYPE_FITTING_LOSS_METHOD_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_TYPE_FITTING_LOSS_TABLE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_PIPE_TYPE_FITTING_LOSS_KFACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_TYPE_VALVE_LOSS_CVFACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FITTING_LOSS_METHOD_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_FITTING_LOSS_TABLE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_PIPE_FITTING_LOSS_KFACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_VALVE_LOSS_CVFACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_ADDITIONAL_FLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_DIAMETER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CURVE_SLOPE: return StorageType.Double;
                case BuiltInParameter.RBS_ADJUSTABLE_CONNECTOR: return StorageType.Integer;
                case BuiltInParameter.RBS_FLOW_FACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_DUCT_FLOW_CONFIGURATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_DUCT_FLOW_DIRECTION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_FLUID_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_PIPE_FLUID_TEMPERATURE_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FLUID_VISCOSITY_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FLUID_DENSITY_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_INNER_DIAM_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_REYNOLDS_NUMBER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_RELATIVE_ROUGHNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FLOW_STATE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_FRICTION_FACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_VELOCITY_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FRICTION_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_PRESSUREDROP_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_ROUGHNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_MATERIAL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_PIPE_CONNECTIONTYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_PIPE_CLASS_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_CONNECTION_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_PATH_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_PATH_MODE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_START_SLOT: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_GENDER_TYPE: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_JOINT_TYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_CONFIGURATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_LOCATION_PARAM: return StorageType.String;
                case BuiltInParameter.PANEL_SCHEDULE_NAME: return StorageType.String;
                case BuiltInParameter.TEMPLATE_NAME: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_PANEL_CURRENT_PHASEC_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_CURRENT_PHASEB_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_CURRENT_PHASEA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_RULE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_LOADSUMMARY_DEMAND_CURRENT_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_LOADSUMMARY_CONNECTED_CURRENT_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_LOADSUMMARY_DEMAND_LOAD_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_LOADSUMMARY_CONNECTED_LOAD_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_LOADSUMMARY_LOADCLASSIFICATION_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_NOTES_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_NUMBER_OF_ELEMENTS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_FRAME_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTAL_DEMAND_CURRENT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTAL_CONNECTED_CURRENT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTAL_DEMAND_FACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_SCHEDULE_FOOTER_NOTES_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_PANEL_SCHEDULE_HEADER_NOTES_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_PANEL_NUMWIRES_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_NUMPHASES_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_NEUTRAL_RATING_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_NEUTRAL_BUS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_GROUND_BUS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_BUSSING_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_PANEL_SUBFEED_LUGS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_SUPPLY_FROM_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_PANEL_MCB_RATING_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_MAINSTYPE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_PANEL_FEED_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_CONDUITRUN_OUTER_DIAM_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CONDUITRUN_INNER_DIAM_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CONDUITRUN_DIAMETER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAYRUN_WIDTH_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAYRUN_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAYCONDUITRUN_LENGTH_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_LOAD_SUB_CLASSIFICATION_MOTOR: return StorageType.Integer;
                case BuiltInParameter.RBS_CABLETRAY_SHAPETYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_CABLETRAYCONDUIT_BENDORFITTING: return StorageType.Integer;
                case BuiltInParameter.RBS_CTC_SERVICE_TYPE: return StorageType.String;
                case BuiltInParameter.RBS_CONDUIT_OUTER_DIAM_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CONDUIT_INNER_DIAM_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CTC_BOTTOM_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_CTC_TOP_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAY_WIDTH_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAY_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.CIRCUIT_LOAD_CLASSIFICATION_PARAM: return StorageType.String;
                case BuiltInParameter.CABLETRAY_MINBENDMULTIPLIER_PARAM: return StorageType.Double;
                case BuiltInParameter.CONDUIT_STANDARD_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CONDUIT_TRADESIZE: return StorageType.String;
                case BuiltInParameter.RBS_CONDUIT_BENDRADIUS: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAY_BENDRADIUS: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAY_RUNGHEIGHT: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAY_RUNGWIDTH: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAY_RUNGSPACE: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAY_THICKNESS: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_SWITCH_ID_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_WIRE_CIRCUIT_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.RBS_WIRE_CIRCUIT_LOAD_NAME: return StorageType.String;
                case BuiltInParameter.RBS_WIRE_NUM_CONDUCTORS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_WIRE_TICKMARK_STATE: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_PANEL_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_NUMBER: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_WIRE_CIRCUITS: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_WIRE_NUM_RUNS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_WIRE_NUM_HOTS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_WIRE_NUM_NEUTRALS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_WIRE_NUM_GROUNDS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_WIRE_TYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_WIRE_ELEVATION: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_WIRE_HOT_ADJUSTMENT: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_WIRE_NEUTRAL_ADJUSTMENT: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_WIRE_GROUND_ADJUSTMENT: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_WIRE_SHARE_NEUTRAL: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_WIRE_SHARE_GROUND: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_NAME: return StorageType.String;
                case BuiltInParameter.RBS_FAMILY_CONTENT_SECONDARY_DISTRIBSYS: return StorageType.ElementId;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_PREFIX_SEPARATOR: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_PREFIX: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_MODIFICATIONS: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_ENCLOSURE: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_MAINS: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_MOUNTING: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_SHORT_CIRCUIT_RATING: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_MAX_POLE_BREAKERS: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_PANEL_NAME: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALESTLOAD_HVAC_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALLOAD_HVAC_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALESTLOAD_LIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALLOAD_LIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALESTLOAD_POWER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALLOAD_POWER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALESTLOAD_OTHER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALLOAD_OTHER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALESTLOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_PANEL_TOTALLOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_DEMANDFACTOR_LOADCLASSIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_DEMANDFACTOR_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_DEMANDFACTOR_DEMANDLOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_FAMILY_CONTENT_DISTRIBUTION_SYSTEM: return StorageType.ElementId;
                case BuiltInParameter.RBS_DISTRIBUTIONSYS_VLL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_DISTRIBUTIONSYS_VLG_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_DISTRIBUTIONSYS_PHASE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_DISTRIBUTIONSYS_CONFIG_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_DISTRIBUTIONSYS_NUMWIRES_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_VOLTAGETYPE_VOLTAGE_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_VOLTAGETYPE_MINVOLTAGE_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_VOLTAGETYPE_MAXVOLTAGE_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_LOAD_PHASEC: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_LOAD_PHASEB: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_LOAD_PHASEA: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_LOAD_PHASEC: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_LOAD_PHASEB: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_LOAD_PHASEA: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_CURRENT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_CURRENT_PHASEA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_CURRENT_PHASEB_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_CURRENT_PHASEC_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_CURRENT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_CURRENT_PHASEA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_CURRENT_PHASEB_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_CURRENT_PHASEC_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_VOLTAGE_DROP_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_CALC_COEFFICIENT_UTILIZATION: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_LENGTH_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_RATING_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_WIRE_SIZE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_WIRE_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_ELEC_ROOM_CAVITY_RATIO: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_PHOTOMETRIC_FILE: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_ROOM_AVERAGE_ILLUMINATION: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_ROOM_REFLECTIVITY_FLOOR: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_ROOM_REFLECTIVITY_WALLS: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_ROOM_REFLECTIVITY_CEILING: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_ROOM_LIGHTING_CALC_WORKPLANE: return StorageType.Double;
                case BuiltInParameter.RBS_WIRE_MATERIAL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_WIRE_TEMPERATURE_RATING_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_WIRE_INSULATION_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_WIRE_MAX_CONDUCTOR_SIZE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_WIRE_NEUTRAL_MULTIPLIER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_WIRE_NEUTRAL_INCLUDED_IN_BALANCED_LOAD_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_WIRE_NEUTRAL_MODE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_WIRE_CONDUIT_TYPE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_AMBIENT_TEMPERATURE: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_TYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_LOAD_CLASSIFICATION: return StorageType.ElementId;
                case BuiltInParameter.RBS_ELEC_TRUE_LOAD_PHASE3: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_LOAD_PHASE2: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_LOAD_PHASE1: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_TRUE_LOAD: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_POWER_FACTOR_STATE: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_POWER_FACTOR: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_LOAD_PHASE3: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_LOAD_PHASE2: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_LOAD_PHASE1: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_APPARENT_LOAD: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_BALANCED_LOAD: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_VOLTAGE: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_NUMBER_OF_POLES: return StorageType.Integer;
                case BuiltInParameter.RBS_CONNECTOR_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.VIEW_FAMILY_SCHEDULES: return StorageType.String;
                case BuiltInParameter.VIEW_FAMILY_AND_TYPE_SCHEDULES: return StorageType.String;
                case BuiltInParameter.VIEW_TYPE_SCHEDULES: return StorageType.String;
                case BuiltInParameter.MARKUPS_PRIVATE: return StorageType.String;
                case BuiltInParameter.MARKUPS_NOTES: return StorageType.String;
                case BuiltInParameter.MARKUPS_HISTORY: return StorageType.String;
                case BuiltInParameter.MARKUPS_STATUS: return StorageType.Integer;
                case BuiltInParameter.MARKUPS_LABEL: return StorageType.String;
                case BuiltInParameter.MARKUPS_CREATOR: return StorageType.String;
                case BuiltInParameter.MARKUPS_CREATED: return StorageType.String;
                case BuiltInParameter.MARKUPS_MODIFIED: return StorageType.String;
                case BuiltInParameter.VIEW_SCHEMA_SETTING_FOR_SYSTEM_TEMPLATE: return StorageType.None;
                case BuiltInParameter.LEGEND_COMPONENT_DETAIL_LEVEL: return StorageType.Integer;
                case BuiltInParameter.LEGEND_COMPONENT_LENGTH: return StorageType.Double;
                case BuiltInParameter.LEGEND_COMPONENT_VIEW: return StorageType.Integer;
                case BuiltInParameter.LEGEND_COMPONENT: return StorageType.ElementId;
                case BuiltInParameter.OPTION_SET_ID: return StorageType.ElementId;
                case BuiltInParameter.OPTION_NAME: return StorageType.String;
                case BuiltInParameter.PRIMARY_OPTION_ID: return StorageType.ElementId;
                case BuiltInParameter.OPTION_SET_NAME: return StorageType.String;
                case BuiltInParameter.GROUP_ATTACHED_PARENT_NAME: return StorageType.String;
                case BuiltInParameter.GROUP_ALLOWED_VIEW_TYPES: return StorageType.String;
                case BuiltInParameter.GROUP_OFFSET_FROM_LEVEL: return StorageType.Double;
                case BuiltInParameter.GROUP_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.MEP_SYSTEM_FILL_GRAPHICS_OVERRIDES_PARAM: return StorageType.None;
                case BuiltInParameter.DUCT_TERMINAL_ENGAGEMENT_LENGTH: return StorageType.Double;
                case BuiltInParameter.CONNECTOR_INSIDE_DIAMETER: return StorageType.Double;
                case BuiltInParameter.CONNECTOR_DIAMETER: return StorageType.Double;
                case BuiltInParameter.RBS_CABLETRAYCONDUIT_CONNECTORELEM_TYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_CABLETRAYCONDUIT_SYSTEM_TYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_CONNECTOR_ISPRIMARY: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_REFERENCE_INDEX: return StorageType.Integer;
                case BuiltInParameter.RBS_PIPE_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_ANGLE: return StorageType.Double;
                case BuiltInParameter.RBS_DUCT_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_INDEX: return StorageType.Integer;
                case BuiltInParameter.CONNECTOR_VISIBLE_SIZE: return StorageType.Double;
                case BuiltInParameter.CONNECTOR_HEIGHT: return StorageType.Double;
                case BuiltInParameter.CONNECTOR_WIDTH: return StorageType.Double;
                case BuiltInParameter.CONNECTOR_RADIUS: return StorageType.Double;
                case BuiltInParameter.CONNECTOR_PROFILE_TYPE: return StorageType.Integer;
                case BuiltInParameter.PIPING_GENDER_TYPE: return StorageType.String;
                case BuiltInParameter.PIPING_CONNECTION_TYPE: return StorageType.String;
                case BuiltInParameter.RBS_PART_TYPE: return StorageType.Integer;
                case BuiltInParameter.PEAK_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_REFERENCE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.SPACE_INFILTRATION_AIRFLOW: return StorageType.Double;
                case BuiltInParameter.SPACE_INFILTRATION_AIRFLOW_PER_AREA: return StorageType.Double;
                case BuiltInParameter.SPACE_OUTDOOR_AIRFLOW: return StorageType.Double;
                case BuiltInParameter.SPACE_OUTDOOR_AIRFLOW_PER_PERSON: return StorageType.Double;
                case BuiltInParameter.SPACE_OUTDOOR_AIRFLOW_PER_AREA: return StorageType.Double;
                case BuiltInParameter.SPACE_AIR_CHANGES_PER_HOUR: return StorageType.Double;
                case BuiltInParameter.SPACE_POWER_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_LIGHTING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_PEOPLE_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_POWER_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_LIGHTING_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_PEOPLE_LATENT_HEAT_GAIN_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_PEOPLE_SENSIBLE_HEAT_GAIN_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_AREA_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_AIRFLOW_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.PEAK_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.PEAK_HEATING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_LEVEL_OFFSET_TOP: return StorageType.Double;
                case BuiltInParameter.ZONE_LEVEL_OFFSET: return StorageType.Double;
                case BuiltInParameter.SYSTEM_ZONE_LEVEL_ID: return StorageType.ElementId;
                case BuiltInParameter.ZONE_CALCULATED_HYDRONIC_COOLINGFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_HYDRONIC_HEATINGFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_SPACE_OUTDOOR_AIR_OPTION_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_GBXML_OPENING_TYPE: return StorageType.Integer;
                case BuiltInParameter.ROOM_CALCULATION_POINT: return StorageType.Integer;
                case BuiltInParameter.GRID_BANK_COL_WIDTH: return StorageType.Double;
                case BuiltInParameter.GRID_BANK_ROW_HEIGHT: return StorageType.Double;
                case BuiltInParameter.GRID_BANK_COL_NUM: return StorageType.Integer;
                case BuiltInParameter.GRID_BANK_ROW_NUM: return StorageType.Integer;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_BEND_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_HORIZONTAL_BEND_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_MULTISHAPE_TRANSITION_OVALROUND_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_MULTISHAPE_TRANSITION_RECTOVAL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_TEEDOWN_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_TEEUP_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_ELBOWDOWN_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_ELBOWUP_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_EXPORT_CATEGORY_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_EXPORT_COMPLEXITY_PARAM: return StorageType.Integer;
                case BuiltInParameter.SPACE_ZONE_NAME: return StorageType.String;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_EXPORT_GBXML_DEFAULTS_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_HVACLOAD_PLENUM_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_SKYLIGHT_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_PARTITION_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_DOOR_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_WINDOW_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_WALL_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_ROOF_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_SKYLIGHT_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_PARTITION_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_FLOOR_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_DOOR_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_WINDOW_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_WALL_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_HVACLOAD_ROOF_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_COORD_AXIS_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_RBE_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_SHADING_SURFACES_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_TRANSPARENT_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_SURFACES_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_INNER_SHELL_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_OUTER_SHELL_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_BUILDING_SHELL_MODE: return StorageType.Integer;
                case BuiltInParameter.RBS_LINING_THICKNESS_FOR_DUCT: return StorageType.Double;
                case BuiltInParameter.RBS_INSULATION_THICKNESS_FOR_PIPE: return StorageType.Double;
                case BuiltInParameter.RBS_INSULATION_THICKNESS_FOR_DUCT: return StorageType.Double;
                case BuiltInParameter.BUILDING_UNOCCUPIED_COOLING_SET_POINT_PARAM: return StorageType.Double;
                case BuiltInParameter.BUILDING_CLOSING_TIME_PARAM: return StorageType.String;
                case BuiltInParameter.BUILDING_OPENING_TIME_PARAM: return StorageType.String;
                case BuiltInParameter.SPACE_PEOPLE_ACTIVITY_LEVEL_PARAM: return StorageType.None;
                case BuiltInParameter.SPACE_ELEC_EQUIPMENT_RADIANT_PERCENTAGE_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_POWER_SCHEDULE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.SPACE_LIGHTING_SCHEDULE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.SPACE_OCCUPANCY_SCHEDULE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.SPACE_INFILTRATION_PARAM: return StorageType.Double;
                case BuiltInParameter.SPACE_CARPETING_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_AIR_VOLUME_CALCULATION_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_COIL_BYPASS_PERCENTAGE_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_AREA_PER_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_AREA_PER_HEATING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_USE_AIR_CHANGES_PER_HOUR_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_USE_OUTSIDE_AIR_PER_AREA_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_USE_OUTSIDE_AIR_PER_PERSON_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_USE_DEHUMIDIFICATION_SETPOINT_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_USE_HUMIDIFICATION_SETPOINT_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_OUTDOOR_AIR_INFORMATION_PARAM: return StorageType.None;
                case BuiltInParameter.ZONE_COOLING_INFORMATION_PARAM: return StorageType.None;
                case BuiltInParameter.ZONE_HEATING_INFORMATION_PARAM: return StorageType.None;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SLIVER_SPACE_TOLERANCE: return StorageType.Double;
                case BuiltInParameter.ZONE_AREA_GROSS: return StorageType.Double;
                case BuiltInParameter.ZONE_VOLUME_GROSS: return StorageType.Double;
                case BuiltInParameter.SPACE_IS_PLENUM: return StorageType.Integer;
                case BuiltInParameter.SPACE_IS_OCCUPIABLE: return StorageType.Integer;
                case BuiltInParameter.SPACE_ASSOC_ROOM_NUMBER: return StorageType.String;
                case BuiltInParameter.SPACE_ASSOC_ROOM_NAME: return StorageType.String;
                case BuiltInParameter.ZONE_PHASE: return StorageType.ElementId;
                case BuiltInParameter.ZONE_PHASE_ID: return StorageType.ElementId;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_PROJECT_PHASE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ROOM_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_CALCULATED_COOLING_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_CALCULATED_HEATING_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_COOLING_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_HEATING_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_LEVEL_ID: return StorageType.ElementId;
                case BuiltInParameter.ZONE_OA_RATE_PER_ACH_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_OUTSIDE_AIR_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_OUTSIDE_AIR_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_DEHUMIDIFICATION_SET_POINT_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_HUMIDIFICATION_SET_POINT_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_COOLING_AIR_TEMPERATURE_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_HEATING_AIR_TEMPERATURE_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_COOLING_SET_POINT_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_HEATING_SET_POINT_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_SUPPLY_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_CALCULATED_HEATING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ZONE_SERVICE_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.ZONE_VOLUME: return StorageType.Double;
                case BuiltInParameter.ZONE_PERIMETER: return StorageType.Double;
                case BuiltInParameter.ZONE_AREA: return StorageType.Double;
                case BuiltInParameter.ZONE_NAME: return StorageType.String;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_VIEW_UPDATE_SURFACES: return StorageType.None;
                case BuiltInParameter.RBS_PROJECT_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_GROUND_PLANE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Z: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Y: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_X: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_AZIMUTH: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_TILT: return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_CADOBJECTID: return StorageType.String;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID2: return StorageType.String;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID1: return StorageType.String;
                case BuiltInParameter.ROOM_EDIT_ELECTRICAL_LOADS_PARAM: return StorageType.None;
                case BuiltInParameter.ROOM_EDIT_PEOPLE_LOADS_PARAM: return StorageType.None;
                case BuiltInParameter.RBS_PROJECT_LOCATION_PARAM: return StorageType.String;
                case BuiltInParameter.ROOM_ACTUAL_LIGHTING_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_ACTUAL_POWER_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_BASE_HEAT_LOAD_ON_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOM_LIGHTING_LOAD_UNITS_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOM_POWER_LOAD_UNITS_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOM_DESIGN_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_CALCULATED_COOLING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_HEATING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_CALCULATED_HEATING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_BASE_RETURN_AIRFLOW_ON_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOM_CONSTRUCTION_SET_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CONSTRUCTION_SET_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_SERVICE_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_GBXML_SURFACE_AREA: return StorageType.Double;
                case BuiltInParameter.RBS_GBXML_SURFACE_TYPE: return StorageType.Integer;
                case BuiltInParameter.RBS_GBXML_SURFACE_NAME: return StorageType.String;
                case BuiltInParameter.FAMILY_ELECTRICAL_MAINTAIN_ANNOTATION_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.RBS_FAMILY_CONTENT_ANNOTATION_DISPLAY: return StorageType.Integer;
                case BuiltInParameter.RBS_ELECTRICAL_DATA: return StorageType.String;
                case BuiltInParameter.RBS_CALCULATED_SIZE: return StorageType.String;
                case BuiltInParameter.ROOM_PEOPLE_SENSIBLE_HEAT_GAIN_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_IS_CUSTOM_FITTING: return StorageType.Integer;
                case BuiltInParameter.RBS_CONNECTOR_OFFSET_OBSOLETE: return StorageType.Double;
                case BuiltInParameter.RBS_LOOKUP_TABLE_NAME: return StorageType.String;
                case BuiltInParameter.ROOM_DESIGN_LIGHTING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_POWER_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_ACTUAL_LIGHTING_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_ACTUAL_POWER_LOAD_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_BASE_LIGHTING_LOAD_ON_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOM_BASE_POWER_LOAD_ON_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOM_DESIGN_OTHER_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_MECHANICAL_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_LIGHTING_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_POWER_LOAD_PER_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_BALLAST_LOSS: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_TOTAL_LIGHT_LOSS: return StorageType.Double;
                case BuiltInParameter.RBS_ROOM_COEFFICIENT_UTILIZATION: return StorageType.Double;
                case BuiltInParameter.RBS_FAMILY_CONTENT_TAKEOFF_FIXED_LENGTH: return StorageType.Double;
                case BuiltInParameter.RBS_FAMILY_CONTENT_TAKEOFF_PROJLENGTH: return StorageType.Double;
                case BuiltInParameter.RBS_FAMILY_CONTENT_TAKEOFF_LENGTH: return StorageType.Double;
                case BuiltInParameter.RBS_FAMILY_CONTENT_OFFSET_HEIGHT: return StorageType.Double;
                case BuiltInParameter.RBS_FAMILY_CONTENT_OFFSET_WIDTH: return StorageType.Double;
                case BuiltInParameter.FAMILY_CONTENT_PART_TYPE: return StorageType.Integer;
                case BuiltInParameter.GBXML_EDIT_DATA_PARAM: return StorageType.None;
                case BuiltInParameter.ROOM_ACTUAL_EXHAUST_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_ACTUAL_RETURN_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_ACTUAL_SUPPLY_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_PEOPLE_LATENT_HEAT_GAIN_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_PEOPLE_TOTAL_HEAT_GAIN_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_CALCULATED_SUPPLY_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_EXHAUST_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_RETURN_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_DESIGN_SUPPLY_AIRFLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_AREA_PER_PERSON_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_NUMBER_OF_PEOPLE_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOM_OCCUPANCY_UNIT_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOM_SPACE_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ROOM_CONDITION_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.PROJECT_POSTAL_CODE: return StorageType.String;
                case BuiltInParameter.PROJECT_BUILDING_TYPE: return StorageType.ElementId;
                case BuiltInParameter.RBS_SIZE_LOCK: return StorageType.Integer;
                case BuiltInParameter.RBS_ADDITIONAL_FLOW: return StorageType.Double;
                case BuiltInParameter.RBS_CURVETYPE_MAX_WIDTH_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_PIPE_FITTING_LOSS_METHOD_SETTINGS: return StorageType.None;
                case BuiltInParameter.RBS_DUCT_FITTING_LOSS_METHOD_SETTINGS: return StorageType.None;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_CAP_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_PIPE_FITTING_LOSS_METHOD_SERVER_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_DUCT_FITTING_LOSS_METHOD_SERVER_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_MECHJOINT_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_PIPE_SIZE_FORMATTED_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_DUCT_SIZE_FORMATTED_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_DUCT_STATIC_PRESSURE: return StorageType.Double;
                case BuiltInParameter.RBS_FLEX_PIPE_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_PIPE_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_FLEX_DUCT_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_DUCT_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_DUCT_FITTING_LOSS_TABLE_PARAM: return StorageType.None;
                case BuiltInParameter.RBS_DUCT_FITTING_LOSS_METHOD_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_FLEXDUCT_ROUNDTYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_PREFERRED_BRANCH_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_TAKEOFF_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_UNION_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_HYDRAULIC_DIAMETER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_REYNOLDSNUMBER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_EQ_DIAMETER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CURVETYPE_MULTISHAPE_TRANSITION_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_SECTION: return StorageType.Integer;
                case BuiltInParameter.RBS_LOSS_COEFFICIENT: return StorageType.Double;
                case BuiltInParameter.RBS_MAX_FLOW: return StorageType.Double;
                case BuiltInParameter.RBS_MIN_FLOW: return StorageType.Double;
                case BuiltInParameter.RBS_VELOCITY_PRESSURE: return StorageType.Double;
                case BuiltInParameter.RBS_CURVE_SURFACE_AREA: return StorageType.Double;
                case BuiltInParameter.RBS_CURVETYPE_MAX_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_LINING_THICKNESS: return StorageType.Double;
                case BuiltInParameter.RBS_INSULATION_THICKNESS: return StorageType.Double;
                case BuiltInParameter.RBS_FRICTION: return StorageType.Double;
                case BuiltInParameter.RBS_CURVETYPE_ROUGHNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_TRANSITION_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_CROSS_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_TEE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_CURVETYPE_DEFAULT_ELBOW_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_PRESSURE_DROP: return StorageType.Double;
                case BuiltInParameter.RBS_VELOCITY: return StorageType.Double;
                case BuiltInParameter.RBS_CURVE_VERT_OFFSET_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_CURVE_HOR_OFFSET_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_FLOW_OBSOLETE: return StorageType.Double;
                case BuiltInParameter.RBS_CURVE_DIAMETER_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CURVE_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_CURVE_WIDTH_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_FLEX_PATTERN_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_END_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_START_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_END_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.RBS_START_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_END_ALL_NON_ZERO: return StorageType.String;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_START_ALL_NON_ZERO: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_MEMBER_FORCES: return StorageType.None;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_END_MZ: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_END_MY: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_END_MX: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_END_FZ: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_END_FY: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_END_FX: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_START_MZ: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_START_MY: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_START_MX: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_START_FZ: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_START_FY: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_MEMBER_FORCE_START_FX: return StorageType.Double;
                case BuiltInParameter.DIVIDEDPATH_TOTAL_PATH_LENGTH: return StorageType.Double;
                case BuiltInParameter.DIVIDEDPATH_DISPLAY_NODE_NUMBERS: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_MERGED_POINT_NUM: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_DISPLAY_NODES: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_DISPLAY_REFERENCE_CURVES: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_LAYOUT_FIXED_NUM_POINT: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_FLIP_DIRECTION: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_MEASUREMENT_TYPE: return StorageType.Integer;
                case BuiltInParameter.DIVIDEDPATH_MAX_DISTANCE: return StorageType.Double;
                case BuiltInParameter.DIVIDEDPATH_MIN_DISTANCE: return StorageType.Double;
                case BuiltInParameter.DIVIDEDPATH_END_INDENT: return StorageType.Double;
                case BuiltInParameter.DIVIDEDPATH_BEGINNING_INDENT: return StorageType.Double;
                case BuiltInParameter.DIVIDEDPATH_DISTANCE: return StorageType.Double;
                case BuiltInParameter.DIVIDEDPATH_LAYOUT: return StorageType.Integer;
                case BuiltInParameter.IFC_ORGANIZATION: return StorageType.String;
                case BuiltInParameter.IFC_APPLICATION_VERSION: return StorageType.String;
                case BuiltInParameter.IFC_APPLICATION_NAME: return StorageType.String;
                case BuiltInParameter.PROJECT_ORGANIZATION_NAME: return StorageType.String;
                case BuiltInParameter.PROJECT_ORGANIZATION_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.PROJECT_BUILDING_NAME: return StorageType.String;
                case BuiltInParameter.PROJECT_AUTHOR: return StorageType.String;
                case BuiltInParameter.IFC_SITE_GUID: return StorageType.String;
                case BuiltInParameter.IFC_BUILDING_GUID: return StorageType.String;
                case BuiltInParameter.IFC_PROJECT_GUID: return StorageType.String;
                case BuiltInParameter.IFC_TYPE_GUID: return StorageType.String;
                case BuiltInParameter.IFC_GUID: return StorageType.String;
                case BuiltInParameter.STRUCT_CONNECTION_TYPE_NAME: return StorageType.String;
                case BuiltInParameter.STRUCT_CONNECTION_CUTBACK: return StorageType.Integer;
                case BuiltInParameter.STRUCT_CONNECTION_COLUMN_BASE: return StorageType.ElementId;
                case BuiltInParameter.STRUCT_CONNECTION_COLUMN_TOP: return StorageType.ElementId;
                case BuiltInParameter.STRUCT_CONNECTION_BEAM_END: return StorageType.ElementId;
                case BuiltInParameter.STRUCT_CONNECTION_BEAM_START: return StorageType.ElementId;
                case BuiltInParameter.STRUCT_CONNECTION_APPLY_TO: return StorageType.Integer;
                case BuiltInParameter.REBAR_CONTAINER_BAR_TYPE: return StorageType.ElementId;
                case BuiltInParameter.REINFORCEMENT_VOLUME: return StorageType.Double;
                case BuiltInParameter.REIN_EST_BAR_VOLUME: return StorageType.Double;
                case BuiltInParameter.REIN_EST_BAR_LENGTH: return StorageType.Double;
                case BuiltInParameter.REIN_EST_NUMBER_OF_BARS: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_SHAPE_2: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_SHAPE_1: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_SPANLENGTH_ALT_OFFSET: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_SPANLENGTH_BARLENGTH_ALT: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_SPANLENGTH_BARLENGTH_PRIM: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_SPANLENGTH_TOP_ALT: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_END_SPANHOOK_ALT: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_END_SPANHOOK_PRIM: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_SUMMARY: return StorageType.String;
                case BuiltInParameter.PATH_REIN_SPANLENGTH_BOTTOM_ALT: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_SPANLENGTH_BOTTOM_PRIM: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_SPANHOOK_ALT: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_SPANHOOK_PRIM: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_ADDL_OFFSET: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_ALT_OFFSET: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_END_HOOK_ORIENT_2_WALL: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_END_HOOK_ORIENT_1_WALL: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_END_HOOK_ORIENT_2_SLAB: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_END_HOOK_ORIENT_1_SLAB: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_END_HOOK_TYPE_2: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_END_HOOK_TYPE_1: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_HOOK_ORIENT_2_WALL: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_HOOK_ORIENT_1_WALL: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_HOOK_ORIENT_2_SLAB: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_HOOK_ORIENT_1_SLAB: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_HOOK_TYPE_2: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_HOOK_TYPE_1: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_LENGTH_2: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_LENGTH_1: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_TYPE_2: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_TYPE_1: return StorageType.ElementId;
                case BuiltInParameter.PATH_REIN_ALTERNATING: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_NUMBER_OF_BARS: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_SPACING: return StorageType.Double;
                case BuiltInParameter.PATH_REIN_FACE_WALL: return StorageType.Integer;
                case BuiltInParameter.PATH_REIN_FACE_SLAB: return StorageType.Integer;
                case BuiltInParameter.REBAR_BAR_DEFORMATION_TYPE: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_BOTTOM_DIR_2_GENERIC: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_BOTTOM_DIR_1_GENERIC: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_TOP_DIR_2_GENERIC: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_TOP_DIR_1_GENERIC: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2_GENERIC: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1_GENERIC: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2_GENERIC: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1_GENERIC: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_TOP_DIR_2_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_TOP_DIR_1_GENERIC: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_BACK_DIR_2: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_BACK_DIR_1: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_FRONT_DIR_2: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_FRONT_DIR_1: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_BACK_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_BACK_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_BACK_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_BACK_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_FRONT_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_FRONT_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_BOTTOM_DIR_2: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_BOTTOM_DIR_1: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_TOP_DIR_2: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_SPACING_TOP_DIR_1: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1: return StorageType.ElementId;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_TOP_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ACTIVE_TOP_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPANHOOK_TOP_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPANHOOK_BOTTOM_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPANHOOK_RIGHT_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPANHOOK_LEFT_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPANACTIVE_DIR_2: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_SPANACTIVE_DIR_1: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_ADDL_INTERIOR_OFFSET: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_ADDL_EXTERIOR_OFFSET: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_ADDL_BOTTOM_OFFSET: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_ADDL_TOP_OFFSET: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_TOP_MINOR_MATCHES_BOTTOM_MINOR: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_TOP_MAJOR_MATCHES_BOTTOM_MAJOR: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_BOTTOM_MAJOR_MATCHES_BOTTOM_MINOR: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_TOP_MAJOR_MATCHES_TOP_MINOR: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_NO_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_WITH_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_NO_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_WITH_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_NO_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_WITH_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_NO_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_WITH_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_NO_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_WITH_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_NO_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_WITH_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_COVER_BOTTOM: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_COVER_TOP: return StorageType.Double;
                case BuiltInParameter.REBAR_SYSTEM_OVERRIDE: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_NO_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYER_SUMMARY_WITH_SPACING: return StorageType.String;
                case BuiltInParameter.REBAR_SYSTEM_LAYOUT_RULE: return StorageType.Integer;
                case BuiltInParameter.REBAR_SYSTEM_COVER_SIDE: return StorageType.Double;
                case BuiltInParameter.FABRIC_WIRE_OFFSET: return StorageType.Double;
                case BuiltInParameter.FABRIC_WIRE_DISTANCE: return StorageType.Double;
                case BuiltInParameter.FABRIC_WIRE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_WIRE_TYPE: return StorageType.ElementId;
                case BuiltInParameter.BENT_FABRIC_PARAM_LONGITUDINAL_CUT_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SHARED_FAMILY_KEY: return StorageType.String;
                case BuiltInParameter.FABRIC_PARAM_CUT_BY_HOST: return StorageType.Integer;
                case BuiltInParameter.BENT_FABRIC_PARAM_STRAIGHT_WIRES_LOCATION: return StorageType.Integer;
                case BuiltInParameter.CONSTRAINT_FIXED_OFFSET: return StorageType.Double;
                case BuiltInParameter.BENT_FABRIC_PARAM_BEND_DIRECTION: return StorageType.Integer;
                case BuiltInParameter.FABRIC_PARAM_SPAN_TAG_COMPONENT_REFERENCE: return StorageType.Integer;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_D_RIGHT: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_D_LEFT: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_D_BOTTOM: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_D_TOP: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_RIGHT: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_LEFT: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_BOTTOM: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_SPAN_SYM_TOP: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_TAG_VIEW: return StorageType.ElementId;
                case BuiltInParameter.FABRIC_PARAM_CUT_SHEET_MASS: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_TOTAL_SHEET_MASS: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_CUT_OVERALL_WIDTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_CUT_OVERALL_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_COVER_OFFSET: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_MINOR_LAPSPLICE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_MAJOR_LAPSPLICE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_PARAM_LOCATION_GENERIC: return StorageType.Integer;
                case BuiltInParameter.FABRIC_PARAM_LAPSPLICE_POSITION: return StorageType.Integer;
                case BuiltInParameter.FABRIC_PARAM_LOCATION_WALL: return StorageType.Integer;
                case BuiltInParameter.FABRIC_PARAM_LOCATION_SLAB: return StorageType.Integer;
                case BuiltInParameter.FABRIC_PARAM_SHEET_TYPE: return StorageType.ElementId;
                case BuiltInParameter.FABRIC_BEND_DIAMETER: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MASSUNIT: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MINOR_REINFORCEMENT_AREA: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MAJOR_REINFORCEMENT_AREA: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MASS: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MINOR_SPACING: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MINOR_NUMBER_OF_WIRES: return StorageType.Integer;
                case BuiltInParameter.FABRIC_SHEET_MINOR_LAYOUT_PATTERN: return StorageType.Integer;
                case BuiltInParameter.FABRIC_SHEET_MINOR_END_OVERHANG: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MINOR_START_OVERHANG: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_WIDTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_OVERALL_WIDTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MAJOR_SPACING: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MAJOR_NUMBER_OF_WIRES: return StorageType.Integer;
                case BuiltInParameter.FABRIC_SHEET_MAJOR_LAYOUT_PATTERN: return StorageType.Integer;
                case BuiltInParameter.FABRIC_SHEET_MAJOR_END_OVERHANG: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MAJOR_START_OVERHANG: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_OVERALL_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_DEFAULT_MINOR_LAPSPLICE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_DEFAULT_MAJOR_LAPSPLICE_LENGTH: return StorageType.Double;
                case BuiltInParameter.FABRIC_SHEET_MINOR_DIRECTION_WIRE_TYPE: return StorageType.ElementId;
                case BuiltInParameter.FABRIC_SHEET_MAJOR_DIRECTION_WIRE_TYPE: return StorageType.ElementId;
                case BuiltInParameter.FABRIC_SHEET_PHYSICAL_MATERIAL_ASSET: return StorageType.String;
                case BuiltInParameter.FABRIC_WIRE_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_QUANITY_BY_DISTRIB: return StorageType.Integer;
                case BuiltInParameter.REBAR_MIN_LENGTH: return StorageType.Double;
                case BuiltInParameter.REBAR_MAX_LENGTH: return StorageType.Double;
                case BuiltInParameter.REBAR_MAXIM_SUFFIX: return StorageType.String;
                case BuiltInParameter.REBAR_MINIM_SUFFIX: return StorageType.String;
                case BuiltInParameter.REBAR_NUMBER_SUFFIX: return StorageType.String;
                case BuiltInParameter.REBAR_DISTRIBUTION_TYPE: return StorageType.Integer;
                case BuiltInParameter.DPART_CAN_HOST_REBAR: return StorageType.Integer;
                case BuiltInParameter.REBAR_HOST_CATEGORY: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_PARAM_END_HOOK_TAN_LEN: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_PARAM_START_HOOK_TAN_LEN: return StorageType.Double;
                case BuiltInParameter.REBAR_INTERNAL_MULTIPLANAR_END_CONNECTOR: return StorageType.Integer;
                case BuiltInParameter.REBAR_INTERNAL_MULTIPLANAR_START_CONNECTOR: return StorageType.Integer;
                case BuiltInParameter.REBAR_INTERNAL_MULTIPLANAR_DUPLICATE: return StorageType.Integer;
                case BuiltInParameter.REBAR_INTERNAL_MULTIPLANAR: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_OUT_OF_PLANE_BEND_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_INSTANCE_STIRRUP_TIE_ATTACHMENT: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_STIRRUP_TIE_ATTACHMENT: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_SPIRAL_BASE_FINISHING_TURNS: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_SPIRAL_TOP_FINISHING_TURNS: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_SPIRAL_HEIGHT: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_SPIRAL_PITCH: return StorageType.Double;
                case BuiltInParameter.REBAR_STANDARD_HOOK_BEND_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_INCLUDE_LAST_BAR: return StorageType.Integer;
                case BuiltInParameter.REBAR_INCLUDE_FIRST_BAR: return StorageType.Integer;
                case BuiltInParameter.REBAR_INSTANCE_BEND_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_INSTANCE_BAR_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_END_HOOK_OFFSET: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_END_HOOK_LENGTH: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_START_HOOK_OFFSET: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_START_HOOK_LENGTH: return StorageType.Double;
                case BuiltInParameter.REBAR_ELEM_SCHEDULE_MARK: return StorageType.String;
                case BuiltInParameter.FABRIC_PARAM_ROUNDING: return StorageType.None;
                case BuiltInParameter.REBAR_ELEMENT_ROUNDING: return StorageType.None;
                case BuiltInParameter.REBAR_ELEM_HOOK_STYLE: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_HOOK_END_TYPE: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_HOOK_START_TYPE: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_HOOK_STYLE: return StorageType.Integer;
                case BuiltInParameter.REBAR_SHAPE_ALLOWED_BAR_TYPES: return StorageType.None;
                case BuiltInParameter.REBAR_BAR_MAXIMUM_BEND_RADIUS: return StorageType.Double;
                case BuiltInParameter.REBAR_BAR_STIRRUP_BEND_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_BAR_HOOK_LENGTHS: return StorageType.None;
                case BuiltInParameter.REBAR_HOOK_STYLE: return StorageType.Integer;
                case BuiltInParameter.REBAR_ELEM_LENGTH: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE: return StorageType.ElementId;
                case BuiltInParameter.REBAR_ELEMENT_VISIBILITY: return StorageType.None;
                case BuiltInParameter.REBAR_ELEM_BAR_SPACING: return StorageType.Double;
                case BuiltInParameter.REBAR_ELEM_QUANTITY_OF_BARS: return StorageType.Integer;
                case BuiltInParameter.REBAR_ELEM_LAYOUT_RULE: return StorageType.Integer;
                case BuiltInParameter.REBAR_STANDARD_BEND_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_ELEM_HOOK_END_ORIENT: return StorageType.Integer;
                case BuiltInParameter.REBAR_ELEM_HOOK_END_TYPE: return StorageType.ElementId;
                case BuiltInParameter.REBAR_ELEM_HOOK_START_ORIENT: return StorageType.Integer;
                case BuiltInParameter.REBAR_ELEM_HOOK_START_TYPE: return StorageType.ElementId;
                case BuiltInParameter.REBAR_ELEM_TOTAL_LENGTH: return StorageType.Double;
                case BuiltInParameter.REBAR_HOOK_LINE_LEN_FACTOR: return StorageType.Double;
                case BuiltInParameter.REBAR_HOOK_ANGLE: return StorageType.Double;
                case BuiltInParameter.REBAR_BAR_STYLE: return StorageType.ElementId;
                case BuiltInParameter.REBAR_BAR_DIAMETER: return StorageType.Double;
                case BuiltInParameter.WALL_ALIGN_KEY_REF_PARAM: return StorageType.Integer;
                case BuiltInParameter.CWP_COPY_ROOF_INSERTS: return StorageType.Integer;
                case BuiltInParameter.CWP_COPY_FLOOR_INSERTS: return StorageType.Integer;
                case BuiltInParameter.CWP_COPY_WALL_INSERTS: return StorageType.Integer;
                case BuiltInParameter.CWP_LINKED_ROOM_PARAMS: return StorageType.None;
                case BuiltInParameter.CWP_LINKED_ROOM_PHASES: return StorageType.None;
                case BuiltInParameter.CWP_REUSE_GRIDS_SAME_NAME: return StorageType.Integer;
                case BuiltInParameter.CWP_REUSE_LEVELS_SAME_NAME: return StorageType.Integer;
                case BuiltInParameter.CWP_SPLIT_COLUMNS_AT_LEVELS: return StorageType.Integer;
                case BuiltInParameter.CWP_REUSE_EXISTING_GRIDS: return StorageType.Integer;
                case BuiltInParameter.CWP_REUSE_EXISTING_LEVELS: return StorageType.Integer;
                case BuiltInParameter.CWP_LEVEL_OFFSET: return StorageType.Double;
                case BuiltInParameter.CWP_ADD_LEVEL_SUFFIX: return StorageType.String;
                case BuiltInParameter.CWP_ADD_LEVEL_PREFIX: return StorageType.String;
                case BuiltInParameter.CWP_ADD_GRID_SUFFIX: return StorageType.String;
                case BuiltInParameter.CWP_ADD_GRID_PREFIX: return StorageType.String;
                case BuiltInParameter.LOAD_USAGE_NAME: return StorageType.String;
                case BuiltInParameter.LOAD_COMBINATION_FACTOR: return StorageType.Double;
                case BuiltInParameter.LOAD_COMBINATION_NAME: return StorageType.String;
                case BuiltInParameter.LOAD_NATURE_NAME: return StorageType.String;
                case BuiltInParameter.LOAD_CASE_SUBCATEGORY: return StorageType.ElementId;
                case BuiltInParameter.LOAD_CASE_NATURE: return StorageType.ElementId;
                case BuiltInParameter.LOAD_CASE_NUMBER: return StorageType.Integer;
                case BuiltInParameter.LOAD_CASE_NAME: return StorageType.String;
                case BuiltInParameter.LOAD_ATTR_AREA_FORCE_SCALE_FACTOR: return StorageType.Double;
                case BuiltInParameter.LOAD_ATTR_LINEAR_FORCE_SCALE_FACTOR: return StorageType.Double;
                case BuiltInParameter.LOAD_ARROW_SEPARATION: return StorageType.Double;
                case BuiltInParameter.LOAD_ATTR_MOMENT_SCALE_FACTOR: return StorageType.Double;
                case BuiltInParameter.LOAD_ATTR_MOMENT_ARROW_LINE: return StorageType.ElementId;
                case BuiltInParameter.LOAD_ATTR_MOMENT_ARROW_ARC: return StorageType.ElementId;
                case BuiltInParameter.LOAD_ATTR_FORCE_SCALE_FACTOR: return StorageType.Double;
                case BuiltInParameter.LOAD_ATTR_FORCE_ARROW_TYPE: return StorageType.ElementId;
                case BuiltInParameter.LOAD_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.LOAD_COMMENTS: return StorageType.String;
                case BuiltInParameter.LOAD_CASE_NATURE_TEXT: return StorageType.ElementId;
                case BuiltInParameter.LOAD_ALL_NON_0_LOADS: return StorageType.String;
                case BuiltInParameter.LOAD_AREA_IS_PROJECTED: return StorageType.Integer;
                case BuiltInParameter.LOAD_AREA_AREA: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FZ3: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FY3: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FX3: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FZ2: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FY2: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FX2: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FZ1: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FY1: return StorageType.Double;
                case BuiltInParameter.LOAD_AREA_FORCE_FX1: return StorageType.Double;
                case BuiltInParameter.LOAD_LINEAR_LENGTH: return StorageType.Double;
                case BuiltInParameter.LOAD_IS_PROJECTED: return StorageType.Integer;
                case BuiltInParameter.LOAD_MOMENT_MZ2: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MY2: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MX2: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MZ1: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MY1: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MX1: return StorageType.Double;
                case BuiltInParameter.LOAD_LINEAR_FORCE_FZ2: return StorageType.Double;
                case BuiltInParameter.LOAD_LINEAR_FORCE_FY2: return StorageType.Double;
                case BuiltInParameter.LOAD_LINEAR_FORCE_FX2: return StorageType.Double;
                case BuiltInParameter.LOAD_LINEAR_FORCE_FZ1: return StorageType.Double;
                case BuiltInParameter.LOAD_LINEAR_FORCE_FY1: return StorageType.Double;
                case BuiltInParameter.LOAD_LINEAR_FORCE_FX1: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MZ: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MY: return StorageType.Double;
                case BuiltInParameter.LOAD_MOMENT_MX: return StorageType.Double;
                case BuiltInParameter.LOAD_FORCE_FZ: return StorageType.Double;
                case BuiltInParameter.LOAD_FORCE_FY: return StorageType.Double;
                case BuiltInParameter.LOAD_FORCE_FX: return StorageType.Double;
                case BuiltInParameter.LOAD_IS_HOSTED: return StorageType.Integer;
                case BuiltInParameter.LOAD_IS_REACTION: return StorageType.Integer;
                case BuiltInParameter.LOAD_IS_CREATED_BY_API: return StorageType.Integer;
                case BuiltInParameter.LOAD_IS_UNIFORM: return StorageType.Integer;
                case BuiltInParameter.LOAD_USE_LOCAL_COORDINATE_SYSTEM: return StorageType.Integer;
                case BuiltInParameter.LOAD_CASE_ID: return StorageType.ElementId;
                case BuiltInParameter.SPAN_DIR_SYM_PARAM_RIGHT: return StorageType.Double;
                case BuiltInParameter.SPAN_DIR_SYM_PARAM_LEFT: return StorageType.Double;
                case BuiltInParameter.SPAN_DIR_SYM_PARAM_BOTTOM: return StorageType.Double;
                case BuiltInParameter.SPAN_DIR_SYM_PARAM_TOP: return StorageType.Double;
                case BuiltInParameter.SPAN_DIR_INST_PARAM_ANGLE: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_GEOMETRY_IS_VALID: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ASSET_PARAM: return StorageType.String;
                case BuiltInParameter.ANALYTICAL_MODEL_CODE_CHECKING: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_NODES_MARK: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_FOUNDATIONS_MARK: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_SURFACE_ELEMENTS_MARK: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_STICK_ELEMENTS_MARK: return StorageType.Integer;
                case BuiltInParameter.FAMILY_ENABLE_CUTTING_IN_VIEWS: return StorageType.Integer;
                case BuiltInParameter.FAMILY_CAN_HOST_REBAR: return StorageType.Integer;
                case BuiltInParameter.CLEAR_COVER: return StorageType.ElementId;
                case BuiltInParameter.CLEAR_COVER_BOTTOM: return StorageType.ElementId;
                case BuiltInParameter.CLEAR_COVER_TOP: return StorageType.ElementId;
                case BuiltInParameter.CLEAR_COVER_OTHER: return StorageType.ElementId;
                case BuiltInParameter.CLEAR_COVER_INTERIOR: return StorageType.ElementId;
                case BuiltInParameter.CLEAR_COVER_EXTERIOR: return StorageType.ElementId;
                case BuiltInParameter.COVER_TYPE_LENGTH: return StorageType.Double;
                case BuiltInParameter.COVER_TYPE_NAME: return StorageType.String;
                case BuiltInParameter.JOIST_SYSTEM_CLEAR_SPACING_PARAM: return StorageType.Double;
                case BuiltInParameter.JOIST_SYSTEM_FIXED_SPACING_PARAM: return StorageType.Double;
                case BuiltInParameter.JOIST_SYSTEM_MAXIMUM_SPACING_PARAM: return StorageType.Double;
                case BuiltInParameter.CURVE_EDGE_OFFSET: return StorageType.Double;
                case BuiltInParameter.BEAM_SYSTEM_3D_PARAM: return StorageType.Integer;
                case BuiltInParameter.JOIST_SYSTEM_NEW_BEAM_TYPE_NO_FAM_NAME_PARAM: return StorageType.ElementId;
                case BuiltInParameter.BEAM_SYSTEM_TAG_INST_PARAM_ANGLE: return StorageType.Double;
                case BuiltInParameter.BEAM_SYSTEM_TAG_PARAM_RIGHT: return StorageType.Double;
                case BuiltInParameter.BEAM_SYSTEM_TAG_PARAM_LEFT: return StorageType.Double;
                case BuiltInParameter.JOIST_SYSTEM_NUM_BEAMS_SAME_TYPE: return StorageType.Integer;
                case BuiltInParameter.BEAM_H_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.BEAM_V_JUSTIFICATION: return StorageType.Integer;
                case BuiltInParameter.CURVE_SUPPORT_OFFSET: return StorageType.Double;
                case BuiltInParameter.JOIST_SYSTEM_NEW_BEAM_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.JOIST_SYSTEM_LAYOUT_RULE_PARAM: return StorageType.Integer;
                case BuiltInParameter.JOIST_SYSTEM_JUSTIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.JOIST_SYSTEM_SPACING_PARAM: return StorageType.Double;
                case BuiltInParameter.JOIST_SYSTEM_NUMBER_OF_LINES_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_DUCT_FLOW_PARAM: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_BELT_RATIO_V: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_BELT_RATIO_U: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_USE_CURVE_DIST_V: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_USE_CURVE_DIST_U: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_ADJUST_BORDER_V: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_ADJUST_BORDER_U: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_BELT_V: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_BELT_U: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ORIGIN_V: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ORIGIN_U: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ANGLE_V: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ANGLE_U: return StorageType.Double;
                case BuiltInParameter.SPACING_NUM_DIVISIONS_V: return StorageType.Integer;
                case BuiltInParameter.SPACING_NUM_DIVISIONS_U: return StorageType.Integer;
                case BuiltInParameter.SPACING_JUSTIFICATION_V: return StorageType.Integer;
                case BuiltInParameter.SPACING_JUSTIFICATION_U: return StorageType.Integer;
                case BuiltInParameter.SPACING_LENGTH_V: return StorageType.Double;
                case BuiltInParameter.SPACING_LENGTH_U: return StorageType.Double;
                case BuiltInParameter.SPACING_LAYOUT_V: return StorageType.Integer;
                case BuiltInParameter.SPACING_LAYOUT_U: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_BELT_RATIO_2: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_BELT_RATIO_1: return StorageType.Double;
                case BuiltInParameter.CURTAIN_VERSION_PARAM: return StorageType.String;
                case BuiltInParameter.PADDING_LENGTH: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_USE_CURVE_DIST: return StorageType.Integer;
                case BuiltInParameter.SPACING_JUSTIFICATION: return StorageType.None;
                case BuiltInParameter.SPACING_NUM_DIVISIONS: return StorageType.Integer;
                case BuiltInParameter.SPACING_LENGTH: return StorageType.Double;
                case BuiltInParameter.SPACING_LAYOUT: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_USE_CURVE_DIST_2: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_USE_CURVE_DIST_1: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_ADJUST_BORDER_2: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_ADJUST_BORDER_1: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_BELT_2: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_BELT_1: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ORIGIN_2: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ORIGIN_1: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ANGLE_2: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ANGLE_1: return StorageType.Double;
                case BuiltInParameter.SPACING_NUM_DIVISIONS_2: return StorageType.Integer;
                case BuiltInParameter.SPACING_NUM_DIVISIONS_1: return StorageType.Integer;
                case BuiltInParameter.SPACING_JUSTIFICATION_2: return StorageType.Integer;
                case BuiltInParameter.SPACING_JUSTIFICATION_1: return StorageType.Integer;
                case BuiltInParameter.SPACING_LENGTH_2: return StorageType.Double;
                case BuiltInParameter.SPACING_LENGTH_1: return StorageType.Double;
                case BuiltInParameter.SPACING_LAYOUT_2: return StorageType.Integer;
                case BuiltInParameter.SPACING_LAYOUT_1: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_USE_CURVE_DIST_HORIZ: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_USE_CURVE_DIST_VERT: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_ADJUST_BORDER_HORIZ: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_ADJUST_BORDER_VERT: return StorageType.Integer;
                case BuiltInParameter.CURTAINGRID_BELT_HORIZ: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_BELT_VERT: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ORIGIN_HORIZ: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ORIGIN_VERT: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ANGLE_HORIZ: return StorageType.Double;
                case BuiltInParameter.CURTAINGRID_ANGLE_VERT: return StorageType.Double;
                case BuiltInParameter.GRIDLINE_SPEC_STATUS: return StorageType.Integer;
                case BuiltInParameter.SPACING_NUM_DIVISIONS_HORIZ: return StorageType.Integer;
                case BuiltInParameter.SPACING_NUM_DIVISIONS_VERT: return StorageType.Integer;
                case BuiltInParameter.SPACING_JUSTIFICATION_HORIZ: return StorageType.Integer;
                case BuiltInParameter.SPACING_JUSTIFICATION_VERT: return StorageType.Integer;
                case BuiltInParameter.SPACING_LENGTH_HORIZ: return StorageType.Double;
                case BuiltInParameter.SPACING_LENGTH_VERT: return StorageType.Double;
                case BuiltInParameter.SPACING_LAYOUT_HORIZ: return StorageType.Integer;
                case BuiltInParameter.SPACING_LAYOUT_VERT: return StorageType.Integer;
                case BuiltInParameter.DESIGN_OPTION_ID: return StorageType.ElementId;
                case BuiltInParameter.DESIGN_OPTION_PARAM: return StorageType.String;
                case BuiltInParameter.PLAN_REGION_VIEW_RANGE: return StorageType.None;
                case BuiltInParameter.GUIDE_GRID_NAME_PARAM: return StorageType.String;
                case BuiltInParameter.GUIDE_GRID_SPACING_PARAM: return StorageType.Double;
                case BuiltInParameter.SKETCH_GRID_SPACING_PARAM: return StorageType.Double;
                case BuiltInParameter.JOIN_STRENGTH_ORDER: return StorageType.Double;
                case BuiltInParameter.FAMILY_HOSTING_BEHAVIOR: return StorageType.Integer;
                case BuiltInParameter.FAMILY_IS_ELEVATION_MARK_BODY: return StorageType.Integer;
                case BuiltInParameter.FAMILY_USE_PRECUT_SHAPE: return StorageType.Integer;
                case BuiltInParameter.WALL_SWEEP_DEFAULT_SETBACK_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_SWEEP_CUTS_WALL_PARAM: return StorageType.Integer;
                case BuiltInParameter.WALL_SWEEP_CUT_BY_INSERTS_PARAM: return StorageType.Integer;
                case BuiltInParameter.SLAB_EDGE_PROFILE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.GUTTER_PROFILE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.REVEAL_PROFILE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_SHARED: return StorageType.Integer;
                case BuiltInParameter.FAMILY_WORK_PLANE_BASED: return StorageType.Integer;
                case BuiltInParameter.FAMILY_AUTOJOIN: return StorageType.Integer;
                case BuiltInParameter.FAMILY_IS_PARAMETRIC: return StorageType.Integer;
                case BuiltInParameter.FAMILY_KEEP_TEXT_READABLE: return StorageType.Integer;
                case BuiltInParameter.WALL_BOTTOM_EXTENSION_DIST_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_TOP_EXTENSION_DIST_PARAM: return StorageType.Double;
                case BuiltInParameter.SWEEP_BASE_VERT_OFFSET: return StorageType.Double;
                case BuiltInParameter.SWEEP_BASE_OFFSET: return StorageType.Double;
                case BuiltInParameter.SLAB_EDGE_MATERIAL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.GUTTER_MATERIAL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FASCIA_MATERIAL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.SWEEP_BASE_FLOOR_SUBCATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.SWEEP_BASE_ROOF_SUBCATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.FASCIA_PROFILE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.DECAL_SUBCATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.DECAL_HEIGHT: return StorageType.Double;
                case BuiltInParameter.DECAL_WIDTH: return StorageType.Double;
                case BuiltInParameter.DECAL_LOCK_PROPORTIONS: return StorageType.Integer;
                case BuiltInParameter.DECAL_ATTRIBUTES: return StorageType.None;
                case BuiltInParameter.FAMILY_ALLOW_CUT_WITH_VOIDS: return StorageType.Integer;
                case BuiltInParameter.FAMILY_KEY_EXT_PARAM: return StorageType.ElementId;
                case BuiltInParameter.WALL_SWEEP_WALL_SUBCATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_ALWAYS_VERTICAL: return StorageType.Integer;
                case BuiltInParameter.FAMILY_ROTATE_WITH_COMPONENT: return StorageType.Integer;
                case BuiltInParameter.HOST_VOLUME_COMPUTED: return StorageType.Double;
                case BuiltInParameter.HOST_AREA_COMPUTED: return StorageType.Double;
                case BuiltInParameter.WALL_SWEEP_WALL_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_SWEEP_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_SWEEP_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.WALL_SWEEP_PROFILE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.AREA_SCHEME_NAME: return StorageType.String;
                case BuiltInParameter.AREA_SCHEME_ID: return StorageType.ElementId;
                case BuiltInParameter.AREA_TYPE_TEXT: return StorageType.String;
                case BuiltInParameter.AREA_TYPE: return StorageType.ElementId;
                case BuiltInParameter.CONTOUR_LABELS_RELATIVE_BASE: return StorageType.ElementId;
                case BuiltInParameter.CONTOUR_LABELS_ELEV_BASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.PROPERTY_SEGMENT_SUBCATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.PROPERTY_SEGMENT_L_R: return StorageType.String;
                case BuiltInParameter.PROPERTY_SEGMENT_RADIUS: return StorageType.Double;
                case BuiltInParameter.PROPERTY_SEGMENT_E_W: return StorageType.String;
                case BuiltInParameter.PROPERTY_SEGMENT_BEARING: return StorageType.Double;
                case BuiltInParameter.PROPERTY_SEGMENT_N_S: return StorageType.String;
                case BuiltInParameter.PROPERTY_SEGMENT_DISTANCE: return StorageType.Double;
                case BuiltInParameter.PROPERTY_LENGTH_UNITS: return StorageType.None;
                case BuiltInParameter.PROPERTY_AREA_UNITS: return StorageType.None;
                case BuiltInParameter.VOLUME_NET: return StorageType.Double;
                case BuiltInParameter.PROJECTED_SURFACE_AREA: return StorageType.Double;
                case BuiltInParameter.CONTOUR_LABELS_LINEAR_UNITS: return StorageType.None;
                case BuiltInParameter.CONTOUR_LABELS_PRIMARY_ONLY: return StorageType.Integer;
                case BuiltInParameter.PROPERTY_SUBCATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.PROPERTY_AREA_OPEN: return StorageType.String;
                case BuiltInParameter.VOLUME_FILL: return StorageType.Double;
                case BuiltInParameter.VOLUME_CUT: return StorageType.Double;
                case BuiltInParameter.SURFACE_PERIMETER: return StorageType.Double;
                case BuiltInParameter.SURFACE_AREA: return StorageType.Double;
                case BuiltInParameter.PROPERTY_AREA: return StorageType.Double;
                case BuiltInParameter.BUILDINGPAD_HEIGHTABOVELEVEL_PARAM: return StorageType.Double;
                case BuiltInParameter.BUILDINGPAD_THICKNESS: return StorageType.Double;
                case BuiltInParameter.TOPOGRAPHY_LINK_PATH: return StorageType.String;
                case BuiltInParameter.TOPOGRAPHY_LINK_NAME: return StorageType.String;
                case BuiltInParameter.BOUNDARY_RADIUS: return StorageType.Double;
                case BuiltInParameter.CONTOUR_SUBCATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.BOUNDARY_BEARING: return StorageType.Double;
                case BuiltInParameter.BOUNDARY_DISTANCE: return StorageType.Double;
                case BuiltInParameter.CONTOUR_ELEVATION_STEP: return StorageType.Double;
                case BuiltInParameter.CONTOUR_ELEVATION: return StorageType.Double;
                case BuiltInParameter.POINT_ELEVATION: return StorageType.Double;
                case BuiltInParameter.VOLUME_OF_INTEREST_NAME: return StorageType.String;
                case BuiltInParameter.VOLUME_OF_INTEREST_VIEWS_VISIBLE: return StorageType.None;
                case BuiltInParameter.VIEWER_VOLUME_OF_INTEREST_CROP: return StorageType.ElementId;
                case BuiltInParameter.DATUM_VOLUME_OF_INTEREST: return StorageType.ElementId;
                case BuiltInParameter.ORIENT_BY_VIEW: return StorageType.Integer;
                case BuiltInParameter.ROOM_PHASE: return StorageType.ElementId;
                case BuiltInParameter.ROOM_PHASE_ID: return StorageType.ElementId;
                case BuiltInParameter.PHASE_SEQUENCE_NUMBER: return StorageType.Integer;
                case BuiltInParameter.PHASE_NAME: return StorageType.String;
                case BuiltInParameter.VIEW_FAMILY: return StorageType.String;
                case BuiltInParameter.VIEW_TYPE: return StorageType.String;
                case BuiltInParameter.VIEW_PHASE_FILTER: return StorageType.ElementId;
                case BuiltInParameter.VIEW_PHASE: return StorageType.ElementId;
                case BuiltInParameter.PHASE_DEMOLISHED: return StorageType.ElementId;
                case BuiltInParameter.PHASE_CREATED: return StorageType.ElementId;
                case BuiltInParameter.MASS_DATA_SLAB: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_HVAC_SYSTEM: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_OUTDOOR_AIR_INFORMATION_PARAM: return StorageType.None;
                case BuiltInParameter.ENERGY_ANALYSIS_MASSZONE_USEENERGYDATASETTINGS: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_MASSZONE_DIVIDEPERIMETER: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_MASSZONE_COREOFFSET: return StorageType.Double;
                case BuiltInParameter.ENERGY_ANALYSIS_SHADE_DEPTH: return StorageType.Double;
                case BuiltInParameter.ENERGY_ANALYSIS_CONCEPTUAL_CONSTRUCTION: return StorageType.None;
                case BuiltInParameter.ENERGY_ANALYSIS_SKYLIGHT_WIDTH: return StorageType.Double;
                case BuiltInParameter.ENERGY_ANALYSIS_PERCENTAGE_SKYLIGHTS: return StorageType.Double;
                case BuiltInParameter.ENERGY_ANALYSIS_GLAZING_IS_SHADED: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_SILL_HEIGHT: return StorageType.Double;
                case BuiltInParameter.ENERGY_ANALYSIS_PERCENTAGE_GLAZING: return StorageType.Double;
                case BuiltInParameter.ENERGY_ANALYSIS_MASS_ZONING: return StorageType.None;
                case BuiltInParameter.ENERGY_ANALYSIS_BUILDING_OPERATING_SCHEDULE: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_CREATE_ANALYTICAL_MODEL: return StorageType.Integer;
                case BuiltInParameter.MASS_DATA_SURFACE_DATA_SOURCE: return StorageType.Integer;
                case BuiltInParameter.MASS_DATA_SKYLIGHT_WIDTH: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_PERCENTAGE_SKYLIGHTS: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_SILL_HEIGHT: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_SHADE_DEPTH: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_GLAZING_IS_SHADED: return StorageType.Integer;
                case BuiltInParameter.MASS_DATA_PERCENTAGE_GLAZING: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_UNDERGROUND: return StorageType.Integer;
                case BuiltInParameter.MASS_DATA_MASS_OPENING_AREA: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_MASS_SKYLIGHT_AREA: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_MASS_WINDOW_AREA: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_MASS_ROOF_AREA: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_MASS_INTERIOR_WALL_AREA: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_MASS_EXTERIOR_WALL_AREA: return StorageType.Double;
                case BuiltInParameter.MASS_DATA_SUBCATEGORY: return StorageType.ElementId;
                case BuiltInParameter.MASS_DATA_CONCEPTUAL_CONSTRUCTION: return StorageType.ElementId;
                case BuiltInParameter.MASS_ZONE_CONDITION_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.MASS_ZONE_SPACE_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.MASS_ZONE_FLOOR_AREA: return StorageType.Double;
                case BuiltInParameter.CONCEPTUAL_CONSTRUCTION_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.MASS_SURFACEDATA_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.MASS_ZONE_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.MASS_ZONE_VOLUME: return StorageType.Double;
                case BuiltInParameter.LEVEL_DATA_MASS_TYPE_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_MASS_INSTANCE_COMMENTS: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_MASS_TYPE_COMMENTS: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_MASS_FAMILY_AND_TYPE_PARAM: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_MASS_FAMILY_PARAM: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_SPACE_USAGE: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_OWNING_LEVEL: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_MASS_TYPE_PARAM: return StorageType.String;
                case BuiltInParameter.LEVEL_DATA_VOLUME: return StorageType.Double;
                case BuiltInParameter.LEVEL_DATA_SURFACE_AREA: return StorageType.Double;
                case BuiltInParameter.LEVEL_DATA_FLOOR_AREA: return StorageType.Double;
                case BuiltInParameter.LEVEL_DATA_FLOOR_PERIMETER: return StorageType.Double;
                case BuiltInParameter.MASS_GROSS_VOLUME: return StorageType.Double;
                case BuiltInParameter.MASS_GROSS_SURFACE_AREA: return StorageType.Double;
                case BuiltInParameter.MASS_FLOOR_AREA_LEVELS: return StorageType.None;
                case BuiltInParameter.MASS_GROSS_AREA: return StorageType.Double;
                case BuiltInParameter.MASSING_INTEGRATION_LEVEL: return StorageType.Integer;
                case BuiltInParameter.PROJECT_REVISION_REVISION_ISSUED: return StorageType.Integer;
                case BuiltInParameter.PROJECT_REVISION_ENUMERATION: return StorageType.Integer;
                case BuiltInParameter.PROJECT_REVISION_REVISION_ISSUED_BY: return StorageType.String;
                case BuiltInParameter.PROJECT_REVISION_REVISION_ISSUED_TO: return StorageType.String;
                case BuiltInParameter.PROJECT_REVISION_REVISION_DATE: return StorageType.String;
                case BuiltInParameter.PROJECT_REVISION_REVISION_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.PROJECT_REVISION_REVISION_NUM: return StorageType.String;
                case BuiltInParameter.PROJECT_REVISION_SEQUENCE_NUM: return StorageType.Integer;
                case BuiltInParameter.REVISION_CLOUD_REVISION_ISSUED_BY: return StorageType.String;
                case BuiltInParameter.REVISION_CLOUD_REVISION_ISSUED_TO: return StorageType.String;
                case BuiltInParameter.REVISION_CLOUD_REVISION_DATE: return StorageType.String;
                case BuiltInParameter.REVISION_CLOUD_REVISION_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.REVISION_CLOUD_REVISION_NUM: return StorageType.String;
                case BuiltInParameter.REVISION_CLOUD_REVISION: return StorageType.ElementId;
                case BuiltInParameter.REPEATING_DETAIL_ROTATION: return StorageType.Integer;
                case BuiltInParameter.REPEATING_DETAIL_INSIDE: return StorageType.Integer;
                case BuiltInParameter.REPEATING_DETAIL_ELEMENT: return StorageType.ElementId;
                case BuiltInParameter.REPEATING_DETAIL_LAYOUT: return StorageType.Integer;
                case BuiltInParameter.REPEATING_DETAIL_SPACING: return StorageType.Double;
                case BuiltInParameter.REPEATING_DETAIL_NUMBER: return StorageType.Integer;
                case BuiltInParameter.INSULATION_SCALE: return StorageType.Double;
                case BuiltInParameter.INSULATION_WIDTH: return StorageType.Double;
                case BuiltInParameter.VIEW_PARTS_VISIBILITY: return StorageType.Integer;
                case BuiltInParameter.VIEW_DETAIL_LEVEL: return StorageType.Integer;
                case BuiltInParameter.PLUMBING_FIXTURES_VENT_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.PLUMBING_FIXTURES_WASTE_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.PLUMBING_FIXTURES_CW_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.PLUMBING_FIXTURES_HW_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.PLUMBING_FIXTURES_TRAP: return StorageType.String;
                case BuiltInParameter.PLUMBING_FIXTURES_DRAIN: return StorageType.String;
                case BuiltInParameter.PLUMBING_FIXTURES_SUPPLY_PIPE: return StorageType.String;
                case BuiltInParameter.PLUMBING_FIXTURES_SUPPLY_FITTING: return StorageType.String;
                case BuiltInParameter.LIGHTING_FIXTURE_LIGHT_EMITTER: return StorageType.String;
                case BuiltInParameter.FBX_LIGHT_SPOT_FIELD_ANGLE: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_SPOT_BEAM_ANGLE: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_SPOT_TILT_ANGLE: return StorageType.Double;
                case BuiltInParameter.FBX_LIGHT_LIMUNOUS_FLUX: return StorageType.Double;
                case BuiltInParameter.LIGHTING_FIXTURE_LAMP: return StorageType.String;
                case BuiltInParameter.LIGHTING_FIXTURE_WATTAGE: return StorageType.String;
                case BuiltInParameter.ELECTICAL_EQUIP_VOLTAGE: return StorageType.String;
                case BuiltInParameter.ELECTICAL_EQUIP_WATTAGE: return StorageType.String;
                case BuiltInParameter.CURTAIN_WALL_SYSPANEL_THICKNESS: return StorageType.Double;
                case BuiltInParameter.CURTAIN_WALL_PANEL_HOST_ID: return StorageType.ElementId;
                case BuiltInParameter.CURTAIN_WALL_SYSPANEL_OFFSET: return StorageType.Double;
                case BuiltInParameter.CURTAIN_WALL_PANELS_WIDTH: return StorageType.Double;
                case BuiltInParameter.CURTAIN_WALL_PANELS_HEIGHT: return StorageType.Double;
                case BuiltInParameter.ALL_MODEL_MODEL: return StorageType.String;
                case BuiltInParameter.ALL_MODEL_MANUFACTURER: return StorageType.String;
                case BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS: return StorageType.String;
                case BuiltInParameter.ALL_MODEL_TYPE_COMMENTS: return StorageType.String;
                case BuiltInParameter.ALL_MODEL_URL: return StorageType.String;
                case BuiltInParameter.ALL_MODEL_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.RGB_B_PARAM: return StorageType.Integer;
                case BuiltInParameter.RGB_G_PARAM: return StorageType.Integer;
                case BuiltInParameter.RGB_R_PARAM: return StorageType.Integer;
                case BuiltInParameter.ELLIPSE_Y_PARAM: return StorageType.String;
                case BuiltInParameter.ELLIPSE_X_PARAM: return StorageType.String;
                case BuiltInParameter.GROUPNAME_PARAM: return StorageType.String;
                case BuiltInParameter.ICON_INDEX_PARAM: return StorageType.Integer;
                case BuiltInParameter.SHOW_ICON_PARAM: return StorageType.Integer;
                case BuiltInParameter.DEBUGTAB_DATABOUNDCONTROLSDEMO_DOUBLE: return StorageType.Double;
                case BuiltInParameter.DEBUGTAB_DATABOUNDCONTROLSDEMO_INTEGER: return StorageType.Integer;
                case BuiltInParameter.DEBUGTAB_DATABOUNDCONTROLSDEMO_BOOLEAN: return StorageType.Integer;
                case BuiltInParameter.DEBUGTAB_DATABOUNDCONTROLSDEMO_ENUM: return StorageType.Integer;
                case BuiltInParameter.CASEWORK_DEPTH: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_LINK_RELEASE_ROTATION_Z: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_LINK_RELEASE_ROTATION_Y: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_LINK_RELEASE_ROTATION_X: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_LINK_RELEASE_TRANSLATION_Z: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_LINK_RELEASE_TRANSLATION_Y: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_LINK_RELEASE_TRANSLATION_X: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_PHYSICAL_TYPE: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_SKETCH_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_SKETCH_ALIGNMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_WALL_BASE_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_WALL_TOP_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_WALL_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_WALL_ALIGNMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_FLOOR_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_FLOOR_ALIGNMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_COLUMN_BASE_EXTENSION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_BASE_EXTENSION_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_COLUMN_TOP_EXTENSION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_TOP_EXTENSION_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_TOP_Y_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_TOP_Z_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_TOP_ALIGNMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_BASE_Y_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_BASE_Z_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_BASE_ALIGNMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_END_Z_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_END_Y_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_END_ALIGNMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_START_Z_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_START_Y_PROJECTION: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_MODEL_START_ALIGNMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.ELEMENT_LOCKED_PARAM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_IS_POST: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_ANGLED_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_TANGENT_CONNECTION: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_HEIGHT_SHIFT_VAL: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_HEIGHT_SHIFT_TYPE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_RAIL_NAME: return StorageType.String;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_PLACEMENT: return StorageType.None;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_SLOPE_ANGLE: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_BOTTOM_ANGLE: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_TOP_ANGLE: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_HEIGHT_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BASE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_FAMILY: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_RAILING_RAIL_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_RAIL_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_RAIL_STRUCTURE: return StorageType.None;
                case BuiltInParameter.STAIRS_RAILING_SHAPE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_LENGTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_WIDTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BALUSTERS_PER_TREAD: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_SPACING: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_SPACING_TYPE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_BALUSTER_SHAPE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_RAILING_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_WIDTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_RAILING_HEIGHT: return StorageType.Double;
                case BuiltInParameter.RAMP_ATTR_TEXT_SIZE: return StorageType.Double;
                case BuiltInParameter.RAMP_ATTR_TEXT_FONT: return StorageType.String;
                case BuiltInParameter.RAMP_ATTR_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.RAMP_ATTR_RIGHT_BALUSTER_ATTACH_PT: return StorageType.Integer;
                case BuiltInParameter.RAMP_ATTR_LEFT_BALUSTER_ATTACH_PT: return StorageType.Integer;
                case BuiltInParameter.RAMP_ATTR_SHAPE: return StorageType.Integer;
                case BuiltInParameter.RAMP_ATTR_THICKNESS: return StorageType.Double;
                case BuiltInParameter.RAMP_MAX_RUN_LENGTH: return StorageType.Double;
                case BuiltInParameter.RAMP_ATTR_MIN_INV_SLOPE: return StorageType.Double;
                case BuiltInParameter.ASSIGN_TEMPLATE_ON_VIEW_CREATION: return StorageType.Integer;
                case BuiltInParameter.DEFAULT_VIEW_TEMPLATE: return StorageType.ElementId;
                case BuiltInParameter.PLAN_VIEW_VIEW_DIR: return StorageType.Integer;
                case BuiltInParameter.POCHE_MAT_ID: return StorageType.ElementId;
                case BuiltInParameter.ELEVATN_TAG: return StorageType.ElementId;
                case BuiltInParameter.CALLOUT_TAG: return StorageType.ElementId;
                case BuiltInParameter.SECTION_TAG: return StorageType.ElementId;
                case BuiltInParameter.CALLOUT_SYNCRONIZE_BOUND_OFFSET_FAR: return StorageType.Integer;
                case BuiltInParameter.CALLOUT_CORNER_SHEET_RADIUS: return StorageType.Double;
                case BuiltInParameter.CALLOUT_ATTR_HEAD_TAG: return StorageType.ElementId;
                case BuiltInParameter.GRID_BUBBLE_END_2: return StorageType.Integer;
                case BuiltInParameter.GRID_BUBBLE_END_1: return StorageType.Integer;
                case BuiltInParameter.DATUM_BUBBLE_LOCATION_IN_ELEV: return StorageType.Integer;
                case BuiltInParameter.DATUM_BUBBLE_END_1: return StorageType.Integer;
                case BuiltInParameter.DATUM_BUBBLE_END_2: return StorageType.Integer;
                case BuiltInParameter.DATUM_TEXT: return StorageType.String;
                case BuiltInParameter.ELLIPSE_FOCUS_MRK_VISIBLE: return StorageType.Integer;
                case BuiltInParameter.ARC_CURVE_CNTR_MRK_VISIBLE: return StorageType.Integer;
                case BuiltInParameter.REF_TABLE_PARAM_NAME: return StorageType.String;
                case BuiltInParameter.REF_TABLE_ELEM_NAME: return StorageType.String;
                case BuiltInParameter.RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_INST_PARAM: return StorageType.None;
                case BuiltInParameter.RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_PARAM: return StorageType.None;
                case BuiltInParameter.SCHEDULE_EMBEDDED_PARAM: return StorageType.None;
                case BuiltInParameter.SCHEDULE_SHEET_APPEARANCE_PARAM: return StorageType.None;
                case BuiltInParameter.SCHEDULE_FORMAT_PARAM: return StorageType.None;
                case BuiltInParameter.SCHEDULE_GROUP_PARAM: return StorageType.None;
                case BuiltInParameter.SCHEDULE_FILTER_PARAM: return StorageType.None;
                case BuiltInParameter.SCHEDULE_FIELDS_PARAM: return StorageType.None;
                case BuiltInParameter.RASTER_SYMBOL_LINKLOAD_STATUS: return StorageType.String;
                case BuiltInParameter.RASTER_ENABLE_SNAPS: return StorageType.Integer;
                case BuiltInParameter.RASTER_SYMBOL_PAGENUMBER: return StorageType.Integer;
                case BuiltInParameter.RASTER_HORIZONTAL_SCALE: return StorageType.Double;
                case BuiltInParameter.RASTER_VERTICAL_SCALE: return StorageType.Double;
                case BuiltInParameter.RASTER_SYMBOL_HEIGHT: return StorageType.Double;
                case BuiltInParameter.RASTER_SYMBOL_WIDTH: return StorageType.Double;
                case BuiltInParameter.RASTER_SYMBOL_RESOLUTION: return StorageType.Double;
                case BuiltInParameter.RASTER_SYMBOL_FILENAME: return StorageType.String;
                case BuiltInParameter.RASTER_SYMBOL_VIEWNAME: return StorageType.String;
                case BuiltInParameter.RASTER_SYMBOL_PIXELHEIGHT: return StorageType.Integer;
                case BuiltInParameter.RASTER_SYMBOL_PIXELWIDTH: return StorageType.Integer;
                case BuiltInParameter.RASTER_LOCK_PROPORTIONS: return StorageType.Integer;
                case BuiltInParameter.RASTER_SHEETHEIGHT: return StorageType.Double;
                case BuiltInParameter.RASTER_SHEETWIDTH: return StorageType.Double;
                case BuiltInParameter.IMPORT_ADT_ENTITY_ROLL: return StorageType.Double;
                case BuiltInParameter.IMPORT_ADT_ENTITY_THICKNESS: return StorageType.Double;
                case BuiltInParameter.IMPORT_ADT_ENTITY_LENGTH: return StorageType.Double;
                case BuiltInParameter.IMPORT_ADT_ENTITY_WIDTH: return StorageType.Double;
                case BuiltInParameter.IMPORT_ADT_ENTITY_HEIGHT: return StorageType.Double;
                case BuiltInParameter.IMPORT_ADT_COMPONENTS_DESC: return StorageType.String;
                case BuiltInParameter.IMPORT_ADT_ENTITY_STYLE: return StorageType.String;
                case BuiltInParameter.IMPORT_ADT_ENTITY_STRUCT_TYPE: return StorageType.String;
                case BuiltInParameter.IMPORT_ADT_ENTITY_TYPE: return StorageType.String;
                case BuiltInParameter.RVT_LINK_PHASE_MAP: return StorageType.None;
                case BuiltInParameter.RVT_LINK_REFERENCE_TYPE: return StorageType.Integer;
                case BuiltInParameter.RVT_LINK_FILE_NAME_WITHOUT_EXT: return StorageType.String;
                case BuiltInParameter.RVT_LEVEL_OFFSET: return StorageType.Double;
                case BuiltInParameter.RVT_HOST_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.RVT_SOURCE_LEVEL: return StorageType.String;
                case BuiltInParameter.RVT_LINK_INSTANCE_NAME: return StorageType.String;
                case BuiltInParameter.GEO_LOCATION: return StorageType.None;
                case BuiltInParameter.IMPORT_INSTANCE_SCALE: return StorageType.Double;
                case BuiltInParameter.IMPORT_BACKGROUND: return StorageType.Integer;
                case BuiltInParameter.IMPORT_DISPLAY_UNITS: return StorageType.Integer;
                case BuiltInParameter.IMPORT_BASE_LEVEL_OFFSET: return StorageType.Double;
                case BuiltInParameter.IMPORT_BASE_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.IMPORT_SCALE: return StorageType.Double;
                case BuiltInParameter.IMPORT_SYMBOL_NAME: return StorageType.String;
                case BuiltInParameter.ELEV_SYMBOL_ID: return StorageType.ElementId;
                case BuiltInParameter.ELEV_REFERENCE_LABEL_POS: return StorageType.Integer;
                case BuiltInParameter.ELEV_ASSOC_DATUM: return StorageType.ElementId;
                case BuiltInParameter.ELEV_VIEW_NAME_POS: return StorageType.Integer;
                case BuiltInParameter.ELEV_SHOW_VIEW_NAME: return StorageType.Integer;
                case BuiltInParameter.ELEV_TEXT_POS: return StorageType.Integer;
                case BuiltInParameter.ELEV_ARROW_FILLED: return StorageType.Integer;
                case BuiltInParameter.ELEV_ARROW_ANGLE: return StorageType.Double;
                case BuiltInParameter.ELEV_SHAPE: return StorageType.Integer;
                case BuiltInParameter.ELEV_WIDTH: return StorageType.Double;
                case BuiltInParameter.COLOR_FILL_SWATCH_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.COLOR_FILL_SWATCH_WIDTH_PARAM: return StorageType.Double;
                case BuiltInParameter.COLOR_FILL_FILTERED_PARAM: return StorageType.Integer;
                case BuiltInParameter.SHEET_GUIDE_GRID: return StorageType.ElementId;
                case BuiltInParameter.SHEET_CURRENT_REVISION_ISSUED: return StorageType.Integer;
                case BuiltInParameter.SHEET_CURRENT_REVISION_ISSUED_BY: return StorageType.String;
                case BuiltInParameter.SHEET_CURRENT_REVISION_ISSUED_TO: return StorageType.String;
                case BuiltInParameter.SHEET_CURRENT_REVISION_DATE: return StorageType.String;
                case BuiltInParameter.SHEET_CURRENT_REVISION_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.SHEET_REVISIONS_ON_SHEET: return StorageType.None;
                case BuiltInParameter.SHEET_CURRENT_REVISION: return StorageType.String;
                case BuiltInParameter.SHEET_HEIGHT: return StorageType.Double;
                case BuiltInParameter.SHEET_WIDTH: return StorageType.Double;
                case BuiltInParameter.SHEET_FILE_PATH: return StorageType.String;
                case BuiltInParameter.SHEET_APPROVED_BY: return StorageType.String;
                case BuiltInParameter.SHEET_DESIGNED_BY: return StorageType.String;
                case BuiltInParameter.SHEET_SCHEDULED: return StorageType.Integer;
                case BuiltInParameter.SHEET_CHECKED_BY: return StorageType.String;
                case BuiltInParameter.SHEET_DRAWN_BY: return StorageType.String;
                case BuiltInParameter.SHEET_DATE: return StorageType.String;
                case BuiltInParameter.SHEET_SCALE: return StorageType.String;
                case BuiltInParameter.SHEET_NUMBER: return StorageType.String;
                case BuiltInParameter.SHEET_NAME: return StorageType.String;
                case BuiltInParameter.SPACING_APPEND: return StorageType.None;
                case BuiltInParameter.AUTO_JOIN_CONDITION_WALL: return StorageType.Integer;
                case BuiltInParameter.AUTO_MULLION_BORDER2_HORIZ: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_BORDER1_HORIZ: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_BORDER2_VERT: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_BORDER1_VERT: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_INTERIOR_HORIZ: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_INTERIOR_VERT: return StorageType.ElementId;
                case BuiltInParameter.AUTO_PANEL_WALL: return StorageType.ElementId;
                case BuiltInParameter.AUTO_JOIN_CONDITION: return StorageType.Integer;
                case BuiltInParameter.AUTO_PANEL: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_BORDER2_GRID2: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_BORDER1_GRID2: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_BORDER2_GRID1: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_BORDER1_GRID1: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_INTERIOR_GRID2: return StorageType.ElementId;
                case BuiltInParameter.AUTO_MULLION_INTERIOR_GRID1: return StorageType.ElementId;
                case BuiltInParameter.CURTAIN_GRID_BASE_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.MULLION_ANGLE: return StorageType.Double;
                case BuiltInParameter.MULLION_POSITION: return StorageType.ElementId;
                case BuiltInParameter.MULLION_PROFILE: return StorageType.ElementId;
                case BuiltInParameter.TRAP_MULL_WIDTH: return StorageType.Double;
                case BuiltInParameter.MULLION_DEPTH2: return StorageType.Double;
                case BuiltInParameter.MULLION_DEPTH1: return StorageType.Double;
                case BuiltInParameter.MULLION_DEPTH: return StorageType.Double;
                case BuiltInParameter.LV_MULLION_LEG2: return StorageType.Double;
                case BuiltInParameter.LV_MULLION_LEG1: return StorageType.Double;
                case BuiltInParameter.MULLION_CORNER_TYPE: return StorageType.Integer;
                case BuiltInParameter.MULLION_FAM_TYPE: return StorageType.Integer;
                case BuiltInParameter.MULLION_OFFSET: return StorageType.Double;
                case BuiltInParameter.CIRC_MULLION_RADIUS: return StorageType.Double;
                case BuiltInParameter.CUST_MULLION_THICK: return StorageType.Double;
                case BuiltInParameter.CUST_MULLION_WIDTH2: return StorageType.Double;
                case BuiltInParameter.CUST_MULLION_WIDTH1: return StorageType.Double;
                case BuiltInParameter.RECT_MULLION_THICK: return StorageType.Double;
                case BuiltInParameter.RECT_MULLION_WIDTH2: return StorageType.Double;
                case BuiltInParameter.RECT_MULLION_WIDTH1: return StorageType.Double;
                case BuiltInParameter.STAIRS_INST_ALWAYS_UP: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_TRIM_TOP: return StorageType.Integer;
                case BuiltInParameter.STAIRS_INST_DOWN_ARROW_ON: return StorageType.Integer;
                case BuiltInParameter.STAIRS_INST_DOWN_LABEL_TEXT: return StorageType.String;
                case BuiltInParameter.STAIRS_INST_DOWN_LABEL_ON: return StorageType.Integer;
                case BuiltInParameter.STAIRS_INST_UP_ARROW_ON: return StorageType.Integer;
                case BuiltInParameter.STAIRS_INST_UP_LABEL_TEXT: return StorageType.String;
                case BuiltInParameter.STAIRS_INST_UP_LABEL_ON: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_TEXT_SIZE: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_TEXT_FONT: return StorageType.String;
                case BuiltInParameter.STAIRS_ATTR_BODY_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_ATTR_LANDING_CARRIAGE: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_LANDINGS_OVERLAPPING: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_RIGHT_SIDE_STRINGER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_LEFT_SIDE_STRINGER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_NOSING_PLACEMENT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_RISER_TREAD_CONNECT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_RISER_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_NUM_MID_STRINGERS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_STAIRS_CUT_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_LAST_RISER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_FIRST_RISER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_STAIRS_BOTTOM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_MONOLITHIC_STAIRS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_CALC_ENABLED: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_CALC_MAX: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_CALC_MIN: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_EQ_RESULT: return StorageType.Double;
                case BuiltInParameter.STAIRS_ACTUAL_TREAD_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_TREAD_MULT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_RISER_MULT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_STAIR_CALCULATOR: return StorageType.None;
                case BuiltInParameter.STAIRS_ACTUAL_NUM_RISERS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_BREAK_SYM_IN_CUTLINE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_RISER_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_ATTR_RISER_TYPE: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_TREAD_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_ATTR_NOSING_LENGTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_TREAD_FRONT_PROFILE: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_ATTR_STRINGER_MATERIAL: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_ATTR_STRINGER_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_STRINGER_CARRIAGE: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_SIDE_STRINGER_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.STAIRS_MULTISTORY_TOP_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_STRINGERS_PRESENT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TOP_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_BASE_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_RISER_ANGLE: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_TREAD_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_STRINGER_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_STRINGER_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_RISERS_PRESENT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ACTUAL_RISER_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_DESIRED_NUM_RISERS: return StorageType.Integer;
                case BuiltInParameter.STAIRS_ATTR_TREAD_WIDTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_MINIMUM_TREAD_DEPTH: return StorageType.Double;
                case BuiltInParameter.STAIRS_ATTR_MAX_RISER_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STAIRS_TOP_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_BASE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.LEVEL_IS_STRUCTURAL: return StorageType.Integer;
                case BuiltInParameter.LEVEL_IS_BUILDING_STORY: return StorageType.Integer;
                case BuiltInParameter.LEVEL_UP_TO_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.LEVEL_RELATIVE_BASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.LEVEL_ELEV: return StorageType.Double;
                case BuiltInParameter.LEVEL_NAME: return StorageType.String;
                case BuiltInParameter.LEVEL_HEAD_TAG: return StorageType.ElementId;
                case BuiltInParameter.MULTI_REFERENCE_ANNOTATION_SHOW_DIMENSION_TEXT: return StorageType.Integer;
                case BuiltInParameter.MULTI_REFERENCE_ANNOTATION_DIMENSION_STYLE: return StorageType.ElementId;
                case BuiltInParameter.MULTI_REFERENCE_ANNOTATION_GROUP_TAG_HEADS: return StorageType.Integer;
                case BuiltInParameter.MULTI_REFERENCE_ANNOTATION_TAG_TYPE: return StorageType.ElementId;
                case BuiltInParameter.MULTI_REFERENCE_ANNOTATION_REFERENCE_CATEGORY: return StorageType.ElementId;
                case BuiltInParameter.TAG_LEADER_TYPE: return StorageType.Integer;
                case BuiltInParameter.TAG_NO_BREAK_PARAM_STRINGS: return StorageType.Integer;
                case BuiltInParameter.ROOM_TAG_ORIENTATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.TAG_ORIENTATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.TAG_SAMPLE_TEXT: return StorageType.String;
                case BuiltInParameter.TAG_TAG: return StorageType.None;
                case BuiltInParameter.DIAMETER_SYMBOL_TEXT: return StorageType.String;
                case BuiltInParameter.DIAMETER_SYMBOL_LOCATION: return StorageType.Integer;
                case BuiltInParameter.RADIUS_SYMBOL_TEXT: return StorageType.String;
                case BuiltInParameter.VIS_GRAPHICS_COORDINATION_MODEL: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_POINT_CLOUDS: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_WORKSETS: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_ANALYTICAL_MODEL: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_DESIGNOPTIONS: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_RVT_LINKS: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_FILTERS: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_IMPORT: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_ANNOTATION: return StorageType.None;
                case BuiltInParameter.VIS_GRAPHICS_MODEL: return StorageType.None;
                case BuiltInParameter.LEVEL_ATTR_ROOM_COMPUTATION_AUTOMATIC: return StorageType.Integer;
                case BuiltInParameter.LEVEL_ATTR_ROOM_COMPUTATION_HEIGHT: return StorageType.Double;
                case BuiltInParameter.LEVEL_ROOM_COMPUTATION_HEIGHT: return StorageType.Double;
                case BuiltInParameter.ROOM_COMPUTATION_HEIGHT: return StorageType.Double;
                case BuiltInParameter.ALWAYS_ZERO_LENGTH: return StorageType.Double;
                case BuiltInParameter.ROOM_COMPUTATION_METHOD: return StorageType.Integer;
                case BuiltInParameter.ROOM_LOWER_OFFSET: return StorageType.Double;
                case BuiltInParameter.ROOM_UPPER_OFFSET: return StorageType.Double;
                case BuiltInParameter.ROOM_UPPER_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.ROOM_VOLUME: return StorageType.Double;
                case BuiltInParameter.ROOM_HEIGHT: return StorageType.Double;
                case BuiltInParameter.ROOM_PERIMETER: return StorageType.Double;
                case BuiltInParameter.ROOM_LEVEL_ID: return StorageType.ElementId;
                case BuiltInParameter.ROOM_OCCUPANCY: return StorageType.String;
                case BuiltInParameter.ROOM_DEPARTMENT: return StorageType.String;
                case BuiltInParameter.ROOM_FINISH_BASE: return StorageType.String;
                case BuiltInParameter.ROOM_FINISH_CEILING: return StorageType.String;
                case BuiltInParameter.ROOM_FINISH_WALL: return StorageType.String;
                case BuiltInParameter.ROOM_FINISH_FLOOR: return StorageType.String;
                case BuiltInParameter.ROOM_AREA: return StorageType.Double;
                case BuiltInParameter.ROOM_NUMBER: return StorageType.String;
                case BuiltInParameter.ROOM_NAME: return StorageType.String;
                case BuiltInParameter.SPATIAL_FIELD_MGR_LEGEND_HOR_ORIGIN_GAP: return StorageType.Double;
                case BuiltInParameter.SPATIAL_FIELD_MGR_LEGEND_VERT_ORIGIN_GAP: return StorageType.Double;
                case BuiltInParameter.SPATIAL_FIELD_MGR_LEGEND_WIDTH: return StorageType.Double;
                case BuiltInParameter.SPATIAL_FIELD_MGR_LEGEND_HEIGHT: return StorageType.Double;
                case BuiltInParameter.VIEW_ANALYSIS_RESULTS_VISIBILITY: return StorageType.None;
                case BuiltInParameter.SPATIAL_FIELD_MGR_LEGEND_TEXT_TYPE: return StorageType.ElementId;
                case BuiltInParameter.SPATIAL_FIELD_MGR_RESULTS_VISIBILITY: return StorageType.None;
                case BuiltInParameter.SPATIAL_FIELD_MGR_LEGEND_SHOW_DESCRIPTION: return StorageType.Integer;
                case BuiltInParameter.SPATIAL_FIELD_MGR_LEGEND_SHOW_CONFIG_NAME: return StorageType.Integer;
                case BuiltInParameter.SPATIAL_FIELD_MGR_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.SPATIAL_FIELD_MGR_CURRENT_NAME: return StorageType.Integer;
                case BuiltInParameter.SPATIAL_FIELD_MGR_RANGE: return StorageType.Integer;
                case BuiltInParameter.GRID_END_SEGMENTS_LENGTH: return StorageType.Double;
                case BuiltInParameter.GRID_END_SEGMENT_PATTERN: return StorageType.ElementId;
                case BuiltInParameter.GRID_END_SEGMENT_COLOR: return StorageType.Integer;
                case BuiltInParameter.GRID_END_SEGMENT_WEIGHT: return StorageType.Integer;
                case BuiltInParameter.GRID_CENTER_SEGMENT_PATTERN: return StorageType.ElementId;
                case BuiltInParameter.GRID_CENTER_SEGMENT_COLOR: return StorageType.Integer;
                case BuiltInParameter.GRID_CENTER_SEGMENT_WEIGHT: return StorageType.Integer;
                case BuiltInParameter.GRID_CENTER_SEGMENT_STYLE: return StorageType.Integer;
                case BuiltInParameter.GRID_BUBBLE_LINE_PEN: return StorageType.Integer;
                case BuiltInParameter.GRID_HEAD_TAG: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_PATH_FULL_STEP_ARROW: return StorageType.Integer;
                case BuiltInParameter.STAIRS_PATH_START_EXTENSION: return StorageType.Double;
                case BuiltInParameter.NUMBER_SYSTEM_TEXT_SIZE: return StorageType.Double;
                case BuiltInParameter.NUMBER_SYSTEM_TAG_TYPE: return StorageType.Integer;
                case BuiltInParameter.NUMBER_SYSTEM_DISPLAY_RULE: return StorageType.Integer;
                case BuiltInParameter.NUMBER_SYSTEM_REFERENCE: return StorageType.Integer;
                case BuiltInParameter.NUMBER_SYSTEM_JUSTIFY: return StorageType.Integer;
                case BuiltInParameter.NUMBER_SYSTEM_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.NUMBER_SYSTEM_REFERENCE_OFFSET: return StorageType.Double;
                case BuiltInParameter.NUMBER_SYSTEM_JUSTIFY_OFFSET: return StorageType.Double;
                case BuiltInParameter.STAIRS_TEXT_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.STAIRS_TEXT_TYPE: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_DOWN_TEXT: return StorageType.String;
                case BuiltInParameter.STAIRS_SHOW_DOWN_TEXT: return StorageType.Integer;
                case BuiltInParameter.STAIRS_UP_TEXT: return StorageType.String;
                case BuiltInParameter.STAIRS_SHOW_UP_TEXT: return StorageType.Integer;
                case BuiltInParameter.SHOW_ARROWHEAD_TO_CUT_MARK: return StorageType.Integer;
                case BuiltInParameter.DRAW_FOR_EACH_RUN: return StorageType.Integer;
                case BuiltInParameter.ARROWHEAD_END_AT_RISER: return StorageType.Integer;
                case BuiltInParameter.STAIRS_PATH_START_FROM_RISER: return StorageType.Integer;
                case BuiltInParameter.DISTANCE_TO_CUT_MARK: return StorageType.Double;
                case BuiltInParameter.LINE_SHAPE_AT_CORNER: return StorageType.Integer;
                case BuiltInParameter.ARROWHEAD_TYPE: return StorageType.ElementId;
                case BuiltInParameter.START_SYMBOL_TYPE: return StorageType.ElementId;
                case BuiltInParameter.CUT_MARK_SYMBOL_SIZE: return StorageType.Double;
                case BuiltInParameter.CUT_LINE_TYPE: return StorageType.Integer;
                case BuiltInParameter.CUT_LINE_ANGLE: return StorageType.Double;
                case BuiltInParameter.CUT_LINE_EXTENSION: return StorageType.Double;
                case BuiltInParameter.CUT_LINE_DISTANCE: return StorageType.Double;
                case BuiltInParameter.CUT_MARK_SYMBOL: return StorageType.Integer;
                case BuiltInParameter.SECTION_BROKEN_DISPLAY_STYLE: return StorageType.Integer;
                case BuiltInParameter.SECTION_COARSER_SCALE_PULLDOWN_IMPERIAL: return StorageType.Integer;
                case BuiltInParameter.SECTION_COARSER_SCALE_PULLDOWN_METRIC: return StorageType.Integer;
                case BuiltInParameter.SECTION_PARENT_VIEW_NAME: return StorageType.ElementId;
                case BuiltInParameter.SECTION_SHOW_IN_ONE_VIEW_ONLY: return StorageType.Integer;
                case BuiltInParameter.SECTION_ATTR_TAIL_TAG: return StorageType.ElementId;
                case BuiltInParameter.SECTION_ATTR_TAIL_WIDTH: return StorageType.Double;
                case BuiltInParameter.SECTION_ATTR_TAIL_LENGTH: return StorageType.Double;
                case BuiltInParameter.VIEWER_DETAIL_NUMBER: return StorageType.String;
                case BuiltInParameter.VIEWER_SHEET_NUMBER: return StorageType.String;
                case BuiltInParameter.SECTION_ATTR_HEAD_TAG: return StorageType.ElementId;
                case BuiltInParameter.INTERIOR_TICK_DISPLAY: return StorageType.Integer;
                case BuiltInParameter.WITNS_LINE_TICK_MARK: return StorageType.ElementId;
                case BuiltInParameter.DIM_TOTAL_LENGTH: return StorageType.Double;
                case BuiltInParameter.DIM_REFERENCE_COUNT: return StorageType.Integer;
                case BuiltInParameter.ALTERNATE_UNITS_SUFFIX: return StorageType.String;
                case BuiltInParameter.ALTERNATE_UNITS_PREFIX: return StorageType.String;
                case BuiltInParameter.EQUALITY_WITNESS_DISPLAY: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_SUPPRESS_SPACES: return StorageType.Integer;
                case BuiltInParameter.EQUALITY_FORMULA: return StorageType.None;
                case BuiltInParameter.DIM_STYLE_LEADER_TICK_MARK: return StorageType.ElementId;
                case BuiltInParameter.EQUALITY_TEXT_FOR_ANGULAR_DIM: return StorageType.String;
                case BuiltInParameter.EQUALITY_TEXT_FOR_CONTINUOUS_LINEAR_DIM: return StorageType.String;
                case BuiltInParameter.DIM_TEXT_LOCATION_FOR_LEADER: return StorageType.Integer;
                case BuiltInParameter.DIM_LEADER_DISPLAY_CONDITION: return StorageType.Integer;
                case BuiltInParameter.DIM_LEADER_SHOULDER_LENGTH: return StorageType.Double;
                case BuiltInParameter.DIM_LEADER_TYPE: return StorageType.Integer;
                case BuiltInParameter.DIM_TO_INTERSECTING_GRIDS: return StorageType.Integer;
                case BuiltInParameter.DIM_TO_INTERSECTING_WALLS: return StorageType.Integer;
                case BuiltInParameter.DIM_TO_INSERT_TYPE: return StorageType.Integer;
                case BuiltInParameter.FIXED_ROTATION: return StorageType.Integer;
                case BuiltInParameter.KEEP_READABLE: return StorageType.Integer;
                case BuiltInParameter.LEADER_LINE: return StorageType.Integer;
                case BuiltInParameter.LEADER_OFFSET_SHEET: return StorageType.Double;
                case BuiltInParameter.DIM_TO_INSERTS: return StorageType.Integer;
                case BuiltInParameter.SPOT_SLOPE_OFFSET_FROM_REFERENCE: return StorageType.Double;
                case BuiltInParameter.SPOT_SLOPE_SLOPE_REPRESENTATION: return StorageType.Integer;
                case BuiltInParameter.SPOT_SLOPE_SLOPE_DIRECTION: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_LOWER_VALUE: return StorageType.Double;
                case BuiltInParameter.SPOT_ELEV_SINGLE_OR_UPPER_VALUE: return StorageType.Double;
                case BuiltInParameter.SPOT_ELEV_IND_TYPE_ELEVATION: return StorageType.Integer;
                case BuiltInParameter.SPOT_COORDINATE_INCLUDE_ELEVATION: return StorageType.Integer;
                case BuiltInParameter.SPOT_COORDINATE_ELEVATION_SUFFIX: return StorageType.String;
                case BuiltInParameter.SPOT_COORDINATE_ELEVATION_PREFIX: return StorageType.String;
                case BuiltInParameter.SPOT_COORDINATE_BOTTOM_SUFFIX: return StorageType.String;
                case BuiltInParameter.SPOT_COORDINATE_BOTTOM_PREFIX: return StorageType.String;
                case BuiltInParameter.SPOT_COORDINATE_TOP_SUFFIX: return StorageType.String;
                case BuiltInParameter.SPOT_COORDINATE_TOP_PREFIX: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_LOWER_SUFFIX: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_LOWER_PREFIX: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_SINGLE_OR_UPPER_SUFFIX: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_SINGLE_OR_UPPER_PREFIX: return StorageType.String;
                case BuiltInParameter.BASELINE_DIM_OFFSET: return StorageType.Double;
                case BuiltInParameter.SPOT_ELEV_BEND_LEADER: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_IND_TYPE_BOTTOM: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_IND_TYPE_TOP: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_IND_BOTTOM: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_IND_TOP: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_TEXT_LOCATION: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_ROTATE_WITH_COMPONENT: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_DISPLAY_ELEVATIONS: return StorageType.Integer;
                case BuiltInParameter.ORDINATE_DIM_SETTING: return StorageType.None;
                case BuiltInParameter.LINEAR_DIM_TYPE: return StorageType.Integer;
                case BuiltInParameter.SPOT_DIM_LEADER: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_FLIPPED_DIM_LINE_EXTENSION: return StorageType.Double;
                case BuiltInParameter.DIM_STYLE_INTERIOR_TICK_MARK: return StorageType.ElementId;
                case BuiltInParameter.SPOT_TEXT_FROM_LEADER: return StorageType.Double;
                case BuiltInParameter.SPOT_COORDINATE_BASE: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_ANGULAR_UNITS_ALT: return StorageType.None;
                case BuiltInParameter.SPOT_ELEV_IND_TYPE: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_BOT_VALUE: return StorageType.Integer;
                case BuiltInParameter.ALTERNATE_UNITS: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_TOP_VALUE: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_LINEAR_UNITS_ALT: return StorageType.None;
                case BuiltInParameter.SPOT_ELEV_TEXT_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_IND_ELEVATION: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_IND_EW: return StorageType.String;
                case BuiltInParameter.SPOT_ELEV_IND_NS: return StorageType.String;
                case BuiltInParameter.ARROW_CLOSED: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_READ_CONVENTION: return StorageType.Integer;
                case BuiltInParameter.HEAVY_END_PEN: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_DIM_LINE_SNAP_DIST: return StorageType.Double;
                case BuiltInParameter.DIM_STYLE_CENTERLINE_TICK_MARK: return StorageType.ElementId;
                case BuiltInParameter.SPOT_ELEV_LINE_PEN: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_TICK_MARK_PEN: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_LEADER_ARROWHEAD: return StorageType.ElementId;
                case BuiltInParameter.SPOT_ELEV_RELATIVE_BASE: return StorageType.ElementId;
                case BuiltInParameter.SPOT_ELEV_FLIP_TEXT_VERT: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_TEXT_HORIZ_OFFSET: return StorageType.Double;
                case BuiltInParameter.SPOT_ELEV_BASE: return StorageType.Integer;
                case BuiltInParameter.SPOT_ELEV_SYMBOL: return StorageType.ElementId;
                case BuiltInParameter.DIM_STYLE_SHOW_OPENING_HT: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_CENTERLINE_PATTERN: return StorageType.ElementId;
                case BuiltInParameter.DIM_WITNS_LINE_EXTENSION_BELOW: return StorageType.Double;
                case BuiltInParameter.DIM_WITNS_LINE_CNTRL: return StorageType.Integer;
                case BuiltInParameter.DIM_LINE_EXTENSION: return StorageType.Double;
                case BuiltInParameter.DIM_STYLE_CENTERLINE_SYMBOL: return StorageType.ElementId;
                case BuiltInParameter.DIM_TEXT_BACKGROUND: return StorageType.Integer;
                case BuiltInParameter.DIM_STYLE_ANGULAR_UNITS: return StorageType.None;
                case BuiltInParameter.DIM_STYLE_LINEAR_UNITS: return StorageType.None;
                case BuiltInParameter.LEADER_ARROW_WIDTH: return StorageType.Double;
                case BuiltInParameter.ARROW_FILLED: return StorageType.Integer;
                case BuiltInParameter.HEAVY_TICK_MARK_PEN: return StorageType.Integer;
                case BuiltInParameter.ARROW_SIZE: return StorageType.Double;
                case BuiltInParameter.ARROW_TYPE: return StorageType.Integer;
                case BuiltInParameter.TICK_MARK_PEN: return StorageType.Integer;
                case BuiltInParameter.TEXT_POSITION: return StorageType.Integer;
                case BuiltInParameter.RADIUS_SYMBOL_LOCATION: return StorageType.Integer;
                case BuiltInParameter.CENTER_MARK_SIZE: return StorageType.Double;
                case BuiltInParameter.ARC_CENTER_MARK: return StorageType.Integer;
                case BuiltInParameter.WITNS_LINE_GAP_TO_ELT: return StorageType.Double;
                case BuiltInParameter.WITNS_LINE_EXTENSION: return StorageType.Double;
                case BuiltInParameter.TEXT_DIST_TO_LINE: return StorageType.Double;
                case BuiltInParameter.TEXT_ALIGNMENT: return StorageType.Integer;
                case BuiltInParameter.MODEL_TEXT_SIZE: return StorageType.Double;
                case BuiltInParameter.TEXT_STYLE_SIZE: return StorageType.Double;
                case BuiltInParameter.TEXT_STYLE_FONT: return StorageType.String;
                case BuiltInParameter.SHOW_TITLE: return StorageType.Integer;
                case BuiltInParameter.TITLE_STYLE_UNDERLINE: return StorageType.Integer;
                case BuiltInParameter.TITLE_STYLE_ITALIC: return StorageType.Integer;
                case BuiltInParameter.TITLE_STYLE_BOLD: return StorageType.Integer;
                case BuiltInParameter.TITLE_SIZE: return StorageType.Double;
                case BuiltInParameter.TITLE_FONT: return StorageType.String;
                case BuiltInParameter.TEXT_WIDTH_SCALE: return StorageType.Double;
                case BuiltInParameter.TEXT_TAB_SIZE: return StorageType.Double;
                case BuiltInParameter.ARC_LEADER_PARAM: return StorageType.Integer;
                case BuiltInParameter.DIM_LEADER_ARROWHEAD: return StorageType.ElementId;
                case BuiltInParameter.SHEET_ISSUE_DATE: return StorageType.String;
                case BuiltInParameter.PROJECT_ISSUE_DATE: return StorageType.String;
                case BuiltInParameter.PROJECT_STATUS: return StorageType.String;
                case BuiltInParameter.CLIENT_NAME: return StorageType.String;
                case BuiltInParameter.PROJECT_ADDRESS: return StorageType.String;
                case BuiltInParameter.PROJECT_NAME: return StorageType.String;
                case BuiltInParameter.PROJECT_NUMBER: return StorageType.String;
                case BuiltInParameter.LEADER_ARROWHEAD: return StorageType.ElementId;
                case BuiltInParameter.TEXT_BACKGROUND: return StorageType.Integer;
                case BuiltInParameter.TEXT_STYLE_UNDERLINE: return StorageType.Integer;
                case BuiltInParameter.TEXT_STYLE_ITALIC: return StorageType.Integer;
                case BuiltInParameter.TEXT_STYLE_BOLD: return StorageType.Integer;
                case BuiltInParameter.CURVE_IS_FILLED: return StorageType.Integer;
                case BuiltInParameter.TEXT_ALIGN_VERT: return StorageType.Integer;
                case BuiltInParameter.TEXT_ALIGN_HORZ: return StorageType.Integer;
                case BuiltInParameter.TEXT_TEXT: return StorageType.String;
                case BuiltInParameter.LINE_PATTERN: return StorageType.ElementId;
                case BuiltInParameter.LINE_COLOR: return StorageType.Integer;
                case BuiltInParameter.LINE_PEN: return StorageType.Integer;
                case BuiltInParameter.TEXT_COLOR: return StorageType.Integer;
                case BuiltInParameter.TEXT_SIZE: return StorageType.Double;
                case BuiltInParameter.TEXT_FONT: return StorageType.String;
                case BuiltInParameter.REFERENCE_LINE_SUBCATEGORY: return StorageType.ElementId;
                case BuiltInParameter.CLINE_SUBCATEGORY: return StorageType.ElementId;
                case BuiltInParameter.EDGE_LINEWORK: return StorageType.ElementId;
                case BuiltInParameter.BUILDING_CURVE_GSTYLE_PLUS_INVISIBLE: return StorageType.ElementId;
                case BuiltInParameter.BUILDING_CURVE_GSTYLE: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_CURVE_GSTYLE_FOR_2010_MASS: return StorageType.ElementId;
                case BuiltInParameter.HEAD_ON_PLACEMENT_METHOD: return StorageType.Integer;
                case BuiltInParameter.IS_VISIBLE_PARAM: return StorageType.Integer;
                case BuiltInParameter.FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM_MINUS_ANALYTICAL:
                    return StorageType.ElementId;
                case BuiltInParameter.FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_MINUS_ANALYTICAL: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_ELEM_SUBCATEGORY: return StorageType.ElementId;
                case BuiltInParameter.STAIRS_CURVE_TYPE: return StorageType.Integer;
                case BuiltInParameter.ROOF_SLOPE: return StorageType.Double;
                case BuiltInParameter.CURVE_PARAM_STEEL_CANTILEVER: return StorageType.Double;
                case BuiltInParameter.CURVE_PARAM_CONCRETE_CANTILEVER: return StorageType.Double;
                case BuiltInParameter.CURVE_NUMBER_OF_SEGMENTS: return StorageType.Integer;
                case BuiltInParameter.SPECIFY_SLOPE_OR_OFFSET: return StorageType.Integer;
                case BuiltInParameter.SLOPE_ARROW_LEVEL_END: return StorageType.ElementId;
                case BuiltInParameter.SLOPE_ARROW_LEVEL_START: return StorageType.ElementId;
                case BuiltInParameter.CURVE_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.CURVE_HEIGHT_OFFSET: return StorageType.Double;
                case BuiltInParameter.CURVE_IS_SLOPE_DEFINING: return StorageType.Integer;
                case BuiltInParameter.DEFINES_CONSTANT_HEIGHT: return StorageType.Integer;
                case BuiltInParameter.ROOF_CURVE_HEIGHT_AT_WALL: return StorageType.Double;
                case BuiltInParameter.ROOF_CURVE_HEIGHT_OFFSET: return StorageType.Double;
                case BuiltInParameter.ROOF_CURVE_IS_SLOPE_DEFINING: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_WEBTHICKNESS_LOCATION: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_FLANGETHICKNESS_LOCATION: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_TOP_WEB_FILLET: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_SLOPED_WEB_ANGLE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_SLOPED_FLANGE_ANGLE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_CANTILEVER_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_CANTILEVER_LENGTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_BOTTOM_CUT_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_BOTTOM_CUT_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_TOP_CUT_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_TOP_CUT_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_FAMILY_CODE_NAME: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_FAMILY_NAME_KEY: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_SECTION_NAME_KEY: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_SECTION_SIGMA_PROFILE_TOP_BEND_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_SIGMA_PROFILE_MIDDLE_BEND_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_SIGMA_PROFILE_BEND_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ZPROFILE_BOTTOM_FLANGE_LENGTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_CPROFILE_FOLD_LENGTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_LPROFILE_LIP_LENGTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_SHORTER_FLANGE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_LONGER_FLANGE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_SHORTER_FLANGE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_2_LONGER_FLANGE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_1_LONGER_FLANGE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_WEB: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_BETWEEN_ROWS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_TWO_ROWS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_BOLT_DIAMETER: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_WEB_TOE_OF_FILLET: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_FLANGE_TOE_OF_FILLET: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_CLEAR_WEB_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGEWIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGETHICKNESS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_IWELDED_TOPFLANGEWIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_IWELDED_TOPFLANGETHICKNESS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_HSS_OUTERFILLET: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_HSS_INNERFILLET: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_WEBFILLET: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_FLANGEFILLET: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_WEBHEIGHT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_WEBTHICKNESS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_ISHAPE_FLANGETHICKNESS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_SHEAR_AREA_WEAK_AXIS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_SHEAR_AREA_STRONG_AXIS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_WARPING_CONSTANT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_TORSIONAL_MODULUS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_TORSIONAL_MOMENT_OF_INERTIA: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_WEAK_AXIS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_STRONG_AXIS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_WEAK_AXIS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_STRONG_AXIS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_WEAK_AXIS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_STRONG_AXIS:
                    return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_NOMINAL_WEIGHT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_PERIMETER: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_ALPHA: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_CENTROID_VERTICAL: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_CENTROID_HORIZ: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_AREA: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_PIPESTANDARD_WALLDESIGNTHICKNESS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_PIPESTANDARD_WALLNOMINALTHICKNESS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_DIAMETER: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_HEIGHT: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_COMMON_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_SECTION_SHAPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_MATERIAL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ANALYTICAL_DEFINE_THERMAL_PROPERTIES_BY: return StorageType.Integer;
                case BuiltInParameter.ANALYTIC_CONSTRUCTION_GBXML_TYPEID: return StorageType.String;
                case BuiltInParameter.ANALYTIC_CONSTRUCTION_LOOKUP_TABLE: return StorageType.String;
                case BuiltInParameter.ANALYTICAL_ROUGHNESS: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_ABSORPTANCE: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_THERMAL_MASS: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_VISUAL_LIGHT_TRANSMITTANCE: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_SOLAR_HEAT_GAIN_COEFFICIENT: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_THERMAL_RESISTANCE: return StorageType.Double;
                case BuiltInParameter.ANALYTICAL_HEAT_TRANSFER_COEFFICIENT: return StorageType.Double;
                case BuiltInParameter.VIEW_DESIGN_OPTIONS_CONFIG: return StorageType.ElementId;
                case BuiltInParameter.VIEW_UNDERLAY_TOP_ID: return StorageType.ElementId;
                case BuiltInParameter.VIEW_GRAPH_SUN_PATH_SIZE: return StorageType.Integer;
                case BuiltInParameter.VIEW_GRAPH_SUN_PATH: return StorageType.Integer;
                case BuiltInParameter.VIEW_ANALYSIS_DISPLAY_STYLE: return StorageType.ElementId;
                case BuiltInParameter.VIEW_GRAPH_SCHED_LEVEL_RELATIVE_BASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.VIEW_GRAPH_SCHED_HIDDEN_LEVELS: return StorageType.None;
                case BuiltInParameter.VIEW_GRAPH_SCHED_TOTAL_ROWS: return StorageType.Integer;
                case BuiltInParameter.VIEW_GRAPH_SCHED_ROWS_COUNT: return StorageType.Integer;
                case BuiltInParameter.VIEW_GRAPH_SCHED_GRID_APPEARANCE: return StorageType.None;
                case BuiltInParameter.VIEW_GRAPH_SCHED_TEXT_APPEARANCE: return StorageType.None;
                case BuiltInParameter.VIEW_GRAPH_SCHED_TITLE: return StorageType.String;
                case BuiltInParameter.VIEW_GRAPH_SCHED_ROWS_FROM: return StorageType.Integer;
                case BuiltInParameter.VIEW_GRAPH_SCHED_GROUP_SIMILAR: return StorageType.Integer;
                case BuiltInParameter.VIEW_GRAPH_SCHED_MATERIAL_TYPES: return StorageType.None;
                case BuiltInParameter.VIEW_GRAPH_SCHED_LOCATIONS_HIGH: return StorageType.String;
                case BuiltInParameter.VIEW_GRAPH_SCHED_LOCATIONS_LOW: return StorageType.String;
                case BuiltInParameter.VIEW_GRAPH_SCHED_BOTTOM_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.VIEW_GRAPH_SCHED_TOP_LEVEL: return StorageType.ElementId;
                case BuiltInParameter.VIEWPORT_ATTR_ORIENTATION_ON_SHEET: return StorageType.Integer;
                case BuiltInParameter.VIEWPORT_ATTR_SHOW_BOX: return StorageType.Integer;
                case BuiltInParameter.VIEWPORT_ATTR_SHOW_EXTENSION_LINE: return StorageType.Integer;
                case BuiltInParameter.VIEWPORT_ATTR_SHOW_LABEL: return StorageType.Integer;
                case BuiltInParameter.VIEWPORT_ATTR_LABEL_TAG: return StorageType.ElementId;
                case BuiltInParameter.VIEW_SCALE_HAVENAME: return StorageType.Integer;
                case BuiltInParameter.VIEW_SCALE_CUSTOMNAME: return StorageType.String;
                case BuiltInParameter.VIEW_GRAPH_SCHED_OFF_GRID: return StorageType.Integer;
                case BuiltInParameter.VIEW_GRAPH_SCHED_UNITS_FORMAT: return StorageType.None;
                case BuiltInParameter.VIEWPORT_SHEET_NAME: return StorageType.String;
                case BuiltInParameter.VIEWPORT_SHEET_NUMBER: return StorageType.String;
                case BuiltInParameter.VIEWPORT_SCALE: return StorageType.String;
                case BuiltInParameter.VIEWPORT_VIEW_NAME: return StorageType.String;
                case BuiltInParameter.VIEWPORT_DETAIL_NUMBER: return StorageType.String;
                case BuiltInParameter.VIEW_TEMPLATE_FOR_SCHEDULE: return StorageType.ElementId;
                case BuiltInParameter.RENDER_RPC_PROPERTIES: return StorageType.String;
                case BuiltInParameter.FAMILY_SYMBOLIC_REP: return StorageType.Integer;
                case BuiltInParameter.FAMILY_RENDERING_TYPE: return StorageType.Integer;
                case BuiltInParameter.RENDER_RPC_FILENAME: return StorageType.String;
                case BuiltInParameter.RENDER_PLANT_TRIM_HEIGHT: return StorageType.Double;
                case BuiltInParameter.RENDER_PLANT_HEIGHT: return StorageType.Double;
                case BuiltInParameter.RENDER_PLANT_NAME: return StorageType.String;
                case BuiltInParameter.VIEW_CAMERA_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.COLOR_SCHEME_LOCATION: return StorageType.Integer;
                case BuiltInParameter.VIEW_DEPENDENCY: return StorageType.String;
                case BuiltInParameter.VIEW_BACK_CLIPPING: return StorageType.Integer;
                case BuiltInParameter.VIEW_ASSOCIATED_ASSEMBLY_INSTANCE_ID: return StorageType.ElementId;
                case BuiltInParameter.VIEW_GRAPH_SCHED_TOTAL_COLUMNS: return StorageType.Integer;
                case BuiltInParameter.VIEW_UNDERLAY_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.VIEW_TEMPLATE: return StorageType.ElementId;
                case BuiltInParameter.VIEW_GRAPH_SCHED_NUMBER_COLUMNS: return StorageType.Integer;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS: return StorageType.None;
                case BuiltInParameter.MODEL_GRAPHICS_STYLE_ANON_DRAFT: return StorageType.Integer;
                case BuiltInParameter.VIEW_REFERENCING_DETAIL: return StorageType.String;
                case BuiltInParameter.VIEW_REFERENCING_SHEET: return StorageType.String;
                case BuiltInParameter.VIEW_CAMERA_POSITION: return StorageType.Integer;
                case BuiltInParameter.PLAN_VIEW_NORTH: return StorageType.Integer;
                case BuiltInParameter.WALKTHROUGH_FRAMES_COUNT: return StorageType.None;
                case BuiltInParameter.PLAN_VIEW_LEVEL: return StorageType.String;
                case BuiltInParameter.MODEL_GRAPHICS_STYLE: return StorageType.Integer;
                case BuiltInParameter.VIEW_VISIBLE_CATEGORIES: return StorageType.None;
                case BuiltInParameter.VIEW_DISCIPLINE: return StorageType.Integer;
                case BuiltInParameter.PLAN_VIEW_RANGE: return StorageType.None;
                case BuiltInParameter.VIEW_MODEL_DISPLAY_MODE: return StorageType.Integer;
                case BuiltInParameter.VIEW_SHOW_MASSING: return StorageType.Integer;
                case BuiltInParameter.PLAN_VIEW_TOP_CLIP_HEIGHT: return StorageType.Double;
                case BuiltInParameter.VIEW_CLEAN_JOINS: return StorageType.Integer;
                case BuiltInParameter.VIEW_SHEET_VIEWPORT_INFO: return StorageType.String;
                case BuiltInParameter.PLAN_VIEW_CUT_PLANE_HEIGHT: return StorageType.Double;
                case BuiltInParameter.VIEW_DEPTH: return StorageType.ElementId;
                case BuiltInParameter.VIEW_UNDERLAY_BOTTOM_ID: return StorageType.ElementId;
                case BuiltInParameter.VIEW_SCALE_PULLDOWN_IMPERIAL: return StorageType.Integer;
                case BuiltInParameter.VIEW_SCALE_PULLDOWN_METRIC: return StorageType.Integer;
                case BuiltInParameter.VIEW_SCALE: return StorageType.Integer;
                case BuiltInParameter.VIEW_SCHEMA_SETTING_FOR_SYSTEM: return StorageType.None;
                case BuiltInParameter.VIEW_SCHEMA_SETTING_FOR_BUILDING: return StorageType.None;
                case BuiltInParameter.VIEW_FIXED_SKETCH_PLANE: return StorageType.ElementId;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_PHOTO_EXPOSURE: return StorageType.None;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_FOG: return StorageType.None;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_BACKGROUND: return StorageType.None;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_SS_INTENSITY: return StorageType.None;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_LIGHTING: return StorageType.None;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_SHADOWS: return StorageType.None;
                case BuiltInParameter.GRAPHIC_DISPLAY_OPTIONS_MODEL: return StorageType.None;
                case BuiltInParameter.VIEWER3D_RENDER_SETTINGS: return StorageType.None;
                case BuiltInParameter.VIEWER_BOUND_FAR_CLIPPING: return StorageType.Integer;
                case BuiltInParameter.VIEWER_REFERENCE_LABEL_TEXT: return StorageType.String;
                case BuiltInParameter.VIEWER_IS_REFERENCE: return StorageType.Integer;
                case BuiltInParameter.VIEWER_REFERENCE_LABEL: return StorageType.String;
                case BuiltInParameter.VIEW_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.VIEWER_MODEL_CLIP_BOX_ACTIVE: return StorageType.Integer;
                case BuiltInParameter.VIEW_NAME: return StorageType.String;
                case BuiltInParameter.VIEWER_BOUND_ACTIVE_NEAR: return StorageType.Integer;
                case BuiltInParameter.VIEWER_BOUND_ACTIVE_FAR: return StorageType.Integer;
                case BuiltInParameter.VIEWER_BOUND_ACTIVE_BOTTOM: return StorageType.Integer;
                case BuiltInParameter.VIEWER_BOUND_ACTIVE_TOP: return StorageType.Integer;
                case BuiltInParameter.VIEWER_BOUND_ACTIVE_LEFT: return StorageType.Integer;
                case BuiltInParameter.VIEWER_BOUND_ACTIVE_RIGHT: return StorageType.Integer;
                case BuiltInParameter.VIEWER_BOUND_OFFSET_NEAR: return StorageType.Double;
                case BuiltInParameter.VIEWER_BOUND_OFFSET_FAR: return StorageType.Double;
                case BuiltInParameter.VIEWER_BOUND_OFFSET_BOTTOM: return StorageType.Double;
                case BuiltInParameter.VIEWER_BOUND_OFFSET_TOP: return StorageType.Double;
                case BuiltInParameter.VIEWER_BOUND_OFFSET_LEFT: return StorageType.Double;
                case BuiltInParameter.VIEWER_BOUND_OFFSET_RIGHT: return StorageType.Double;
                case BuiltInParameter.VIEWER_ANNOTATION_CROP_ACTIVE: return StorageType.Integer;
                case BuiltInParameter.VIEWER_SHOW_UNCROPPED: return StorageType.Integer;
                case BuiltInParameter.VIEWER_CROP_REGION_DISABLED: return StorageType.Integer;
                case BuiltInParameter.VIEWER_CROP_REGION_VISIBLE: return StorageType.Integer;
                case BuiltInParameter.VIEWER_CROP_REGION: return StorageType.Integer;
                case BuiltInParameter.VIEWER_PERSPECTIVE: return StorageType.Integer;
                case BuiltInParameter.VIEWER_TARGET_ELEVATION: return StorageType.Double;
                case BuiltInParameter.VIEWER_OPTION_VISIBILITY: return StorageType.ElementId;
                case BuiltInParameter.VIEWER_EYE_ELEVATION: return StorageType.Double;
                case BuiltInParameter.DIM_LABEL_IS_INSTANCE: return StorageType.Integer;
                case BuiltInParameter.DIM_ISREPORTING: return StorageType.Integer;
                case BuiltInParameter.DIM_LEADER: return StorageType.Integer;
                case BuiltInParameter.DIM_DISPLAY_EQ: return StorageType.Integer;
                case BuiltInParameter.DIM_NOT_MODIFIABLE: return StorageType.Integer;
                case BuiltInParameter.DIM_LABEL: return StorageType.ElementId;
                case BuiltInParameter.DIM_LABEL_GP_SHOW: return StorageType.Integer;
                case BuiltInParameter.DIM_VALUE_ANGLE: return StorageType.Double;
                case BuiltInParameter.DIM_VALUE_LENGTH: return StorageType.Double;
                case BuiltInParameter.ELEM_REFERENCE_NAME_2D_XZ: return StorageType.Integer;
                case BuiltInParameter.CURVE_ELEM_DEFINES_SLOPE: return StorageType.Integer;
                case BuiltInParameter.RADIAL_ARRAY_ARC_RADIUS: return StorageType.Double;
                case BuiltInParameter.CURVE_DETERMINES_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.DATUM_PLANE_DEFINES_WALL_CLOSURE: return StorageType.Integer;
                case BuiltInParameter.CURVE_IS_DETAIL: return StorageType.Integer;
                case BuiltInParameter.CURVE_ELEM_ARC_RADIUS: return StorageType.Double;
                case BuiltInParameter.CURVE_ELEM_ARC_RANGE: return StorageType.Double;
                case BuiltInParameter.CURVE_ELEM_ARC_END_ANGLE: return StorageType.Double;
                case BuiltInParameter.CURVE_ELEM_ARC_START_ANGLE: return StorageType.Double;
                case BuiltInParameter.CURVE_ELEM_LINE_ANGLE: return StorageType.Double;
                case BuiltInParameter.CURVE_ELEM_LENGTH: return StorageType.Double;
                case BuiltInParameter.ELEM_DELETABLE_IN_FAMILY: return StorageType.Integer;
                case BuiltInParameter.ELEM_REFERENCE_NAME: return StorageType.Integer;
                case BuiltInParameter.DATUM_PLANE_DEFINES_ORIGIN: return StorageType.Integer;
                case BuiltInParameter.ELEM_IS_REFERENCE: return StorageType.Integer;
                case BuiltInParameter.COLUMN_LOCATION_MARK: return StorageType.String;
                case BuiltInParameter.COLUMN_TOP_ATTACH_CUT_PARAM: return StorageType.Integer;
                case BuiltInParameter.COLUMN_BASE_ATTACH_CUT_PARAM: return StorageType.Integer;
                case BuiltInParameter.COLUMN_BASE_ATTACHED_PARAM: return StorageType.Integer;
                case BuiltInParameter.COLUMN_TOP_ATTACHED_PARAM: return StorageType.Integer;
                case BuiltInParameter.COLUMN_BASE_ATTACHMENT_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.COLUMN_TOP_ATTACHMENT_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.COLUMN_BASE_ATTACH_JUSTIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.COLUMN_TOP_ATTACH_JUSTIFICATION_PARAM: return StorageType.Integer;
                case BuiltInParameter.MATERIAL_PARAM_SHININESS: return StorageType.Integer;
                case BuiltInParameter.MATERIAL_PARAM_SMOOTHNESS: return StorageType.Integer;
                case BuiltInParameter.MATERIAL_PARAM_GLOW: return StorageType.Integer;
                case BuiltInParameter.MATERIAL_PARAM_TRANSPARENCY: return StorageType.Integer;
                case BuiltInParameter.MATERIAL_PARAM_COLOR: return StorageType.Integer;
                case BuiltInParameter.SEEK_ITEM_ID: return StorageType.String;
                case BuiltInParameter.OMNICLASS_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.OMNICLASS_CODE: return StorageType.String;
                case BuiltInParameter.UNIFORMAT_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.UNIFORMAT_CODE: return StorageType.String;
                case BuiltInParameter.SLOPE_END_HEIGHT: return StorageType.Double;
                case BuiltInParameter.SLOPE_START_HEIGHT: return StorageType.Double;
                case BuiltInParameter.CEILING_HAS_THICKNESS_PARAM: return StorageType.Integer;
                case BuiltInParameter.CEILING_THICKNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM: return StorageType.Double;
                case BuiltInParameter.CEILING_THICKNESS: return StorageType.Double;
                case BuiltInParameter.CEILING_ATTR_SYSTEMNAME_PARAM: return StorageType.String;
                case BuiltInParameter.CEILING_ATTR_SPACING2_PARAM: return StorageType.Double;
                case BuiltInParameter.CEILING_ATTR_SPACING1_PARAM: return StorageType.Double;
                case BuiltInParameter.CEILING_ATTR_PATTERN_PARAM: return StorageType.Integer;
                case BuiltInParameter.CEILING_ATTR_DEFAULT_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.FILLED_REGION_MASKING: return StorageType.Integer;
                case BuiltInParameter.BACKGROUND_PATTERN_COLOR_PARAM: return StorageType.Integer;
                case BuiltInParameter.FOREGROUND_PATTERN_COLOR_PARAM: return StorageType.Integer;
                case BuiltInParameter.BACKGROUND_DRAFT_PATTERN_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FOREGROUND_ANY_PATTERN_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FOREGROUND_DRAFT_PATTERN_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.BUILIDING_PAD_STRUCTURE_ID_PARAM: return StorageType.None;
                case BuiltInParameter.CEILING_STRUCTURE_ID_PARAM: return StorageType.None;
                case BuiltInParameter.ROOF_STRUCTURE_ID_PARAM: return StorageType.None;
                case BuiltInParameter.FLOOR_STRUCTURE_ID_PARAM: return StorageType.None;
                case BuiltInParameter.ANY_PATTERN_ID_PARAM_NO_NO: return StorageType.ElementId;
                case BuiltInParameter.FILL_PATTERN_ID_PARAM_NO_NO: return StorageType.ElementId;
                case BuiltInParameter.OBJECT_STYLE_MATERIAL_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.WRAPPING_AT_INSERTS_PARAM: return StorageType.Integer;
                case BuiltInParameter.WRAPPING_AT_ENDS_PARAM: return StorageType.Integer;
                case BuiltInParameter.COARSE_SCALE_FILL_PATTERN_COLOR: return StorageType.Integer;
                case BuiltInParameter.MODEL_CATEGORY_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.HOST_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.MATERIAL_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.COARSE_SCALE_FILL_PATTERN_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ANY_PATTERN_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.WALL_STRUCTURE_ID_PARAM: return StorageType.None;
                case BuiltInParameter.SURFACE_PATTERN_ID_PARAM: return StorageType.None;
                case BuiltInParameter.FILL_PATTERN_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.EDITED_BY: return StorageType.String;
                case BuiltInParameter.SCHEDULE_TOP_LEVEL_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.SCHEDULE_BASE_LEVEL_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.SCHEDULE_TOP_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.SCHEDULE_BASE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.SCHEDULE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ELEM_ROOM_ID: return StorageType.ElementId;
                case BuiltInParameter.ELEM_ROOM_NAME: return StorageType.String;
                case BuiltInParameter.ELEM_ROOM_NUMBER: return StorageType.String;
                case BuiltInParameter.ELEM_PARTITION_PARAM: return StorageType.Integer;
                case BuiltInParameter.ELEM_FAMILY_AND_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ELEM_FAMILY_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ELEM_TYPE_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ELEM_TYPE_LABEL: return StorageType.ElementId;
                case BuiltInParameter.BR_ORG_FILTER: return StorageType.None;
                case BuiltInParameter.BR_ORG_FOLDERS: return StorageType.None;
                case BuiltInParameter.SYMBOL_FAMILY_AND_TYPE_NAMES_PARAM: return StorageType.String;
                case BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM: return StorageType.String;
                case BuiltInParameter.SYMBOL_NAME_PARAM: return StorageType.String;
                case BuiltInParameter.SYMBOL_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS: return StorageType.Integer;
                case BuiltInParameter.FLOOR_PARAM_SPAN_DIRECTION: return StorageType.Double;
                case BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL: return StorageType.Integer;
                case BuiltInParameter.HOST_PERIMETER_COMPUTED: return StorageType.Double;
                case BuiltInParameter.LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM: return StorageType.Double;
                case BuiltInParameter.FLOOR_ATTR_DEFAULT_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.FLOOR_ATTR_DEFAULT_THICKNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.FLOOR_ATTR_THICKNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.PROFILE_PARAM_ALONG_PATH: return StorageType.Double;
                case BuiltInParameter.PROFILE_FAM_TYPE_PLUS_NONE: return StorageType.ElementId;
                case BuiltInParameter.PROFILE2_ANGLE: return StorageType.Double;
                case BuiltInParameter.PROFILE2_FAM_TYPE: return StorageType.ElementId;
                case BuiltInParameter.PROFILE2_FLIPPED_HOR: return StorageType.Integer;
                case BuiltInParameter.PROFILE2_OFFSET_Y: return StorageType.Double;
                case BuiltInParameter.PROFILE2_OFFSET_X: return StorageType.Double;
                case BuiltInParameter.PROFILE1_ANGLE: return StorageType.Double;
                case BuiltInParameter.PROFILE1_FAM_TYPE: return StorageType.ElementId;
                case BuiltInParameter.PROFILE1_FLIPPED_HOR: return StorageType.Integer;
                case BuiltInParameter.PROFILE1_OFFSET_Y: return StorageType.Double;
                case BuiltInParameter.PROFILE1_OFFSET_X: return StorageType.Double;
                case BuiltInParameter.FAM_PROFILE_USAGE: return StorageType.Integer;
                case BuiltInParameter.SWEEP_TRAJ_SEGMENTED: return StorageType.Integer;
                case BuiltInParameter.SWEEP_MAX_SEG_ANGLE: return StorageType.Double;
                case BuiltInParameter.MODEL_OR_SYMBOLIC: return StorageType.Integer;
                case BuiltInParameter.PROFILE_ANGLE: return StorageType.Double;
                case BuiltInParameter.PROFILE_FAM_TYPE: return StorageType.ElementId;
                case BuiltInParameter.PROFILE_FLIPPED_HOR: return StorageType.Integer;
                case BuiltInParameter.PROFILE_OFFSET_Y: return StorageType.Double;
                case BuiltInParameter.PROFILE_OFFSET_X: return StorageType.Double;
                case BuiltInParameter.EXTRUSION_LENGTH: return StorageType.Double;
                case BuiltInParameter.CURVE_VISIBILITY_PARAM: return StorageType.Integer;
                case BuiltInParameter.GEOM_VISIBILITY_PARAM: return StorageType.Integer;
                case BuiltInParameter.ELEMENT_IS_CUTTING: return StorageType.Integer;
                case BuiltInParameter.EXTRUSION_AUTO_PARAMS: return StorageType.Integer;
                case BuiltInParameter.BLEND_END_PARAM: return StorageType.Double;
                case BuiltInParameter.BLEND_START_PARAM: return StorageType.Double;
                case BuiltInParameter.REVOLUTION_END_ANGLE: return StorageType.Double;
                case BuiltInParameter.REVOLUTION_START_ANGLE: return StorageType.Double;
                case BuiltInParameter.EXTRUSION_END_PARAM: return StorageType.Double;
                case BuiltInParameter.EXTRUSION_START_PARAM: return StorageType.Double;
                case BuiltInParameter.SCHEDULE_TYPE_FOR_BROWSER: return StorageType.Integer;
                case BuiltInParameter.SCHEDULE_CATEGORY: return StorageType.ElementId;
                case BuiltInParameter.FACEROOF_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.FACEROOF_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ROOF_FACES_LOCATION: return StorageType.Integer;
                case BuiltInParameter.RELATED_TO_MASS: return StorageType.Integer;
                case BuiltInParameter.FASCIA_DEPTH_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOF_EAVE_CUT_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOF_RAFTER_OR_TRUSS_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOF_BASE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.CURVE_WALL_OFFSET_ROOFS: return StorageType.Double;
                case BuiltInParameter.CURVE_WALL_OFFSET: return StorageType.Double;
                case BuiltInParameter.ACTUAL_MAX_RIDGE_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOF_UPTO_LEVEL_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOF_UPTO_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.ROOF_LEVEL_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ELEVATION_AT_BOTTOM_SURVEY: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ELEVATION_AT_TOP_SURVEY: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_FLOOR_CORE_THICKNESS: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ELEVATION_AT_BOTTOM_CORE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ELEVATION_AT_TOP_CORE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_REFERENCE_LEVEL_ELEVATION: return StorageType.Double;
                case BuiltInParameter.ROOF_CONSTRAINT_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOF_CONSTRAINT_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.HOST_SSE_CURVED_EDGE_CONDITION_PARAM: return StorageType.Integer;
                case BuiltInParameter.ROOF_ATTR_THICKNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.ROOF_ATTR_DEFAULT_THICKNESS_PARAM: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ELEVATION_AT_TOP: return StorageType.Double;
                case BuiltInParameter.NODE_CONNECTION_STATUS: return StorageType.Integer;
                case BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_BEAM_RIGID_LINK: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_COLUMN_HORIZONTAL_PROJECTION_PLANE:
                    return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_BEAM_HORIZONTAL_PROJECTION_PLANE:
                    return StorageType.ElementId;
                case BuiltInParameter.CONTINUOUS_FOOTING_BREAK_AT_INSERTS_DISABLE: return StorageType.Integer;
                case BuiltInParameter.CONTINUOUS_FOOTING_DEFAULT_END_EXTENSION_LENGTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_TESSELLATE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_TESS_DEVIATION: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_HARD_POINTS: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEND_DIR_ANGLE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_COLUMN: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_FRAMING: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_FLOOR_ANALYZES_AS: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ANALYZES_AS: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_CUTBACK_FOR_COLUMN: return StorageType.Integer;
                case BuiltInParameter.BEAM_V_JUSTIFICATION_OTHER_VALUE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_BEAM_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_END1_ELEVATION: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_BEAM_END0_ELEVATION: return StorageType.Double;
                case BuiltInParameter.FAMILY_EXPORT_AS_GEOMETRY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_FOUNDATION_LENGTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_FOUNDATION_WIDTH: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_LENGTH: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_ECCENTRICITY: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_STRUCTURAL_USAGE: return StorageType.Integer;
                case BuiltInParameter.CONTINUOUS_FOOTING_BEARING_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ELEVATION_AT_BOTTOM: return StorageType.Double;
                case BuiltInParameter.FAMILY_STRUCT_FOOTING_USE_CAP_TOP: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_COPING_DISTANCE: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_WIDTH: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_FOUNDATION_THICKNESS: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_BOTTOM_HEEL: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_TOP_HEEL: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_BOTTOM_TOE: return StorageType.Double;
                case BuiltInParameter.CONTINUOUS_FOOTING_TOP_TOE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_MODEL: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_COLUMN_RIGID_LINK: return StorageType.Integer;
                case BuiltInParameter.FAMILY_STRUCT_MATERIAL_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BOTTOM_RELEASE_MZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BOTTOM_RELEASE_MY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BOTTOM_RELEASE_MX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BOTTOM_RELEASE_FZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BOTTOM_RELEASE_FY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BOTTOM_RELEASE_FX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_TOP_RELEASE_MZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_TOP_RELEASE_MY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_TOP_RELEASE_MX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_TOP_RELEASE_FZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_TOP_RELEASE_FY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_TOP_RELEASE_FX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BOTTOM_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_TOP_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_BOTTOM:
                    return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_TOP:
                    return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_MATERIAL_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_CAMBER: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_NUMBER_OF_STUDS: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_END_RELEASE_MZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_END_RELEASE_MY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_END_RELEASE_MX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_END_RELEASE_FZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_END_RELEASE_FY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_END_RELEASE_FX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_START_RELEASE_MZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_START_RELEASE_MY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_START_RELEASE_MX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_START_RELEASE_FZ: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_START_RELEASE_FY: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_START_RELEASE_FX: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_END_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_START_RELEASE_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_WALL_BOTTOM_PROJECTION_PLANE: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_WALL_TOP_PROJECTION_PLANE: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_WALL_PROJECTION_SURFACE: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_PROJECT_FLOOR_PLANE: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_BRACE_REPRESENTATION: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_STICK_SYMBOL_LOCATION: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_END_SUPPORT: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_BEAM_START_SUPPORT: return StorageType.Integer;
                case BuiltInParameter.WINDOW_TYPE_ID: return StorageType.String;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_END_VALUE_ELEVATION: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_START_VALUE_ELEVATION: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_END_LEVEL_REFERENCE: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_START_LEVEL_REFERENCE: return StorageType.ElementId;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_END_VALUE_RATIO: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_START_VALUE_RATIO: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_END_REFELEMENT_END: return StorageType.Integer;
                case BuiltInParameter.TYPE_WALL_CLOSURE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_START_REFELEMENT_END: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_END_VALUE_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_START_VALUE_DISTANCE: return StorageType.Double;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_END_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_ATTACHMENT_START_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_FRAME_CUT_LENGTH: return StorageType.Double;
                case BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.INSTANCE_STRUCT_USAGE_PARAM: return StorageType.Integer;
                case BuiltInParameter.SKETCH_PLANE_PARAM: return StorageType.String;
                case BuiltInParameter.INSTANCE_LENGTH_PARAM: return StorageType.Double;
                case BuiltInParameter.INSTANCE_MOVES_WITH_GRID_PARAM: return StorageType.Integer;
                case BuiltInParameter.INSTANCE_OFFSET_POS_PARAM: return StorageType.Integer;
                case BuiltInParameter.INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.INSTANCE_FREE_HOST_PARAM: return StorageType.String;
                case BuiltInParameter.INSTANCE_HEAD_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.INSTANCE_ELEVATION_PARAM: return StorageType.Double;
                case BuiltInParameter.FAMILY_TOP_LEVEL_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.FAMILY_BASE_LEVEL_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.FAMILY_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_TOP_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_BASE_LEVEL_PARAM: return StorageType.ElementId;
                case BuiltInParameter.FAMILY_RFA_PATH_PSEUDO_PARAM: return StorageType.String;
                case BuiltInParameter.FAMILY_CATEGORY_PSEUDO_PARAM: return StorageType.String;
                case BuiltInParameter.FAMILY_NAME_PSEUDO_PARAM: return StorageType.String;
                case BuiltInParameter.FAMILY_USAGE_PSEUDO_PARAM: return StorageType.String;
                case BuiltInParameter.FAMILY_WPB_DEFAULT_ELEVATION: return StorageType.Double;
                case BuiltInParameter.FAMILY_LINE_LENGTH_PARAM: return StorageType.Double;
                case BuiltInParameter.FAMILY_ROUGH_WIDTH_PARAM: return StorageType.Double;
                case BuiltInParameter.FAMILY_ROUGH_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.FAMILY_WINDOW_INSET_PARAM: return StorageType.Double;
                case BuiltInParameter.WINDOW_THICKNESS: return StorageType.Double;
                case BuiltInParameter.FURNITURE_WIDTH: return StorageType.Double;
                case BuiltInParameter.FAMILY_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.DOOR_EVACUATION_EXIT_TYPE: return StorageType.Integer;
                case BuiltInParameter.WINDOW_OPERATION_TYPE: return StorageType.String;
                case BuiltInParameter.DOOR_FRAME_MATERIAL: return StorageType.String;
                case BuiltInParameter.DOOR_FRAME_TYPE: return StorageType.String;
                case BuiltInParameter.GENERIC_FINISH: return StorageType.String;
                case BuiltInParameter.WINDOW_CONSTRUCTION_TYPE: return StorageType.String;
                case BuiltInParameter.FIRE_RATING: return StorageType.String;
                case BuiltInParameter.DOOR_COST: return StorageType.Double;
                case BuiltInParameter.DOOR_NUMBER: return StorageType.String;
                case BuiltInParameter.DPART_ORIGINAL_CATEGORY_ID: return StorageType.ElementId;
                case BuiltInParameter.DPART_LAYER_CONSTRUCTION: return StorageType.String;
                case BuiltInParameter.DPART_PHASE_DEMOLISHED_BY_ORIGINAL: return StorageType.Integer;
                case BuiltInParameter.DPART_PHASE_CREATED_BY_ORIGINAL: return StorageType.Integer;
                case BuiltInParameter.DPART_LENGTH_COMPUTED: return StorageType.Double;
                case BuiltInParameter.DPART_HEIGHT_COMPUTED: return StorageType.Double;
                case BuiltInParameter.DPART_LAYER_WIDTH: return StorageType.Double;
                case BuiltInParameter.DPART_AREA_COMPUTED: return StorageType.Double;
                case BuiltInParameter.DPART_ORIGINAL_TYPE: return StorageType.String;
                case BuiltInParameter.OFFSETFACES_SHOW_SHAPE_HANDLES: return StorageType.Integer;
                case BuiltInParameter.DPART_LAYER_FUNCTION: return StorageType.String;
                case BuiltInParameter.DPART_VOLUME_COMPUTED: return StorageType.Double;
                case BuiltInParameter.DPART_MATERIAL_BY_ORIGINAL: return StorageType.Integer;
                case BuiltInParameter.DPART_MATERIAL_ID_PARAM: return StorageType.ElementId;
                case BuiltInParameter.DPART_ORIGINAL_FAMILY: return StorageType.String;
                case BuiltInParameter.DPART_ORIGINAL_CATEGORY: return StorageType.String;
                case BuiltInParameter.HOST_PANEL_SCHEDULE_AS_PANEL_PARAM: return StorageType.Integer;
                case BuiltInParameter.WALL_LOCATION_LINE_OFFSET_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_KEY_REF_PARAM: return StorageType.Integer;
                case BuiltInParameter.MEASURE_FROM_STRUCTURE: return StorageType.Integer;
                case BuiltInParameter.WALL_STRUCTURAL_USAGE_PARAM: return StorageType.Integer;
                case BuiltInParameter.WALL_BOTTOM_IS_ATTACHED: return StorageType.Integer;
                case BuiltInParameter.WALL_TOP_IS_ATTACHED: return StorageType.Integer;
                case BuiltInParameter.WALL_TOP_OFFSET: return StorageType.Double;
                case BuiltInParameter.WALL_BASE_OFFSET: return StorageType.Double;
                case BuiltInParameter.WALL_BASE_CONSTRAINT: return StorageType.ElementId;
                case BuiltInParameter.WALL_USER_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_HEIGHT_TYPE: return StorageType.ElementId;
                case BuiltInParameter.WALL_BASE_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.ALLOW_AUTO_EMBED: return StorageType.Integer;
                case BuiltInParameter.WALL_ATTR_ROOM_BOUNDING: return StorageType.Integer;
                case BuiltInParameter.FUNCTION_PARAM: return StorageType.Integer;
                case BuiltInParameter.WALL_ATTR_DEFHEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_ATTR_HEIGHT_PARAM: return StorageType.Double;
                case BuiltInParameter.WALL_ATTR_WIDTH_PARAM: return StorageType.Double;
                case BuiltInParameter.INVALID: return StorageType.None;
#if REVIT_2020

                case BuiltInParameter.RBS_ELEC_CIRCUIT_NAMING: return StorageType.Integer;
                case BuiltInParameter
                    .RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SURFACE_INDENTIFICATION_RESOLUTION:
                    return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SPACE_INDENTIFICATION_RESOLUTION:
                    return StorageType.Double;

#else

                case BuiltInParameter.RBS_ELEC_CIRCUIT_NAMING: return StorageType.ElementId;
                case BuiltInParameter.VOID_CUTS_GEOMETRY: return StorageType.Integer;
                case BuiltInParameter.REBAR_HOOK_ROTATION_AT_END_SCHEDULES_TAGS_FILTERS: return StorageType.Double;
                case BuiltInParameter.REBAR_HOOK_ROTATION_AT_START_SCHEDULES_TAGS_FILTERS: return StorageType.Double;
                case BuiltInParameter.REBAR_HOOK_LENGTH_OVERRIDE: return StorageType.Integer;
                case BuiltInParameter.INFRASTRUCTURE_ALIGNMENT_NAME: return StorageType.String;
                case BuiltInParameter.INFRASTRUCTURE_ALIGNMENT_DESCRIPTION: return StorageType.String;
                case BuiltInParameter.INFRASTRUCTURE_ALIGNMENT_DISPLAYED_START_STATION: return StorageType.Double;
                case BuiltInParameter.INFRASTRUCTURE_ALIGNMENT_DISPLAYED_END_STATION: return StorageType.Double;
                case BuiltInParameter.ASSEMBLY_PRECAST_FREEZE: return StorageType.Integer;
                case BuiltInParameter.REBAR_HOOK_ROTATION_AT_END: return StorageType.Double;
                case BuiltInParameter.REBAR_HOOK_ROTATION_AT_START: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_HOOK_ROTATION_AT_END: return StorageType.Double;
                case BuiltInParameter.REBAR_SHAPE_HOOK_ROTATION_AT_START: return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_NUMBER_OF_CIRCUITS: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_EDIT_CIRCUIT_NAMING_SETTINGS_PARAM: return StorageType.None;
                case BuiltInParameter.DIRECTCONTEXT3D_LOADED: return StorageType.Integer;
                case BuiltInParameter.REBAR_INTERNAL_MULTIPLANAR_ARC_CONNECTOR: return StorageType.Integer;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SURFACE_IDENTIFICATION_RESOLUTION
                    : return StorageType.Double;
                case BuiltInParameter.RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SPACE_IDENTIFICATION_RESOLUTION:
                    return StorageType.Double;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_SLOT_INDEX: return StorageType.String;
                case BuiltInParameter.CIRCUIT_WAYS_PARAM: return StorageType.Integer;
                case BuiltInParameter.CIRCUIT_LOAD_CLASSIFICATION_ABBREVIATION_PARAM: return StorageType.String;
                case BuiltInParameter.CIRCUIT_PHASE_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_CIRCUIT_NAMING_INDEX: return StorageType.Integer;
                case BuiltInParameter.PEAK_LATENT_COOLING_LOAD: return StorageType.Double;
                case BuiltInParameter.SPACE_DEHUMIDIFICATION_SET_POINT: return StorageType.Double;
                case BuiltInParameter.SPACE_HUMIDIFICATION_SET_POINT: return StorageType.Double;
                case BuiltInParameter.SPACE_COOLING_SET_POINT: return StorageType.Double;
                case BuiltInParameter.SPACE_HEATING_SET_POINT: return StorageType.Double;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_SET_END_STATION: return StorageType.Double;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_SET_START_STATION: return StorageType.Double;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_SET_INTERVAL: return StorageType.Double;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_SET_OFFSET: return StorageType.Double;
                case BuiltInParameter.WALL_SINGLE_SLANT_ANGLE_FROM_VERTICAL: return StorageType.Double;
                case BuiltInParameter.WALL_CROSS_SECTION: return StorageType.Integer;
                case BuiltInParameter.FAMILY_ROTATE_TEXT_WITH_COMPONENT: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_END_PROJECTION_ORTHOGONAL: return StorageType.Integer;
                case BuiltInParameter.ANALYTICAL_MODEL_START_PROJECTION_ORTHOGONAL: return StorageType.Integer;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_STATION_VALUE: return StorageType.Double;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_IND_STATION: return StorageType.String;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_INCLUDE_STATION: return StorageType.Integer;
                case BuiltInParameter.SPOT_DIM_LEADER_LINE: return StorageType.Integer;
                case BuiltInParameter.ALIGNMENT_STATION_LABEL_DISTANCE: return StorageType.Double;
                case BuiltInParameter.ARROW_CENTERED: return StorageType.Integer;
                case BuiltInParameter.SELECTION_EDITABLE_ONLY: return StorageType.Integer;
                case BuiltInParameter.INSERT_ORIENTATION: return StorageType.Integer;
                case BuiltInParameter.WALL_SWEEP_ORIENTATION: return StorageType.Integer;
                
#endif

#if REVIT_2022

                case BuiltInParameter.RBS_ELEC_ANALYTICAL_AREA_MEASUREMENT: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_DISTRIBUTION_NODE_POWER_SOURCE: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_ANALYTICAL_AREA_PARAM: return StorageType.Double;
                case BuiltInParameter.RBS_ELECTRICAL_LOAD_ZONE_TYPE: return StorageType.ElementId;

#endif

#if REVIT_2022_OR_LESS

                case BuiltInParameter.FABRICATION_BRA_SIZE: return StorageType.String;
                
#endif

#if REVIT_2022

                case BuiltInParameter.MULTI_LEADER_TAG_UI: return StorageType.Integer;

#endif

#if REVIT_2022_OR_GREATER

                case BuiltInParameter.PREFER_DIM_SIDE_UI_FILTER: return StorageType.Integer;
                case BuiltInParameter.MULTIPLE_ALIGNMENT_UI_TOGGLE: return StorageType.Integer;
                case BuiltInParameter.LOCK_ALIGNMENT_UI_TOGGLE: return StorageType.Integer;
                case BuiltInParameter.REBAR_INSTANCE_BAR_MODEL_DIAMETER: return StorageType.Double;
                case BuiltInParameter.REBAR_MODEL_BAR_DIAMETER: return StorageType.Double;
                case BuiltInParameter.VIEW_SHOW_GRIDS: return StorageType.None;
                case BuiltInParameter.REBAR_MODIFIED_SET: return StorageType.Integer;
                case BuiltInParameter.MOVES_WITH_GRID_PARAM: return StorageType.Integer;
                case BuiltInParameter.DPART_LAYER_INDEX: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_DISTRIBUTION_NODE_SUPPLY_FROM2: return StorageType.ElementId;
                case BuiltInParameter.RBS_ELEC_DISTRIBUTION_NODE_SUPPLY_FROM: return StorageType.ElementId;
                case BuiltInParameter.RBS_ELEC_DISTRIBUTION_NODE_SUPPLY_FROM1: return StorageType.ElementId;
                case BuiltInParameter.RBS_ELEC_ANALYTICAL_LOAD_NAME_PARAM: return StorageType.String;
                case BuiltInParameter.RBS_ELEC_ANALYTICAL_LOAD_TYPE_PARAM: return StorageType.Integer;
                case BuiltInParameter.RBS_ELEC_ANALYTICAL_LOAD_DENSITY: return StorageType.Double;
                case BuiltInParameter.MEP_ELEC_ZONE_EQUIPMENT_TYPE: return StorageType.Integer;
                case BuiltInParameter.STRUCTURAL_CONNECTION_EDIT_RANGES_OF_APPLICABILITY: return StorageType.None;
                case BuiltInParameter.SYSTEMS_ANALYSIS_REPORT_FOLDER: return StorageType.String;
                case BuiltInParameter.SYSTEMS_ANALYSIS_REPORT_STYLE: return StorageType.Integer;
                case BuiltInParameter.ENERGY_ANALYSIS_PROJECT_PHASE: return StorageType.ElementId;
                case BuiltInParameter.SPACE_VOLUME: return StorageType.Double;
                case BuiltInParameter.SPACE_AREA: return StorageType.Double;
                case BuiltInParameter.WALL_TAPERED_WIDTH_AT_BOTTOM: return StorageType.Double;
                case BuiltInParameter.WALL_TAPERED_WIDTH_AT_TOP: return StorageType.Double;
                case BuiltInParameter.WALL_TAPERED_USE_INSTANCE_ANGLES: return StorageType.Integer;
                case BuiltInParameter.WALL_TYPE_WIDTH_MEASURED_AT: return StorageType.Integer;
                case BuiltInParameter.WALL_TYPE_DEFAULT_TAPERED_INTERIOR_INWARD_ANGLE: return StorageType.Double;
                case BuiltInParameter.WALL_TYPE_DEFAULT_TAPERED_EXTERIOR_INWARD_ANGLE: return StorageType.Double;
                case BuiltInParameter.WALL_TAPERED_INTERIOR_INWARD_ANGLE: return StorageType.Double;
                case BuiltInParameter.WALL_TAPERED_EXTERIOR_INWARD_ANGLE: return StorageType.Double;
                case BuiltInParameter.GRID_NET_LOCATION_MARK: return StorageType.String;
                case BuiltInParameter.TAG_ELEMENT_COUNT: return StorageType.Integer;
                case BuiltInParameter.TAG_ANGLE_PARAM: return StorageType.Double;
                case BuiltInParameter.ALIGNMENT_STATION_SUFFIX: return StorageType.String;
                case BuiltInParameter.ALIGNMENT_STATION_PREFIX: return StorageType.String;
                case BuiltInParameter.DIM_SUFFIX: return StorageType.String;
                case BuiltInParameter.DIM_PREFIX: return StorageType.String;
                case BuiltInParameter.ASSOCIATED_LEVEL_OFFSET: return StorageType.Double;
                case BuiltInParameter.ASSOCIATED_LEVEL: return StorageType.ElementId;

#endif
                default:
                    throw new System.ArgumentOutOfRangeException(nameof(builtInParameter),
                        $"Не удалось определить тип параметра для \"{builtInParameter}\".");
            }
        }

#if REVIT_2020 || REVIT_2021
        /// <summary>
        /// Возвращает тип параметра.
        /// </summary>
        /// <param name="definition">Определение параметра.</param>
        /// <returns>Возвращает тип параметра.</returns>
        /// <exception cref="System.ArgumentOutOfRangeException">Выбрасывает исключение если не был сопоставлен тип данных к параметру.</exception>
        public static StorageType GetStorageType(this Definition definition) {
            if(definition == null) {
                throw new ArgumentNullException(nameof(definition));
            }

            switch(definition.ParameterType) {
                case ParameterType.Invalid: return StorageType.String;
                case ParameterType.Text: return StorageType.String;
                case ParameterType.Integer: return StorageType.Integer;
                case ParameterType.Number: return StorageType.Double;
                case ParameterType.Length: return StorageType.Double;
                case ParameterType.Area: return StorageType.Double;
                case ParameterType.Volume: return StorageType.Double;
                case ParameterType.Angle: return StorageType.Double;
                case ParameterType.URL: return StorageType.String;
                case ParameterType.Material: return StorageType.ElementId;
                case ParameterType.YesNo: return StorageType.Integer;
                case ParameterType.Force: return StorageType.Double;
                case ParameterType.LinearForce: return StorageType.Double;
                case ParameterType.AreaForce: return StorageType.Double;
                case ParameterType.Moment: return StorageType.Double;
                case ParameterType.NumberOfPoles: return StorageType.Integer;
                case ParameterType.FixtureUnit: return StorageType.Double;
                case ParameterType.LoadClassification: return StorageType.ElementId;
                case ParameterType.Image: return StorageType.ElementId;
                case ParameterType.MultilineText: return StorageType.String;
                case ParameterType.HVACDensity: return StorageType.Double;
                case ParameterType.HVACEnergy: return StorageType.Double;
                case ParameterType.HVACFriction: return StorageType.Double;
                case ParameterType.HVACPower: return StorageType.Double;
                case ParameterType.HVACPowerDensity: return StorageType.Double;
                case ParameterType.HVACPressure: return StorageType.Double;
                case ParameterType.HVACTemperature: return StorageType.Double;
                case ParameterType.HVACVelocity: return StorageType.Double;
                case ParameterType.HVACAirflow: return StorageType.Double;
                case ParameterType.HVACDuctSize: return StorageType.Double;
                case ParameterType.HVACCrossSection: return StorageType.Double;
                case ParameterType.HVACHeatGain: return StorageType.Double;
                case ParameterType.ElectricalCurrent: return StorageType.Double;
                case ParameterType.ElectricalPotential: return StorageType.Double;
                case ParameterType.ElectricalFrequency: return StorageType.Double;
                case ParameterType.ElectricalIlluminance: return StorageType.Double;
                case ParameterType.ElectricalLuminousFlux: return StorageType.Double;
                case ParameterType.ElectricalPower: return StorageType.Double;
                case ParameterType.HVACRoughness: return StorageType.Double;
                case ParameterType.ElectricalApparentPower: return StorageType.Double;
                case ParameterType.ElectricalPowerDensity: return StorageType.Double;
                case ParameterType.PipingDensity: return StorageType.Double;
                case ParameterType.PipingFlow: return StorageType.Double;
                case ParameterType.PipingFriction: return StorageType.Double;
                case ParameterType.PipingPressure: return StorageType.Double;
                case ParameterType.PipingTemperature: return StorageType.Double;
                case ParameterType.PipingVelocity: return StorageType.Double;
                case ParameterType.PipingViscosity: return StorageType.Double;
                case ParameterType.PipeSize: return StorageType.Double;
                case ParameterType.PipingRoughness: return StorageType.Double;
                case ParameterType.Stress: return StorageType.Double;
                case ParameterType.UnitWeight: return StorageType.Double;
                case ParameterType.ThermalExpansion: return StorageType.Double;
                case ParameterType.LinearMoment: return StorageType.Double;
                case ParameterType.ForcePerLength: return StorageType.Double;
                case ParameterType.ForceLengthPerAngle: return StorageType.Double;
                case ParameterType.LinearForcePerLength: return StorageType.Double;
                case ParameterType.LinearForceLengthPerAngle: return StorageType.Double;
                case ParameterType.AreaForcePerLength: return StorageType.Double;
                case ParameterType.PipingVolume: return StorageType.Double;
                case ParameterType.HVACViscosity: return StorageType.Double;
                case ParameterType.HVACCoefficientOfHeatTransfer: return StorageType.Double;
                case ParameterType.HVACAirflowDensity: return StorageType.Double;
                case ParameterType.Slope: return StorageType.Double;
                case ParameterType.HVACCoolingLoad: return StorageType.Double;
                case ParameterType.HVACCoolingLoadDividedByArea: return StorageType.Double;
                case ParameterType.HVACCoolingLoadDividedByVolume: return StorageType.Double;
                case ParameterType.HVACHeatingLoad: return StorageType.Double;
                case ParameterType.HVACHeatingLoadDividedByArea: return StorageType.Double;
                case ParameterType.HVACHeatingLoadDividedByVolume: return StorageType.Double;
                case ParameterType.HVACAirflowDividedByVolume: return StorageType.Double;
                case ParameterType.HVACAirflowDividedByCoolingLoad: return StorageType.Double;
                case ParameterType.HVACAreaDividedByCoolingLoad: return StorageType.Double;
                case ParameterType.WireSize: return StorageType.Double;
                case ParameterType.HVACSlope: return StorageType.Double;
                case ParameterType.PipingSlope: return StorageType.Double;
                case ParameterType.Currency: return StorageType.Double;
                case ParameterType.ElectricalEfficacy: return StorageType.Double;
                case ParameterType.ElectricalWattage: return StorageType.Double;
                case ParameterType.ColorTemperature: return StorageType.Double;
                case ParameterType.ElectricalLuminousIntensity: return StorageType.Double;
                case ParameterType.ElectricalLuminance: return StorageType.Double;
                case ParameterType.HVACAreaDividedByHeatingLoad: return StorageType.Double;
                case ParameterType.HVACFactor: return StorageType.Double;
                case ParameterType.ElectricalTemperature: return StorageType.Double;
                case ParameterType.ElectricalCableTraySize: return StorageType.Double;
                case ParameterType.ElectricalConduitSize: return StorageType.Double;
                case ParameterType.ReinforcementVolume: return StorageType.Double;
                case ParameterType.ReinforcementLength: return StorageType.Double;
                case ParameterType.ElectricalDemandFactor: return StorageType.Double;
                case ParameterType.HVACDuctInsulationThickness: return StorageType.Double;
                case ParameterType.HVACDuctLiningThickness: return StorageType.Double;
                case ParameterType.PipeInsulationThickness: return StorageType.Double;
                case ParameterType.HVACThermalResistance: return StorageType.Double;
                case ParameterType.HVACThermalMass: return StorageType.Double;
                case ParameterType.Acceleration: return StorageType.Double;
                case ParameterType.BarDiameter: return StorageType.Double;
                case ParameterType.CrackWidth: return StorageType.Double;
                case ParameterType.DisplacementDeflection: return StorageType.Double;
                case ParameterType.Energy: return StorageType.Double;
                case ParameterType.StructuralFrequency: return StorageType.Double;
                case ParameterType.Mass: return StorageType.Double;
                case ParameterType.MassPerUnitLength: return StorageType.Double;
                case ParameterType.MomentOfInertia: return StorageType.Double;
                case ParameterType.SurfaceArea: return StorageType.Double;
                case ParameterType.Period: return StorageType.Double;
                case ParameterType.Pulsation: return StorageType.Double;
                case ParameterType.ReinforcementArea: return StorageType.Double;
                case ParameterType.ReinforcementAreaPerUnitLength: return StorageType.Double;
                case ParameterType.ReinforcementCover: return StorageType.Double;
                case ParameterType.ReinforcementSpacing: return StorageType.Double;
                case ParameterType.Rotation: return StorageType.Double;
                case ParameterType.SectionArea: return StorageType.Double;
                case ParameterType.SectionDimension: return StorageType.Double;
                case ParameterType.SectionModulus: return StorageType.Double;
                case ParameterType.SectionProperty: return StorageType.Double;
                case ParameterType.StructuralVelocity: return StorageType.Double;
                case ParameterType.WarpingConstant: return StorageType.Double;
                case ParameterType.Weight: return StorageType.Double;
                case ParameterType.WeightPerUnitLength: return StorageType.Double;
                case ParameterType.HVACThermalConductivity: return StorageType.Double;
                case ParameterType.HVACSpecificHeat: return StorageType.Double;
                case ParameterType.HVACSpecificHeatOfVaporization: return StorageType.Double;
                case ParameterType.HVACPermeability: return StorageType.Double;
                case ParameterType.ElectricalResistivity: return StorageType.Double;
                case ParameterType.MassDensity: return StorageType.Double;
                case ParameterType.MassPerUnitArea: return StorageType.Double;
                case ParameterType.PipeDimension: return StorageType.Double;
                case ParameterType.PipeMass: return StorageType.Double;
                case ParameterType.PipeMassPerUnitLength: return StorageType.Double;
                case ParameterType.HVACTemperatureDifference: return StorageType.Double;
                case ParameterType.PipingTemperatureDifference: return StorageType.Double;
                case ParameterType.ElectricalTemperatureDifference: return StorageType.Double;
                case ParameterType.TimeInterval: return StorageType.Double;
                case ParameterType.Speed: return StorageType.Double;
                case ParameterType.FamilyType: return StorageType.ElementId;
                default:
                    throw new System.ArgumentOutOfRangeException($"Не удалось определить тип параметра для \"{definition.ParameterType}\".");
            }
        }

#else
        /// <summary>
        /// Возвращает тип параметра.
        /// </summary>
        /// <param name="forgeTypeId">Системный тип параметра.</param>
        /// <returns>Возвращает тип параметра.</returns>
        public static StorageType GetStorageType(this ForgeTypeId forgeTypeId) {
            if(forgeTypeId == null) {
                throw new ArgumentNullException(nameof(forgeTypeId));
            }

            if(forgeTypeId == ParameterTypeId.ActualMaxRidgeHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelIncludeStation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelIndStation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetEndStation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetInterval) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetStartStation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelStationValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllGridRotationForDivisionRule) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AllModelDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelImage) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AllModelInstanceComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelManufacturer) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelModel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelTypeComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelTypeImage) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AllModelUrl) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllowAutoEmbed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AlternateUnits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AlternateUnitsPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlternateUnitsSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlwaysZeroLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticConstructionGbxmlTypeid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticConstructionLookupTable) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticalAbsorptance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalDefineThermalPropertiesBy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalGeometryIsValid) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalHeatTransferCoefficient) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseRotationX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseRotationY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseRotationZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseTranslationX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseTranslationY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseTranslationZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndAllNonZero) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndFx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndFy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndFz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndMx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndMy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndMz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartAllNonZero) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartFx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartFy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartFz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartMx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartMy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartMz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseExtensionMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelCodeChecking) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelColumnBaseExtension) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelColumnTopExtension) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndProjectionOrthogonal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelFloorAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelFloorProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelFoundationsMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelManuallyAdjusted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelNodesMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelPhysicalType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelRotation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelSketchAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelSketchProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartProjectionOrthogonal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStickElementsMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelSurfaceElementsMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopExtensionMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallBaseProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallTopProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalRoughness) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalSolarHeatGainCoefficient) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalThermalMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalThermalResistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalVisualLightTransmittance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnyPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnyPatternIdParamNoNo) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ArcCenterMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArcLeaderParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArcWallCntrMrkVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AreaSchemeId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AreaSchemeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AreaType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AreaTypeText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ArrowCentered) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowClosed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowFilled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ArrowType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowheadEndAtRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowheadType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AssemblyName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AssemblyNamingCategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AssemblyPrecastFreeze) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AssignTemplateOnViewCreation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AssociatedLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AssociatedLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AutoJoinCondition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AutoJoinConditionWall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Grid1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Grid2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Horiz) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Vert) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Grid1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Grid2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Horiz) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Vert) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorGrid1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorGrid2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorHoriz) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorVert) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoPanel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoPanelWall) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BackgroundDraftPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BackgroundPatternColorParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BaselineDimOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointAngletonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointEastwestParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointElevationParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointLatitudeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointLongitudeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointNorthsouthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamHJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BeamSystem3dParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BeamSystemTagInstParamAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamSystemTagParamLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamSystemTagParamRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamVJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BeamVJustificationOtherValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BentFabricParamBendDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BentFabricParamLongitudinalCutLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BentFabricParamStraightWiresLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BlendEndParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BlendStartParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryAreaRestraintX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryAreaRestraintY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryAreaRestraintZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryBearing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryConditionsIsExt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryConditionsType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionRotX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionRotY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionRotZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintRotX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryParamPreset) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryParamPresetArea) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryParamPresetLinear) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintRotX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintRotY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintRotZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryXRotationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryXRotationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryXTranslationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryXTranslationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYRotationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYRotationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYTranslationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYTranslationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZRotationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZRotationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZTranslationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZTranslationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BrOrgFilter) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.BrOrgFolders) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.BuildingClosingTimeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.BuildingCurveGstyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BuildingCurveGstylePlusInvisible) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BuildingOpeningTimeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.BuildingUnoccupiedCoolingSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BuildingpadHeightabovelevelParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BuildingpadThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BuilidingPadStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CabletrayMinbendmultiplierParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CalloutAttrHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CalloutCornerSheetRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CalloutSyncronizeBoundOffsetFar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CalloutTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrDefaultHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrPatternParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrSpacing1Param) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrSpacing2Param) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrSystemnameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CeilingHasThicknessParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CeilingHeightabovelevelParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CeilingThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CenterMarkSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CircMullionRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CircuitLoadClassificationAbbreviationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CircuitLoadClassificationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CircuitPhaseParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CircuitWaysParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ClearCover) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverBottom) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverExterior) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverInterior) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverOther) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverTop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClientName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ClineSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CoarseScaleFillPatternColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CoarseScaleFillPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ColorFillFilteredParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColorFillSwatchHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ColorFillSwatchWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ColorSchemeLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachCutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachedParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachmentOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ColumnLocationMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachCutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachedParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachmentOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConceptualConstructionMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ConduitStandardTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ConnectorAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorAngleOfDeflection) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorEngagementLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorGenderType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorInsideDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorJointType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorProfileType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorReferenceIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorUtilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorVisibleSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConstraintFixedOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBearingWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBottomHeel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBottomToe) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBreakAtInsertsDisable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingDefaultEndExtensionLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingEccentricity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingStructuralUsage) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingTopHeel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingTopToe) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailBeginningTerminationAttachmentParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.ContinuousrailBeginningTerminationTypeParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.ContinuousrailDefaultJoinTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailEndExtensionLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailEndTerminationAttachmentParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.ContinuousrailEndTerminationTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailExtensionLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailFilletRadiusParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailJoinTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailMaterialsParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailPlusTreadDepthParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailProfileTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailTransitionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContourElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContourElevationStep) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsElevBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsLinearUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsPrimaryOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsRelativeBase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContourSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CouplerCoupledBarSize) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerCoupledEndtreatment) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerCoupledEngagement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerMainBarSize) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerMainEndtreatment) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerMainEngagement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CouplerNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CouplerQuantity) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CouplerWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CoverTypeLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CoverTypeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CurtainGridBaseOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtainVersionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CurtainWallPanelHostId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CurtainWallPanelsHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtainWallPanelsWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtainWallSyspanelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtainWallSyspanelThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBordern1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBordern2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAnglen1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAnglen2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRatioU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRatioV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRation1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRation2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDist) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveByPointsProjectionType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveDeterminesOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveEdgeOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcEndAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcRange) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcStartAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemDefinesSlope) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveElemLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemLineAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveHeightOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveIsDetail) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveIsFilled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveIsReferenceLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveIsSlopeDefining) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CurveNumberOfSegments) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveParamConcreteCantilever) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveParamSteelCantilever) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveSupportOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveVisibilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveWallOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveWallOffsetRoofs) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CustMullionThick) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CustMullionWidth1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CustMullionWidth2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CutMarkSymbol) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CutMarkSymbolSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CwpAddGridPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpAddGridSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpAddLevelPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpAddLevelSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpCopyFloorInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpCopyRoofInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpCopyWallInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CwpLinkedRoomParams) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CwpLinkedRoomPhases) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CwpReuseExistingGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpReuseExistingLevels) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpReuseGridsSameName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpReuseLevelsSameName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpSplitColumnsAtLevels) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumBubbleEndn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumBubbleEndn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumBubbleLocationInElev) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumPlaneDefinesOrigin) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumPlaneDefinesWallClosure) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DatumVolumeOfInterest) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoBoolean) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoDouble) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoEnum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoInteger) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DecalAttributes) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DecalHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DecalLockProportions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DecalSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DecalWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionExtWallUnderground) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassExteriorWall) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassFloor) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassGlazing) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassInteriorWall) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassOpening) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassRoof) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassShade) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassSkylight) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassSlab) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultViewTemplate) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefinesConstantHeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DesignOptionId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DesignOptionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DiameterSymbolLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DiameterSymbolText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DimDisplayEq) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimIsreporting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLabel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimLabelGpShow) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLabelIsInstance) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLeaderArrowhead) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimLeaderDisplayCondition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLeaderShoulderLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimLeaderType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimNotModifiable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DimReferenceCount) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimStyleAngularUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleAngularUnitsAlt) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleCenterlinePattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleCenterlineSymbol) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleCenterlineTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleDimLineSnapDist) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimStyleFlippedDimLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimStyleInteriorTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleLeaderTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleLinearUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleLinearUnitsAlt) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleReadConvention) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimStyleShowOpeningHt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimStyleSuppressSpaces) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DimTextBackground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimTextLocationForLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToInsertType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToIntersectingGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToIntersectingWalls) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimTotalLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimValueAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimValueLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimWitnsLineCntrl) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimWitnsLineExtensionBelow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dApplicationId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dLoaded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dServerId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dSourceId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DisplacedElementDisplacementX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DisplacedElementDisplacementY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DisplacedElementDisplacementZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DisplacementPathDepth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DisplacementPathStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DistanceToCutMark) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceAllGridRotation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceAllPoints) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceComponentTrimType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceCoverFaceCompletely) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayComponents) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayDiscardeddivisionlines) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayGridlines) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayNodes) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayOriginalSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayPatternFill) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayPatternLines) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplaySurfaceOption) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceEdgeNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceFacetNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceGridOptionParamn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceGridOptionParamn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceGridlinesStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceOffsetFromSurface) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceOriginalSurfaceMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternFillMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternFlip) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternIndentn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternIndentn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternLinesStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternMirror) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternRotationAngle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePointNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceRule1Suspension) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceRule2Suspension) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceTileBorder) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceTotalEdgeLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathBeginningIndent) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathDisplayNodeNumbers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathDisplayNodes) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathDisplayReferenceCurves) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathEndIndent) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathFlipDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathLayout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathLayoutFixedNumPoint) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathMaxDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathMeasurementType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathMergedPointNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathMinDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathTotalPathLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DivisionPattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DivisionProfileWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DivisionRuleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DivisionSketchCurveDivisionParamsOverrideParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.DivisionSketchCurveExtentdToSilhParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DoorConstructionType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorCost) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DoorEvacuationExitType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DoorFinish) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorFrameMaterial) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorFrameType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorOperationType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartAreaComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartBaseLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DpartBaseLevelByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartCanHostRebar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartExcluded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartHeightComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartLayerConstruction) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartLayerFunction) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartLayerIndex) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartLayerWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartLengthComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartMaterialByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartMaterialIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalCategory) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalCategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalFamily) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartPhaseCreatedByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartPhaseDemolishedByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartShapeModified) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartVolumeComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DrawForEachRun) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DuctTerminalEngagementLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EdgeLinework) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.EditedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElecticalEquipVoltage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElecticalEquipWattage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElemCategoryParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemCategoryParamMt) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemDeletableInFamily) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemFamilyAndTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemFamilyParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemIsReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemPartitionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemReferenceName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemReferenceName2dXz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemRoomId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemRoomName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElemRoomNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElemTypeLabel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElementIsCutting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElementLockedParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevArrowAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ElevArrowFilled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevAssocDatum) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElevReferenceLabelPos) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevShowViewName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevSymbolId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElevTextPos) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevViewNamePos) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ElevatnTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.EllipseFocusMrkVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EllipseXParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EllipseYParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EndExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EndJoinCutback) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EndTreatment) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EndYJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EndYOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EndZJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EndZOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisAdvancedOptions) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisBuildingOperatingSchedule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisConceptualConstruction) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisCreateAnalyticalModel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisGlazingIsShaded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisHorizontalVoidThreshold) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisHvacSystem) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMassZoning) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMasszoneCoreoffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMasszoneDivideperimeter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMasszoneUseenergydatasettings) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisOutdoorAirInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisPercentageGlazing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisPercentageSkylights) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisProjectPhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisShadeDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisSillHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisSkylightWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisSpaceBoundingParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisVerticalVoidThreshold) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EqualityFormula) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EqualityTextForAngularDim) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EqualityTextForContinuousLinearDim) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EqualityWitnessDisplay) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ExtrusionAutoParams) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ExtrusionEndParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ExtrusionLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ExtrusionStartParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricParamCoverOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutByHost) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutOverallLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutOverallWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutSheetMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamLapsplicePosition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamLocationGeneric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamLocationSlab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamLocationWall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamMajorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamMinorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamRounding) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FabricParamSharedFamilyKey) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricParamSheetType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanTagComponentReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamTagView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricParamTotalSheetMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetDefaultMajorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetDefaultMinorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorDirectionWireType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorEndOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorLayoutPattern) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorNumberOfWires) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorReinforcementArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorStartOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMassunit) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorDirectionWireType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorEndOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorLayoutPattern) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorNumberOfWires) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorReinforcementArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorStartOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetOverallLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetOverallWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetPhysicalMaterialAsset) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricSheetWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricationBottomElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationBottomElevationOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationBottomOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationChangeServiceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FabricationDoublewallMaterialAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationEndOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationEndSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationFittingDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationMaterialFinish) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationSpec) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationSpecificationAbbreviation) {
                return StorageType.String;
            }

            if(forgeTypeId == ParameterTypeId.FabricationLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricationMaterialAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartAlias) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartAngleOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartBoughtOut) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartCutType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthIn) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthInOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthOut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthOutOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterIn) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterInOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterOut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterOutOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDoublewallMaterial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDoublewallMaterialArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDoublewallMaterialThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartInsulationArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartItemNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartLengthOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartLiningArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartMaterial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartMaterialThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartNotes) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartPatNo) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartSheetmetalArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartTakeoffDialogParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthIn) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthInOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthOut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthOutOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPipeInvertElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationProductCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataFinishDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataInstallType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataItemDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataLongDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataMaterialDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataOem) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataProduct) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataRange) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataSizeDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataSpecification) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductEntry) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationRelativeFilename) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationRoutingSolutionsUiParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationServiceAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationServiceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationServiceParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationSetUpDownTag) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationSetUpDownTagFromBottom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationSlopeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationSpecification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationSpecificationAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationStartOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationTopElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationTopElevationOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationTopOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationVendor) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationVendorCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FaceroofLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FaceroofOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamProfileDefinition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamProfileUsage) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyAllowCutWithVoids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyAlwaysVertical) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyAutojoin) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyBaseLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyCanHostRebar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyCategoryPseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyContentPartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveAttachmentProportion) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstyleFor2010Mass) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisible) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisibleMinusAnalytical) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisiblePlusStickSym) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisiblePlusStickSymMinusAnalytical) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.FamilyElectricalMaintainAnnotationOrientation) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.FamilyElemSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyEnableCuttingInViews) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyExportAsGeometry) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyFreeinstDefaultElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyHostingBehavior) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyIsElevationMarkBody) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyIsParametric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyKeepTextReadable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyKeyExtParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyKeywordProtected) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyLineLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyNamePseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyRenderingType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyRfaPathPseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyRotateTextWithComponent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyRotateWithComponent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyRoughHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyRoughWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyRoundconnectorDimensiontype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyShared) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyStructFootingUseCapTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyStructMaterialType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilySymbolicRep) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyTopLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyUsagePseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyUsePrecutShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyWindowInsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyWorkPlaneBased) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyWpbDefaultElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FasciaDepthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FasciaMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FasciaProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FbxAssetType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightAtADistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightBallastLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightColorFilter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightDimmingLightColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightEfficacy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitCircleDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitLineLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitRectangleLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitRectangleWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitShapeVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightIlluminance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialColorCtrl) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialColorName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialColorTemperature) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialIntensity) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialIntensityInputMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightLampLumenDepr) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLampTiltLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLimunousFlux) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLimunousIntensity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLossFactorCtrl) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightLossFactorMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightLumenaireDirt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometricFile) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometricFileCache) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometrics) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometricsFam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FbxLightSourceDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSourceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSpotBeamAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSpotFieldAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSpotTiltAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSurfaceLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightTemperatureLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightTotalLightLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightVoltageLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightWattage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FillPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FillPatternIdParamNoNo) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FilledRegionMasking) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FireRating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FixedRotation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FlexibleInstanceFlip) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FloorAttrDefaultHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorAttrDefaultThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorAttrThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorHeightabovelevelParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorParamIsStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FloorParamSpanDirection) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FollowSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ForegroundAnyPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ForegroundDraftPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ForegroundPatternColorParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FramingLengthRoundoff) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FunctionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GbxmlEditDataParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GenericDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GenericZoneName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GeoLocation) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GeomVisibilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptions) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsBackground) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsFog) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsLighting) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsPhotoExposure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsShadows) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsSketchyLines) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsSsIntensity) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GridBankColNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBankColWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GridBankRowHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GridBankRowNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBubbleEndn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBubbleEndn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBubbleLinePen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentPattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentWeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentPattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentWeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentsLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GridHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GridNetLocationMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GridlineSpecStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GroupAllowedViewTypes) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GroupAttachedParentName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GroupLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GroupOffsetFromLevel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GroupnameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GuideGridNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GuideGridSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GutterMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GutterProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.HandrailHandClearanceParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailProjectionParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsLayoutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsNumberParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.HeadOnPlacementMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HeavyEndPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HeavyTickMarkPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HostAreaComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HostIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.HostPanelScheduleAsPanelParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HostPerimeterComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HostSseCurvedEdgeConditionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HostVolumeComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.IconIndexParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.IdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.IfcApplicationName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcApplicationVersion) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcBuildingGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcOrganization) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcProjectGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcSiteGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcTypeGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtComponentsDesc) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityRoll) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityStructType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityStyle) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportBackground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ImportBaseLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ImportBaseLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportDisplayUnits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ImportInstanceScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportSymbolName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentDisplayedEndStation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentDisplayedStartStation) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InsertOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceElevationParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceFreeHostOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceFreeHostParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InstanceHeadHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceMoveBaseWithGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceMoveTopWithGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceMovesWithGridParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceOffsetPosParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceReferenceLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.InstanceScheduleOnlyLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.InstanceSillHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceStructUsageParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InsulationScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InsulationWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InteriorTickDisplay) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.IsVisibleParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoinStrengthOrder) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemClearSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemElemTagNewMembersView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.JoistSystemFixedSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemLayoutRuleParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemMaximumSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNewBeamTypeNoFamNameParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNewBeamTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNumBeamsSameType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNumberOfLinesParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.KeepReadable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.KeySourceParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeyValue) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeynoteNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeynoteParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeynoteText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LayoutnodeCurvetypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LeaderArrowWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LeaderArrowhead) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LeaderLeftAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LeaderLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LeaderOffsetSheet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LeaderRightAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LegendComponent) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LegendComponentDetailLevel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LegendComponentLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LegendComponentView) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelAttrRoomComputationAutomatic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelAttrRoomComputationHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataFloorArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataFloorPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassFamilyAndTypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassFamilyParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassInstanceComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassTypeComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassTypeDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassTypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataOwningLevel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataSpaceUsage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelElev) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LevelIsBuildingStory) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelIsGroundPlane) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelIsStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LevelRelativeBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelRoomComputationHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelUpToLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LightingFixtureLamp) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LightingFixtureLightEmitter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LightingFixtureWattage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LineColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LinePattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LinePen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LineShapeAtCorner) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LinearDimType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadAllNon0Loads) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadAreaArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFx1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFx2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFx3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFy1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFy2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFy3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFz1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFz2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFz3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaIsProjected) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadArrowSeparation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrAreaForceScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrForceArrowType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadAttrForceScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrLinearForceScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrMomentArrowArc) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadAttrMomentArrowLine) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadAttrMomentScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadCaseId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCaseName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadCaseNature) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCaseNatureText) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCaseNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadCaseSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCombinationFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadCombinationName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadForceFx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadForceFy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadForceFz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadIsCreatedByApi) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsHosted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsProjected) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsReaction) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsUniform) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFx1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFx2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFy1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFy2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFz1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFz2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMx1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMx2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMy1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMy2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMz1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMz2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadNatureName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadUsageName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadUseLocalCoordinateSystem) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LockAlignmentUiToggle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LockedBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LockedEndOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LockedStartOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LockedTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LvMullionLeg1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LvMullionLeg2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MarkupsCreated) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsCreator) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsHistory) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsLabel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsModified) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsNotes) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsPrivate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataConceptualConstruction) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassDataGlazingIsShaded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataMassExteriorWallArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassInteriorWallArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassOpeningArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassRoofArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassSkylightArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassWindowArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataPercentageGlazing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataPercentageSkylights) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataShadeDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataSillHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataSkylightWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataSlab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassDataSurfaceDataSource) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataUnderground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassFloorAreaLevels) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.MassGrossArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassGrossSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassGrossVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassSurfacedataMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassZoneConditionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassZoneFloorArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassZoneMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassZoneSpaceTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassZoneVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassingIntegrationLevel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MatchlineBottomOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MatchlineBottomPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MatchlineTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MatchlineTopPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MaterialArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MaterialAspaint) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamAssetLibId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamCommonSharedAsset) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamExternalMaterialId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamSource) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamSourceUrl) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MaterialName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialParamColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamGlow) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamShininess) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamSmoothness) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamTransparency) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MeasureFromStructure) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetOnDuty) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetOnStandby) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAirloopFantype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAirloopHeatexchangerType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAirloopPreheatCoiltype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalCriticalpathParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalEquipmentName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalLoopBoundaryParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalLoopName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalPipeDesignflow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MepChilledWaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepCondenserWaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepCoolingCoilType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepElecZoneEquipmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepEquipmentCalcPipingflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MepEquipmentCalcPipingpressuredropParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MepEquipmentClassification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepHeatingCoilType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepHeatingHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepIgnoreFlowAnalysis) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepPreheatHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepProfileTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepReheatCoilType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepReheatHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepSystemFillGraphicsOverridesParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.MepSystemLineGraphicsOverridesParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.MepVrfLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepWaterloopChillertype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepWaterloopType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneAirLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipment) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipmentBehavior) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipmentDrawVentilation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ModelCategoryIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ModelGraphicsStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ModelGraphicsStyleAnonDraft) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ModelOrSymbolic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ModelTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MovesWithGridParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MullionAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionCornerType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MullionDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionDepth1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionDepth2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionFamType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MullionOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionPosition) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MullionProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationDimensionStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationGroupTagHeads) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationReferenceCategory) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationShowDimensionText) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationTagType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MultipleAlignmentUiToggle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MultistoryStairsActualTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MultistoryStairsRefLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.NodeConnectionStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberPartitionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.NumberSystemDisplayRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemJustify) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemJustifyOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.NumberSystemOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemReferenceOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.NumberSystemTagType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ObjectStyleMaterialIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.OffsetfacesShowShapeHandles) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.OmniclassCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OmniclassDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OptionName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OptionSetId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.OptionSetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OrdinateDimSetting) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.OrientByView) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PaddingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PanelScheduleName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PartMakerDivisionProfileOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfileEdgeMatch) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfileFlipAcross) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfileFlipAlong) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PartmakerParamDivisionGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelFromRoom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelLevelName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelSpeed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelTime) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelToRoom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelViewName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathReinAddlOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinAltOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinAlternating) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient1Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient1Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient2Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient2Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookTypen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookTypen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinEndSpanhookAlt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndSpanhookPrim) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinFaceSlab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinFaceWall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient1Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient1Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient2Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient2Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookTypen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinHookTypen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinLengthn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinLengthn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinNumberOfBars) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinShapen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinShapen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanhookAlt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanhookPrim) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthAltOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBarlengthAlt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBarlengthPrim) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBottomAlt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBottomPrim) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthTopAlt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSummary) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathReinTypen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinTypen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PatternIndent1ForDivisionRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PatternIndent2ForDivisionRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PatternMirrorForDivisionRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PeakAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PeakCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PeakHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PeakLatentCoolingLoad) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhaseCreated) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PhaseDemolished) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PhaseName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhaseSequenceNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamAverageModulus) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamBehavior) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamBending) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamBendingReinforcement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamClass) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamCompressionParallel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamCompressionPerpendicular) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamConcreteCompression) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeffn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeffn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamFivepercentModulusOfElacticity) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamLightWeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamMinimumTensileStrength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamMinimumYieldStress) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod12) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod23) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamReductionFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamResistanceCalcStrength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod12) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearParallel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearPerpendicular) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearReinforcement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearStrengthReduction) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamSpecies) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamStructuralDensity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamStructuralSpecificHeat) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamStructuralThermalTreated) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamSubclass) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamTensionParallel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamTensionPerpendicular) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivityX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivityY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivityZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamUnitWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamWoodConstruction) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungModn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungModn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialProperties) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PipingConnectionType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PipingGenderType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlanRegionViewRange) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PlanViewCutPlaneHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PlanViewLevel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlanViewNorth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlanViewRange) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PlanViewTopClipHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PlanViewViewDir) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesCwConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesDrain) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesHwConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesSupplyFitting) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesSupplyPipe) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesTrap) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesVentConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesWasteConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PocheMatId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveConstrained) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveNumParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveOrientationType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveShowNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementChordLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementDriven) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementDriving) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementHostedOnFaceUParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementHostedOnFaceVParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementHostedParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementMeasureFrom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementMeasurementType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementMirrored) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementNonNormalizedCurveParamater) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementNormalizedCurveParamater) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementNormalizedSegmentLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementRotationAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementSegmentLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementShowNormalPlaneOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementShowPlanes) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementZflipped) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleConstrained) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleNumParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleOrientationType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleShowNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PointVisibilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointcloudinstanceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PointcloudtypeScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PreferDimSideUiFilter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PrimaryOptionId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.Profile1Angle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile1FamType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.Profile1FlippedHor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.Profile1OffsetX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile1OffsetY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile2Angle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile2FamType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.Profile2FlippedHor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.Profile2OffsetX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile2OffsetY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileFamType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ProfileFamTypePlusNone) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ProfileFlippedHor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProfileOffsetX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileOffsetY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileParamAlongPath) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProjectAddress) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectAuthor) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectBuildingName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectBuildingType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ProjectIssueDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectOrganizationDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectOrganizationName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectPostalCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionEnumeration) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionIssued) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionIssuedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionIssuedTo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionNum) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionSequenceNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProjectStatus) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectedSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertyArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertyAreaOpen) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertyAreaUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PropertyLengthUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentBearing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentEW) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentLR) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentNS) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PropertySetDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySetKeywords) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySetMaterialAspect) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PropertySetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RadialArrayArcRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RadiusSymbolLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RadiusSymbolText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsLatteralOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsPositionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHasTopRail) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsLatteralOffset) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsPositionParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsTypesParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.RailingSystemTopRailHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemTopRailTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RampAttrLeftBalusterAttachPt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RampAttrMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RampAttrMinInvSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RampAttrRightBalusterAttachPt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RampAttrShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RampAttrTextFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RampAttrTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RampAttrThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RampMaxRunLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterEnableSnaps) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterHorizontalScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterLockProportions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSheetheight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSheetwidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolFilename) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolLinkloadStatus) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolPagenumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolPixelheight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolPixelwidth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolResolution) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolViewname) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterVerticalScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsAdditionalFlow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsAdjustableConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsBuildingConstructionclass) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsBuildingUseloadcredits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayBendradius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayRungheight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayRungspace) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayRungwidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayShapetype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitBendorfitting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitConnectorelemType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitSystemType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitrunLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayrunHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayrunWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCalculatedSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsComponentClassificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsConduitBendradius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitInnerDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitOuterDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitTradesize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsConduitrunDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitrunInnerDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitrunOuterDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConnectorDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsConnectorIsprimary) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsConnectorOffsetObsolete) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConstructionSetParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsConstructionTypeShadingfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCtcBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCtcServiceType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsCtcTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveHorOffsetParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCurveSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveUtslope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveVertOffsetParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCurveWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultBendParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultCapParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultCrossParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultElbowParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultElbowdownParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultElbowupParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultHorizontalBendParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultMechjointParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTakeoffParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTeeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTeedownParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTeeupParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTransitionParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultUnionParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMaxHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMaxWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMultishapeTransitionOvalroundParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMultishapeTransitionParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMultishapeTransitionRectovalParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypePreferredBranchParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeRoughnessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysConfigParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysNumwiresParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysPhaseParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysVlgParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysVllParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsDuctBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctCalculatedSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctConnectorSystemClassificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFittingLossMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFittingLossMethodServerParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFittingLossMethodSettings) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFlowConfigurationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFlowDirectionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFlowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctPipeSystemAbbreviationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctPressureDrop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctRoutingPreferenceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSizeFormattedParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctStaticPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSystemCalculationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSystemTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsDuctTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecAmbientTemperature) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalLoadDensity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalLoadNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalLoadTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentPhaseaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentPhasebParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentPhasecParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoad) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhase1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhase2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhase3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecBalancedLoad) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCalcCoefficientUtilization) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitConnectionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitFrameParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNaming) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNamingIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNotesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNumberOfElementsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNumberingType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPanelParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPathModeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPathOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPrefixSeparator) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitSlotIndex) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitStartSlot) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumGroundsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumHotsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumNeutralsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumRunsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireSizeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecDemandfactorDemandloadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecDemandfactorLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecDemandfactorLoadclassificationParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodeSupplyFrom) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodeSupplyFrom1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodeSupplyFrom2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecEditCircuitNamingSettingsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsElecEnclosure) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadClassification) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryConnectedCurrentParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryConnectedLoadParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandCurrentParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandFactorParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandFactorRuleParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandLoadParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryLoadclassificationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecMains) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecMaxPoleBreakers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecModifications) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecMounting) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecNumberOfCircuits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecNumberOfPoles) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitApparentLoadPhasea) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitApparentLoadPhaseb) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitApparentLoadPhasec) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitCurrentPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitCurrentPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitCurrentPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBussingParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelConfigurationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelCurrentPhaseaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelCurrentPhasebParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelCurrentPhasecParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsApparentLoadPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsApparentLoadPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsApparentLoadPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsCurrentPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsCurrentPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsCurrentPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelGroundBusParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelLocationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelMainstypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelMcbRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNeutralBusParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNeutralRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNumphasesParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNumwiresParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelScheduleFooterNotesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelScheduleHeaderNotesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelSubfeedLugsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelSupplyFromParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalConnectedCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalDemandCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalDemandFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadHvacParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadLightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadOtherParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadPowerParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadHvacParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadLightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadOtherParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadPowerParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPowerFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPowerFactorState) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomAverageIllumination) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomCavityRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomLightingCalcLuminaireplane) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomLightingCalcWorkplane) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomReflectivityCeiling) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomReflectivityFloor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomReflectivityWalls) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecShortCircuitRating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecSwitchIdParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentPhaseaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentPhasebParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentPhasecParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoad) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhase1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhase2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhase3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecVoltage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecVoltageDropParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireCircuits) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireGroundAdjustment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireHotAdjustment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireNeutralAdjustment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireShareGround) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireShareNeutral) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireTickmarkState) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElectricalData) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEndLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEndOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeAnalyticalGridCellSize) {
                return StorageType.Double;
            }

            if(forgeTypeId ==
               ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeAnalyticalSpaceIdentificationResolution) {
                return StorageType.Double;
            }

            if(forgeTypeId ==
               ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeAnalyticalSurfaceIdentificationResolution) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeDeterminationParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisExportCategoryParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisExportComplexityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisExportGbxmlDefaultsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisGroundPlaneParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisIncludeThermalProperties) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisProjectPhaseParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceAdjacentSpaceId1) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceAdjacentSpaceId2) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceAzimuth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceCadobjectid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceOriginX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceOriginY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceOriginZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceTilt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewBuildingShellMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewCoordAxisMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewInnerShellMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewOuterShellMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewRbeMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewShadingSurfacesMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewSurfacesMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewTransparentMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewUpdateSurfaces) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsEqDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentAnnotationDisplay) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentDistributionSystem) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentOffsetHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentOffsetWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentSecondaryDistribsys) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentTakeoffFixedLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentTakeoffLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentTakeoffProjlength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFlexDuctTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFlexPatternParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFlexPipeTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFlexductRoundtypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFlowFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFlowObsolete) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerCoverageParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerKFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerOrificeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerOrificeSizeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerPressureClassParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerResponseParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerTemperatureRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFriction) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlOpeningType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlSurfaceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlSurfaceType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadDoorAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadDoorCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadFloorAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadPartitionAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadPartitionCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadPlenumCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadRoofAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadRoofCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadSkylightAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadSkylightCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWallAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWallCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWindowAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWindowCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHydraulicDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationLiningVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationThicknessForDuct) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationThicknessForPipe) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsIsCustomFitting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsLiningThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsLiningThicknessForDuct) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsLoadSubClassificationMotor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsLookupTableName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsLossCoefficient) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsMaxFlow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsMinFlow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPanelScheduleSheetAppearanceInstParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsPanelScheduleSheetAppearanceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsHorizontalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsHorizontalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsVerticalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsVerticalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesHorizontalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesHorizontalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesVerticalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesVerticalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeAdditionalFlowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeCalculatedSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeClassParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeConnectiontypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeConnectorSystemClassificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeCwfuParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossKfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossMethodServerParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossMethodSettings) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossTableParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFixtureUnitsParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowConfigurationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowDirectionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowStateParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidDensityParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidTemperatureParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidViscosityParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFrictionFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFrictionParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeHwfuParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeInnerDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeInsulationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeInvertElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeJointtypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeOuterDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipePressuredropParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeRelativeRoughnessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeReynoldsNumberParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeRoughnessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSegmentParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSizeFormattedParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSizeMaximum) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSizeMinimum) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSlopeDefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSlopeOptionsDefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeStaticPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSystemCalculationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSystemFixtureUnitParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeFittingLossKfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeFittingLossMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeFittingLossTableParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeValveLossCvfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeValveLossCvfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeVelocityParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeVolumeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeWfuParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipingSystemTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPressureDrop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsProjectConstructionTypeShadingfactorParam) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsProjectLocationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsProjectReporttypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceFreesize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceInsulationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceInsulationType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceLiningThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceLiningType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceOverallsize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReynoldsnumberParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsRoomCoefficientUtilization) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsRoutingPreferenceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsSection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSegmentDescriptionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsServiceTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsShowProfileType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSizeLock) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsStartLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsStartOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsSystemAbbreviationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemBaseElementParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemClassificationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemFlowConversionMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemNumElementsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1linedropsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1linerisesymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1lineteedownsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1lineteeupsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop2linedropsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop2linerisesymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedropParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsVelocity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVelocityPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVoltagetypeMaxvoltageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVoltagetypeMinvoltageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVoltagetypeVoltageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsWireCircuitDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireCircuitLoadName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireConduitTypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireInsulationParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsWireMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsWireMaxConductorSizeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireNeutralIncludedInBalancedLoadParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsWireNeutralModeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsWireNeutralMultiplierParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsWireNumConductorsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsWireTemperatureRatingParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarBarDeformationType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarBarDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarBarHookLengths) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarBarMaximumBendRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarBarStirrupBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarBarStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarContainerBarType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarDistributionType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemBarSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarElemEndtreatmentEnd) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemEndtreatmentStart) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookEndOrient) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookEndType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookStartOrient) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookStartType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemHostMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarElemLayoutRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarElemQuantityOfBars) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemScheduleMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarElemTotalLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarElementRounding) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarElementVisibility) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarFreeFormHookEndPlaneAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarFreeFormHookStartPlaneAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarGeometryType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarHookAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookLengthOverride) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarHookLineLenFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtEnd) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtEndSchedulesTagsFilters) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtStart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtStartSchedulesTagsFilters) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RebarHookStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarHostCategory) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarIncludeFirstBar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarIncludeLastBar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceBarDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceBarModelDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceStirrupTieAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarArcConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarDuplicate) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarEndConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarStartConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarMaxLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarMaximSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarMinLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarMinimSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarModelBarDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarModifiedSet) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarNumberSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarQuanityByDistrib) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShape) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeAllowedBarTypes) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndHookLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndHookOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndtreatmentEndType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndtreatmentStartType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookEndType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookRotationAtEnd) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookRotationAtStart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookStartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeImage) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeOutOfPlaneBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeParamEndHookTanLen) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeParamStartHookTanLen) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralBaseFinishingTurns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralPitch) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralTopFinishingTurns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeStartHookLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeStartHookOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeStirrupTieAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarStandardBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarStandardHookBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBackDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBackDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveFrontDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveFrontDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlBottomOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlExteriorOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlInteriorOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBackDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBackDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDir1Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDir2Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeFrontDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeFrontDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDir1Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDir2Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBottomMajorMatchesBottomMinor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemCoverBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemCoverSide) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemCoverTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBackDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBackDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBottomDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientFrontDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientFrontDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientTopDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBackDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBackDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBottomDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBottomDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeFrontDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeFrontDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeTopDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeTopDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir1NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir1WithSpacing) {
                return StorageType.String;
            }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir2NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir2WithSpacing) {
                return StorageType.String;
            }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir1NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir1WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir2NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir2WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryNoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir1NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir1WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir2NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir2WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryWithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayoutRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBackDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBackDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesFrontDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesFrontDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemOverride) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBackDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBackDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDir1Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDir2Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingFrontDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingFrontDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDir1Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDir2Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanactiveDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanactiveDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookLeftDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookRightDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemTopMajorMatchesBottomMajor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemTopMajorMatchesTopMinor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemTopMinorMatchesBottomMinor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarWorkshopInstructions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RectMullionThick) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RectMullionWidth1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RectMullionWidth2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RefTableElemName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RefTableParamName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ReferenceLineSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceOtherViewUiRefView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceOtherViewUiToggle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerAttrTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerTargetView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerUiTargetFilter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerUiTargetView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferencedView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReinEstBarLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ReinEstBarVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ReinEstNumberOfBars) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ReinforcementVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RelatedToMass) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RenderPlantHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RenderPlantName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RenderPlantTrimHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RenderRpcFilename) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RenderRpcProperties) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailElement) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailInside) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailLayout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailRotation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RevealProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevision) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionIssuedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionIssuedTo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionNum) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevolutionEndAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RevolutionStartAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RgbBParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RgbGParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RgbRParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofAttrDefaultThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofAttrThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoofConstraintLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoofConstraintOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofCurveHeightAtWall) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofCurveHeightOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofCurveIsSlopeDefining) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofEaveCutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofFacesLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofRafterOrTrussParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoofUptoLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofUptoLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomActualExhaustAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualLightingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualLightingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualPowerLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualPowerLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualReturnAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomAirChangesPerHourParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomAreaPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomBaseHeatLoadOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomBaseLightingLoadOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomBasePowerLoadOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomBaseReturnAirflowOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedCoolingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedHeatingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedSupplyAirflowPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculationPoint) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomComputationHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomComputationMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomConditionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomConstructionSetParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomDepartment) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomDesignCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignExhaustAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignLightingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignLightingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignMechanicalLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignOtherLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignPowerLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignPowerLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignReturnAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomEditElectricalLoadsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoomEditPeopleLoadsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoomFinishBase) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomFinishCeiling) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomFinishFloor) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomFinishWall) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomLevelId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomLightingLoadUnitsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomLowerOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomNumberOfPeopleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOccupancy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomOccupancyUnitParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirInfoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirflowStandardParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomPeopleLatentHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPeopleSensibleHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPeopleTotalHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomPhaseId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomPlenumLightingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPowerLoadUnitsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomSpaceTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomTagOrientationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomUpperLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomUpperOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RouteAnalysisSettingsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoutingPreferenceParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RvtHostLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RvtLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RvtLinkFileNameWithoutExt) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RvtLinkInstanceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RvtLinkPhaseMap) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RvtLinkReferenceType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RvtSourceLevel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ScheduleBaseLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ScheduleBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleCategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleEmbeddedParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleFieldsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleFilterParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleFormatParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleGroupParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleSheetAppearanceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleTopLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ScheduleTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleTypeForBrowser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionAttrHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SectionAttrTailLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SectionAttrTailTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SectionAttrTailWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SectionBrokenDisplayStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionCoarserScalePulldownImperial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionCoarserScalePulldownMetric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionParentViewName) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SectionShowInOneViewOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SeekItemId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SelectionEditableOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetApprovedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyAssemblyCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyAssemblyDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyCost) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyKeynote) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyManufacturer) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyModel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyTypeComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyTypeMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyUrl) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCheckedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevision) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionIssued) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionIssuedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionIssuedTo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetDesignedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetDrawnBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetFilePath) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetGuideGrid) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SheetHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SheetIssueDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetKeyNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetRevisionsOnSheet) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SheetScale) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetScheduled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ShowArrowheadToCutMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ShowIconParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ShowTitle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SketchGridSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SketchPlaneParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SlabEdgeMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlabEdgeProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnBaseCutStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnBaseExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnGeometryTreatmentBase) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnGeometryTreatmentTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnTopCutStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnTopExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlopeArrowLevelEnd) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlopeArrowLevelStart) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlopeEndHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SlopeStartHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAirChangesPerHour) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAirflowPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAreaPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAssocRoomName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpaceAssocRoomNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpaceCarpetingParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpaceCoolingSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceDehumidificationSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceElecEquipmentRadiantPercentageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceHeatingSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceHumidificationSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceInfiltrationAirflow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceInfiltrationAirflowPerArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceInfiltrationParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceIsOccupiable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpaceIsPlenum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpaceLightingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceLightingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceLightingScheduleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceOccupancyScheduleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceOutdoorAirflow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceOutdoorAirflowPerArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceOutdoorAirflowPerPerson) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePeopleLatentHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePeopleLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePeopleSensibleHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePowerLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePowerLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePowerScheduleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceReferenceLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceZoneName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpanDirInstParamAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrCurrentName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendHorOriginGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendShowConfigName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendShowDescription) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendTextType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendVertOriginGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrRange) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrResultsVisibility) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpecifySlopeOrOffset) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateBase) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateBottomPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateBottomSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateElevationPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateElevationSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateIncludeElevation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateTopPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateTopSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotDimLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotDimLeaderLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotDimStyleSlopeUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpotDimStyleSlopeUnitsAlt) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpotElevBase) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevBendLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevBotValue) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevDisplayElevations) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevFlipTextVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndBottom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndElevation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndEw) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndNs) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTop) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTypeBottom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTypeElevation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTypeTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevLeaderArrowhead) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpotElevLinePen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevLowerPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevLowerSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevLowerValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotElevRelativeBase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpotElevRotateWithComponent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevSingleOrUpperPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevSingleOrUpperSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevSingleOrUpperValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotElevSymbol) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpotElevTextHorizOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotElevTextLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevTextOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevTickMarkPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevTopValue) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeLeaderLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeOffsetFromReference) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotSlopePrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeSlopeDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeSlopeRepresentation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotTextFromLeader) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsActualNumRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsActualNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsActualRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsActualTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrBodyMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrBreakSymInCutline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrCalcEnabled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrCalcMax) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrCalcMin) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrEqResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrFirstRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLandingCarriage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLandingsOverlapping) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLastRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLeftSideStringer) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrMaxRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrMinimumTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrMonolithicStairs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrNosingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrNosingPlacement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrNumMidStringers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRightSideStringer) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserMult) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserTreadConnect) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRisersPresent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrSideStringerTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStairCalculator) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStairsBottom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStairsCutOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerCarriage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTextFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadFrontProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadMult) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTrimTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsBaseLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsCurveType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowAnnotationCutMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowBoundary2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowBoundary3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLandingBoundary) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLandingFaces) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLandingPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLeftRunBoundary2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLeftRunBoundary3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowMonolithicSupportCorseGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowMonolithicSupportGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRightRunBoundary2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRightRunBoundary3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunCorseGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunOutlineForPlan) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunPath2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunPath3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowSupportPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowTreadFaces) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowTriserCorseGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowTriserGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDesiredNumRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDesiredNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDownText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsEnableCalculationRuleChecking) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstAlwaysUp) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstDownArrowOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstDownLabelOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstDownLabelText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsInstUpArrowOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstUpLabelOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstUpLabelText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsLandingBaseElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsLandingOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsLandingStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsLandingThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeHasMonolithicSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeLandingMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeStructure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeUseSameTriserAsRun) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsMinAutomaticLandingDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsMultistoryTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsMultistoryUpToLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsPathFullStepArrow) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsPathStartExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsPathStartFromRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingAngledConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterBottomAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterFamily) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterIsPost) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterPlacement) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterSlopeAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterSpacingType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterTopAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalustersPerTread) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsRailingConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeightOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeightShiftType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeightShiftVal) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingPlacementOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailStructure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsRailingShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingTangentConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualNumberOfTreads) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualRunWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunBeginWithRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunCcw) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunCenterMarkVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunCreateAutoLanding) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunEndWithRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunExtendBelowRiserBase) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunExtendBelowTreadBase) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunLocationpathJustfication) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunWidthMeasurement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunWinderBeginWithStraight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunWinderEndWithStraight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeHasMonolithicSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeRunMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeStructuralDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeStructure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeTotalDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeUndersideSurfaceType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsShowDownText) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsShowUpText) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsStairsHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsStringersPresent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportHorizontalOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupportLandingsupportType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportLowerEndCut) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportTrimSupportUpper) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportUpperEndCut) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportVerticalOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeFlipSectionProfile) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeSectionProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeStructuralDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeStructuralDepthOnLanding) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeStructuralDepthOnRun) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeTopsideSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeTotalDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeUndersideSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTextOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTextType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTopLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTotalNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTotalNumberOfTreads) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserIsTypeOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserNumberBaseIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserRiserMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsTriserRiserNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserTreadMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsTriserTreadNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeBackNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeFrontNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeLeftNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeNosingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeNosingPlacement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeNosingProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRightNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserIsSlanted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserTreadConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTread) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTreadMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTreadProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTreadThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsUpText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternFilletInsideCorner) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternMinimumWidthCorner) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternMinimumWidthInsideWalkline) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternNumberOfStraightStepsAtBegin) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternNumberOfStraightStepsAtEnd) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternRadiusInterior) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternStairPathOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternWinderStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleMaxResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleMinResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleRiserMultiplier) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleTargetResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleTreadMultiplier) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalculationRules) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairstypeConstructionMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCutmarkType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeGeomunjoinedEndCutStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeHasIntermediateSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeHasLeftSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeHasRightSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeIntermediateSupportType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeIsAssembledStairs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeLandingType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeLeftSideSupportType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeLeftSupportLateralOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMaximumRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMinimumRunWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMinimumTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMinimumTreadWidthInsideBoundary) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchCustomWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchHorizontalGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchVerticalGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchWidth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeNumberOfIntermediateSupports) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeRightSideSupportType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeRightSupportLateralOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeRunType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeShowCutline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeShowStairPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeShowUpdown) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeWinderStepFrontMeasurement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StartExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StartJoinCutback) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StartSymbolType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StartYJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StartYOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StartZJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StartZOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorAssembly) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorDiameter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorLength) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorStandard) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorTotalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltAssembly) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltCoating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltDiameter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltFinishCalculationAtGap) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltGripLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltGripLengthIncrease) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltInverted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltStandard) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltTotalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCoating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemContourGapWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemContourSide1dist) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemContourSide2dist) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeAroundAxis) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeAxisAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeDistanceAxis) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeWidthx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeXAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeZAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCutLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCutType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemExactWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleAlpha) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleAngle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleBackTaperThread) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDefinition) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDepthOfBoltHead) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleHeadDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleSlotDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleSlotLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleTapping) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleTappingHole) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPaintArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemParamBoringout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemParamRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternEdgeDistanceX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternEdgeDistanceY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternIntermediateDistanceX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternIntermediateDistanceY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternNumberX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternNumberY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternTotalLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternTotalWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateExactWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateJustification) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlatePaintArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateShortenAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateShortenCutstraight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateShortenSuction) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemProfileLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemProfileType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemProfileVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudDiameter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudStandard) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudTotalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShortenAngley) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShortenAnglez) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShortenReflength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldContinuous) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleEffectivethroat) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoublePrepdepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleRootopening) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleSurfaceshape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleWeldprep) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainEffectivethroat) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainPrepdepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainRootopening) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainSurfaceshape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainWeldprep) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldPitch) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldTextModule) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemXDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemYDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemZclipType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructConnectionApplyTo) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructConnectionBeamEnd) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionBeamStart) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionColumnBase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionColumnTop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionCutback) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructConnectionTypeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructFramJoinStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalBeamHorizontalProjectionPlane) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalBeamRigidLink) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalColumnHorizontalProjectionPlane) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalColumnRigidLink) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalHardPoints) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalModel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectFloorPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectMemberPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectMemberPlaneColumnBottom) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectMemberPlaneColumnTop) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalTessDeviation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalTessellate) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyzesAs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAssetParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseReferencedend) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndLevelReference) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndRefelementEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndValueDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndValueElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndValueRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartLevelReference) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartRefelementEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartValueDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartValueElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartValueRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopReferencedend) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamCutbackForColumn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEnd0Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEnd1Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndAttachmentDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndAttachmentRefcolumnEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndAttachmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartAttachmentDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartAttachmentRefcolumnEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartAttachmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBendDirAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBraceRepresentation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralCamber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionApprovalStatus) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionCodeCheckingStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionEditRangesOfApplicability) {
                return StorageType.None;
            }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionEditType) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionInputElements) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionModifyConnectionParameters) {
                return StorageType.None;
            }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionNobleStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionOverrideType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralCopingDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralDisplayInHiddenViews) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralDisplayInHiddenViewsColumn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralDisplayInHiddenViewsFraming) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtBottomCore) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtBottomSurvey) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtTopCore) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtTopSurvey) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralFamilyCodeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralFamilyNameKey) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralFloorAnalyzesAs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralFloorCoreThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFoundationLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFoundationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFoundationWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFrameCutLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralMaterialType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralMemberForces) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StructuralNumberOfStuds) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralReferenceLevelElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionBottomCutHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionBottomCutWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCantileverHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCantileverLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonAlpha) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonCentroidHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonCentroidVertical) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonElasticModulusStrongAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonElasticModulusWeakAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonMomentOfInertiaStrongAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonMomentOfInertiaWeakAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonNominalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonPlasticModulusStrongAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonPlasticModulusWeakAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonShearAreaStrongAxis) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonShearAreaWeakAxis) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonTorsionalModulus) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonTorsionalMomentOfInertia) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonWarpingConstant) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCprofileFoldLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionHssInnerfillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionHssOuterfillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacingBetweenRows) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacingTwoRows) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacingWeb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeClearWebHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangeToeOfFillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangefillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangethickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangethicknessLocation) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebToeOfFillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebfillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebheight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebthickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebthicknessLocation) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedBottomflangethickness) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedBottomflangewidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedTopflangethickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedTopflangewidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltDiameterLongerFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltDiameterShorterFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltSpacing1LongerFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltSpacing2LongerFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltSpacingShorterFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLprofileLipLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionNameKey) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionPipestandardWalldesignthickness) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionPipestandardWallnominalthickness) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSigmaProfileBendWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSigmaProfileMiddleBendWidth) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSigmaProfileTopBendWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSlopedFlangeAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSlopedWebAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionTopCutHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionTopCutWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionTopWebFillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionZprofileBottomFlangeLength) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStickSymbolLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralWallBottomProjectionPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralWallProjectionSurface) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralWallTopProjectionPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SupportHandClearance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SupportHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SurfacePerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepBaseFloorSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SweepBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepBaseRoofSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SweepBaseVertOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepMaxSegAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepTrajSegmented) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SymbolFamilyAndTypeNamesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SymbolFamilyNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SymbolIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SymbolNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SystemEquipmentSets) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SystemZoneLevelId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SystemsAnalysisReportFolder) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SystemsAnalysisReportStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TagElementCount) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagLeaderType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagNoBreakParamStrings) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagOnPlacementUi) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagOrientationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagSampleText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TagTag) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.TemplateName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TerminationExtensionLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextAlignHorz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextAlignVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextAlignment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextBackground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextBoxVisibility) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextDistToLine) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TextPosition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextStyleBold) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextStyleFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TextStyleItalic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextStyleSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextStyleUnderline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextTabSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TextWidthScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamCompressibility) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamElectricalResistivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamEmissivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamGasViscosity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamLiquidViscosity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamPermeability) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamPorosity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamReflectivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamSpecificHeatOfVaporization) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamTransmitsLight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamVaporPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TickMarkPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternFamrefComponentExtents) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridCellsX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridCellsY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridUnitX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridUnitY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TitleFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TitleSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TitleStyleBold) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TitleStyleItalic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TitleStyleUnderline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TopographyLinkName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TopographyLinkPath) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TrapMullWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussBearingChordTopBottomParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementBearingJustParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementClassParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TrussElementCreateBottomParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementCreateTopParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementEnd0Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementEnd1Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementReferenceLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussElementRotateChordsWithTruss) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementSpanParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementStickJustParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementTagNewMembersView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordStructuralTypesParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordVerticalProjectionParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebStructuralTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordStructuralTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordVerticalProjectionParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTransformationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebStructuralTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyWebsHaveSymbolicCutbackParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussNonBearingOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TypeWallClosure) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.UniformatCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.UniformatDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewAnalysisDisplayStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewAnalysisResultsVisibility) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewAssociatedAssemblyInstanceId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewBackClipping) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewCameraOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewCameraPosition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewCleanJoins) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewDependency) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewDepth) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewDesignOptionsConfig) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewDetailLevel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewDiscipline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewFamily) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewFamilyAndTypeSchedules) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewFamilySchedules) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewFixedSketchPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedBottomLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedGridAppearance) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedGroupSimilar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedHiddenLevels) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedLevelRelativeBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedLocationsHigh) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedLocationsLow) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedMaterialTypes) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedNumberColumns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedOffGrid) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedRowsCount) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedRowsFrom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTextAppearance) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTitle) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTopLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTotalColumns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTotalRows) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedUnitsFormat) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSunPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSunPathSize) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewModelDisplayMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewPartsVisibility) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewPhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewPhaseFilter) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewReferencingDetail) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewReferencingSheet) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewScale) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewScaleCustomname) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewScaleHavename) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewScalePulldownImperial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewScalePulldownMetric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewSchemaSettingForBuilding) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewSchemaSettingForSystem) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewSchemaSettingForSystemTemplate) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewSheetViewportInfo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewShowGrids) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewShowHiddenLines) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewShowMassing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewSlantedColumnSymbolOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewTemplate) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewTemplateForSchedule) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewTypeSchedules) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewUnderlayBottomId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewUnderlayOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewUnderlayTopId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewVisibleCategories) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.Viewer3dRenderSettings) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewerAnnotationCropActive) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveBottom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveFar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveLeft) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveNear) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveRight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundFarClipping) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetFar) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetNear) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerCropRegion) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerCropRegionDisabled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerCropRegionVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerDetailNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerEyeElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerIsReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerModelClipBoxActive) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerOptionVisibility) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewerPerspective) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerReferenceLabel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerReferenceLabelText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerSheetNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerShowUncropped) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerTargetElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerVolumeOfInterestCrop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrLabelTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrOrientationOnSheet) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrShowBox) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrShowExtensionLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrShowLabel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportDetailNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportScale) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportSheetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportSheetNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportViewName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsAnalyticalModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsAnnotation) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsCoordinationModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsDesignoptions) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsFilters) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsImport) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsPointClouds) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsRvtLinks) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsWorksets) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VoidCutsGeometry) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.VolumeCut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.VolumeFill) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.VolumeNet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.VolumeOfInterestName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.VolumeOfInterestViewsVisible) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.WalkthroughFramesCount) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.WallAlignKeyRefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallAttrDefheightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallAttrHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallAttrRoomBounding) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallAttrWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBaseConstraint) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallBaseHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBottomExtensionDistParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBottomIsAttached) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallCrossSection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallHeightType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallKeyRefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallLocationLineOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSingleSlantAngleFromVertical) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallStructuralSignificant) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallStructuralUsageParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.WallSweepCutByInsertsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallSweepCutsWallParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallSweepDefaultSetbackParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSweepLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallSweepOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSweepOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallSweepProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallSweepWallOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSweepWallSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallTaperedExteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTaperedInteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTaperedUseInstanceAngles) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallTaperedWidthAtBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTaperedWidthAtTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTopExtensionDistParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTopIsAttached) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTypeDefaultTaperedExteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTypeDefaultTaperedInteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTypeWidthMeasuredAt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallUserHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WindowTypeId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.WitnsLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WitnsLineGapToElt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WitnsLineTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WrappingAtEndsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WrappingAtInsertsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.YJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.YOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.YzJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneAirVolumeCalculationTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneAreaGross) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedAreaPerCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedAreaPerHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedCoolingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHeatingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHydronicCoolingflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHydronicHeatingflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedSupplyAirflowPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCoilBypassPercentageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCoolingAirTemperatureParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCoolingInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ZoneCoolingSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneDehumidificationSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneHeatingAirTemperatureParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneHeatingInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ZoneHeatingSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneHumidificationSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneLevelId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ZoneLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneLevelOffsetTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ZoneOaRatePerAchParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneOutdoorAirInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ZoneOutsideAirPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneOutsideAirPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZonePerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZonePhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ZonePhaseId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ZoneServiceTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneSpaceOutdoorAirOptionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseAirChangesPerHourParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseDehumidificationSetpointParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseHumidificationSetpointParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseOutsideAirPerAreaParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseOutsideAirPerPersonParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneVolumeGross) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ActualMaxRidgeHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelIncludeStation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelIndStation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetEndStation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetInterval) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelSetStartStation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationLabelStationValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlignmentStationSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllGridRotationForDivisionRule) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AllModelDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelImage) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AllModelInstanceComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelManufacturer) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelModel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelTypeComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllModelTypeImage) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AllModelUrl) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AllowAutoEmbed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AlternateUnits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AlternateUnitsPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlternateUnitsSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AlwaysZeroLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticConstructionGbxmlTypeid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticConstructionLookupTable) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticalAbsorptance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalDefineThermalPropertiesBy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalGeometryIsValid) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalHeatTransferCoefficient) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseRotationX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseRotationY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseRotationZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseTranslationX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseTranslationY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalLinkReleaseTranslationZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndAllNonZero) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndFx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndFy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndFz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndMx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndMy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceEndMz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartAllNonZero) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartFx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartFy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartFz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartMx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartMy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalMemberForceStartMz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseExtensionMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelBaseZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelCodeChecking) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelColumnBaseExtension) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelColumnTopExtension) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndProjectionOrthogonal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelEndZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelFloorAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelFloorProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelFoundationsMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelManuallyAdjusted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelNodesMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelPhysicalType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelRotation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelSketchAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelSketchProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartProjectionOrthogonal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStartZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelStickElementsMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelSurfaceElementsMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopExtensionMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopYProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelTopZProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallAlignmentMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallBaseProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalModelWallTopProjection) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnalyticalRoughness) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AnalyticalSolarHeatGainCoefficient) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalThermalMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalThermalResistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnalyticalVisualLightTransmittance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AnyPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AnyPatternIdParamNoNo) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ArcCenterMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArcLeaderParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArcWallCntrMrkVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AreaSchemeId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AreaSchemeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AreaType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AreaTypeText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ArrowCentered) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowClosed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowFilled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ArrowType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowheadEndAtRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ArrowheadType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AssemblyName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.AssemblyNamingCategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AssemblyPrecastFreeze) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AssignTemplateOnViewCreation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AssociatedLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AssociatedLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.AutoJoinCondition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AutoJoinConditionWall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Grid1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Grid2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Horiz) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder1Vert) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Grid1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Grid2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Horiz) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionBorder2Vert) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorGrid1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorGrid2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorHoriz) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoMullionInteriorVert) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoPanel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.AutoPanelWall) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BackgroundDraftPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BackgroundPatternColorParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BaselineDimOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointAngletonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointEastwestParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointElevationParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointLatitudeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointLongitudeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BasepointNorthsouthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamHJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BeamSystem3dParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BeamSystemTagInstParamAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamSystemTagParamLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamSystemTagParamRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BeamVJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BeamVJustificationOtherValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BentFabricParamBendDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BentFabricParamLongitudinalCutLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BentFabricParamStraightWiresLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BlendEndParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BlendStartParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryAreaRestraintX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryAreaRestraintY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryAreaRestraintZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryBearing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryConditionsIsExt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryConditionsType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionRotX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionRotY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionRotZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDirectionZ) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintRotX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryLinearRestraintZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryParamPreset) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryParamPresetArea) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryParamPresetLinear) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintRotX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintRotY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintRotZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryRestraintZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BoundaryXRotationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryXRotationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryXTranslationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryXTranslationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYRotationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYRotationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYTranslationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryYTranslationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZRotationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZRotationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZTranslationFixed) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BoundaryZTranslationSpring) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.BrOrgFilter) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.BrOrgFolders) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.BuildingClosingTimeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.BuildingCurveGstyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BuildingCurveGstylePlusInvisible) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.BuildingOpeningTimeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.BuildingUnoccupiedCoolingSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BuildingpadHeightabovelevelParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BuildingpadThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.BuilidingPadStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CabletrayMinbendmultiplierParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CalloutAttrHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CalloutCornerSheetRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CalloutSyncronizeBoundOffsetFar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CalloutTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrDefaultHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrPatternParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrSpacing1Param) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrSpacing2Param) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingAttrSystemnameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CeilingHasThicknessParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CeilingHeightabovelevelParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CeilingThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CeilingThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CenterMarkSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CircMullionRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CircuitLoadClassificationAbbreviationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CircuitLoadClassificationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CircuitPhaseParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CircuitWaysParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ClearCover) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverBottom) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverExterior) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverInterior) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverOther) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClearCoverTop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ClientName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ClineSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CoarseScaleFillPatternColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CoarseScaleFillPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ColorFillFilteredParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColorFillSwatchHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ColorFillSwatchWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ColorSchemeLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachCutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachedParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnBaseAttachmentOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ColumnLocationMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachCutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachedParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ColumnTopAttachmentOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConceptualConstructionMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ConduitStandardTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ConnectorAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorAngleOfDeflection) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorEngagementLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorGenderType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorInsideDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorJointType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorProfileType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorReferenceIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorUtilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ConnectorVisibleSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConnectorWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ConstraintFixedOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBearingWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBottomHeel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBottomToe) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingBreakAtInsertsDisable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingDefaultEndExtensionLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingEccentricity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingStructuralUsage) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingTopHeel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingTopToe) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousFootingWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailBeginningTerminationAttachmentParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.ContinuousrailBeginningTerminationTypeParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.ContinuousrailDefaultJoinTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailEndExtensionLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailEndTerminationAttachmentParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.ContinuousrailEndTerminationTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailExtensionLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailFilletRadiusParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailJoinTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailMaterialsParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailPlusTreadDepthParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailProfileTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContinuousrailTransitionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContourElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContourElevationStep) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsElevBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsLinearUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsPrimaryOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ContourLabelsRelativeBase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ContourSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CouplerCoupledBarSize) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerCoupledEndtreatment) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerCoupledEngagement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerMainBarSize) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerMainEndtreatment) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CouplerMainEngagement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CouplerNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CouplerQuantity) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CouplerWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CouplerWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CoverTypeLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CoverTypeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CurtainGridBaseOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtainVersionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CurtainWallPanelHostId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CurtainWallPanelsHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtainWallPanelsWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtainWallSyspanelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtainWallSyspanelThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBorderVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBordern1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAdjustBordern2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAngleVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAnglen1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridAnglen2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRatioU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRatioV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRation1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltRation2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridBeltn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridOriginn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDist) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurtaingridUseCurveDistn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveByPointsProjectionType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveDeterminesOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveEdgeOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcEndAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcRange) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemArcStartAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemDefinesSlope) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveElemLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveElemLineAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveHeightOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveIsDetail) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveIsFilled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveIsReferenceLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveIsSlopeDefining) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.CurveNumberOfSegments) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveParamConcreteCantilever) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveParamSteelCantilever) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveSupportOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveVisibilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CurveWallOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CurveWallOffsetRoofs) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CustMullionThick) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CustMullionWidth1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CustMullionWidth2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CutLineType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CutMarkSymbol) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CutMarkSymbolSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CwpAddGridPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpAddGridSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpAddLevelPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpAddLevelSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.CwpCopyFloorInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpCopyRoofInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpCopyWallInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.CwpLinkedRoomParams) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CwpLinkedRoomPhases) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.CwpReuseExistingGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpReuseExistingLevels) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpReuseGridsSameName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpReuseLevelsSameName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.CwpSplitColumnsAtLevels) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumBubbleEndn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumBubbleEndn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumBubbleLocationInElev) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumPlaneDefinesOrigin) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumPlaneDefinesWallClosure) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DatumText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DatumVolumeOfInterest) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoBoolean) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoDouble) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoEnum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DebugtabDataboundcontrolsdemoInteger) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DecalAttributes) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DecalHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DecalLockProportions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DecalSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DecalWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionExtWallUnderground) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassExteriorWall) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassFloor) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassGlazing) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassInteriorWall) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassOpening) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassRoof) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassShade) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassSkylight) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultConstructionMassSlab) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefaultViewTemplate) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DefinesConstantHeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DesignOptionId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DesignOptionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DiameterSymbolLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DiameterSymbolText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DimDisplayEq) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimIsreporting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLabel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimLabelGpShow) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLabelIsInstance) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLeaderArrowhead) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimLeaderDisplayCondition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLeaderShoulderLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimLeaderType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimNotModifiable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DimReferenceCount) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimStyleAngularUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleAngularUnitsAlt) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleCenterlinePattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleCenterlineSymbol) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleCenterlineTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleDimLineSnapDist) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimStyleFlippedDimLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimStyleInteriorTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleLeaderTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DimStyleLinearUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleLinearUnitsAlt) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.DimStyleReadConvention) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimStyleShowOpeningHt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimStyleSuppressSpaces) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DimTextBackground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimTextLocationForLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToInsertType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToInserts) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToIntersectingGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimToIntersectingWalls) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimTotalLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimValueAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimValueLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DimWitnsLineCntrl) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DimWitnsLineExtensionBelow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dApplicationId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dLoaded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dServerId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.Directcontext3dSourceId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DisplacedElementDisplacementX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DisplacedElementDisplacementY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DisplacedElementDisplacementZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DisplacementPathDepth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DisplacementPathStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DistanceToCutMark) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceAllGridRotation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceAllPoints) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceComponentTrimType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceCoverFaceCompletely) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayComponents) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayDiscardeddivisionlines) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayGridlines) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayNodes) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayOriginalSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayPatternFill) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplayPatternLines) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceDisplaySurfaceOption) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceEdgeNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceFacetNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceGridOptionParamn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceGridOptionParamn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceGridlinesStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceOffsetFromSurface) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceOriginalSurfaceMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternFillMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternFlip) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternIndentn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternIndentn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternLinesStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternMirror) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePatternRotationAngle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfacePointNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceRule1Suspension) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceRule2Suspension) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceTileBorder) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedSurfaceTotalEdgeLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathBeginningIndent) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathDisplayNodeNumbers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathDisplayNodes) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathDisplayReferenceCurves) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathEndIndent) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathFlipDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathLayout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathLayoutFixedNumPoint) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathMaxDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathMeasurementType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathMergedPointNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DividedpathMinDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DividedpathTotalPathLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DivisionPattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DivisionProfileWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DivisionRuleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DivisionSketchCurveDivisionParamsOverrideParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.DivisionSketchCurveExtentdToSilhParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DoorConstructionType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorCost) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DoorEvacuationExitType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DoorFinish) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorFrameMaterial) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorFrameType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DoorOperationType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartAreaComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartBaseLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DpartBaseLevelByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartCanHostRebar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartExcluded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartHeightComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartLayerConstruction) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartLayerFunction) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartLayerIndex) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartLayerWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartLengthComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DpartMaterialByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartMaterialIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalCategory) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalCategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalFamily) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartOriginalType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.DpartPhaseCreatedByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartPhaseDemolishedByOriginal) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartShapeModified) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DpartVolumeComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.DrawForEachRun) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.DuctTerminalEngagementLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EdgeLinework) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.EditedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElecticalEquipVoltage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElecticalEquipWattage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElemCategoryParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemCategoryParamMt) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemDeletableInFamily) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemFamilyAndTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemFamilyParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemIsReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemPartitionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemReferenceName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemReferenceName2dXz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElemRoomId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemRoomName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElemRoomNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ElemTypeLabel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElemTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElementIsCutting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElementLockedParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevArrowAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ElevArrowFilled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevAssocDatum) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElevReferenceLabelPos) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevShowViewName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevSymbolId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ElevTextPos) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevViewNamePos) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ElevWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ElevatnTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.EllipseFocusMrkVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EllipseXParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EllipseYParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EndExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EndJoinCutback) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EndTreatment) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EndYJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EndYOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EndZJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EndZOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisAdvancedOptions) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisBuildingOperatingSchedule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisConceptualConstruction) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisCreateAnalyticalModel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisGlazingIsShaded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisHorizontalVoidThreshold) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisHvacSystem) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMassZoning) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMasszoneCoreoffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMasszoneDivideperimeter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisMasszoneUseenergydatasettings) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisOutdoorAirInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisPercentageGlazing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisPercentageSkylights) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisProjectPhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisShadeDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisSillHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisSkylightWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisSpaceBoundingParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.EnergyAnalysisVerticalVoidThreshold) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.EqualityFormula) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.EqualityTextForAngularDim) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EqualityTextForContinuousLinearDim) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.EqualityWitnessDisplay) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ExtrusionAutoParams) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ExtrusionEndParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ExtrusionLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ExtrusionStartParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricParamCoverOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutByHost) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutOverallLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutOverallWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamCutSheetMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamLapsplicePosition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamLocationGeneric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamLocationSlab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamLocationWall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamMajorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamMinorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamRounding) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FabricParamSharedFamilyKey) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricParamSheetType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymDTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanSymTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricParamSpanTagComponentReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricParamTagView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricParamTotalSheetMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetDefaultMajorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetDefaultMinorLapspliceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorDirectionWireType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorEndOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorLayoutPattern) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorNumberOfWires) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorReinforcementArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMajorStartOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMass) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMassunit) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorDirectionWireType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorEndOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorLayoutPattern) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorNumberOfWires) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorReinforcementArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetMinorStartOverhang) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetOverallLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetOverallWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricSheetPhysicalMaterialAsset) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricSheetWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricWireType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricationBottomElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationBottomElevationOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationBottomOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationChangeServiceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FabricationDoublewallMaterialAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationEndOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationEndSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationFittingDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationMaterialFinish) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationSpec) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationInsulationSpecificationAbbreviation) {
                return StorageType.String;
            }

            if(forgeTypeId == ParameterTypeId.FabricationLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FabricationMaterialAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartAlias) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartAngleOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartBoughtOut) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartCutType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthIn) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthInOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthOut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDepthOutOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterIn) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterInOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterOut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDiameterOutOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDoublewallMaterial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDoublewallMaterialArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartDoublewallMaterialThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartInsulationArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartItemNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartLengthOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartLiningArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartMaterial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartMaterialThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartNotes) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartPatNo) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationPartSheetmetalArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartTakeoffDialogParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthIn) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthInOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthOut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationPartWidthOutOption) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationPipeInvertElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationProductCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataFinishDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataInstallType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataItemDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataLongDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataMaterialDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataOem) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataProduct) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataRange) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataSizeDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductDataSpecification) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationProductEntry) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationRelativeFilename) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationRoutingSolutionsUiParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationServiceAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationServiceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationServiceParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationSetUpDownTag) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationSetUpDownTagFromBottom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationSlopeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationSpecification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FabricationSpecificationAbbreviation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationStartOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationTopElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationTopElevationOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationTopOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationVendor) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationVendorCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FaceroofLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FaceroofOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamProfileDefinition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamProfileUsage) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyAllowCutWithVoids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyAlwaysVertical) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyAutojoin) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyBaseLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyCanHostRebar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyCategoryPseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyContentPartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveAttachmentProportion) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstyleFor2010Mass) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisible) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisibleMinusAnalytical) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisiblePlusStickSym) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.FamilyCurveGstylePlusInvisiblePlusStickSymMinusAnalytical) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.FamilyElectricalMaintainAnnotationOrientation) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.FamilyElemSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyEnableCuttingInViews) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyExportAsGeometry) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyFreeinstDefaultElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyHostingBehavior) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyIsElevationMarkBody) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyIsParametric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyKeepTextReadable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyKeyExtParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyKeywordProtected) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyLineLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyNamePseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyRenderingType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyRfaPathPseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyRotateTextWithComponent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyRotateWithComponent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyRoughHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyRoughWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyRoundconnectorDimensiontype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyShared) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyStructFootingUseCapTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyStructMaterialType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilySymbolicRep) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyTopLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FamilyUsagePseudoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FamilyUsePrecutShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyWindowInsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FamilyWorkPlaneBased) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FamilyWpbDefaultElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FasciaDepthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FasciaMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FasciaProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FbxAssetType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightAtADistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightBallastLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightColorFilter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightDimmingLightColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightEfficacy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitCircleDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitLineLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitRectangleLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitRectangleWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightEmitShapeVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightIlluminance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialColorCtrl) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialColorName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialColorTemperature) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialIntensity) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightInitialIntensityInputMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightLampLumenDepr) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLampTiltLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLimunousFlux) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLimunousIntensity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightLossFactorCtrl) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightLossFactorMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FbxLightLumenaireDirt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometricFile) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometricFileCache) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometrics) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FbxLightPhotometricsFam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FbxLightSourceDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSourceLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSpotBeamAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSpotFieldAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSpotTiltAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightSurfaceLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightTemperatureLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightTotalLightLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightVoltageLoss) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FbxLightWattage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FillPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FillPatternIdParamNoNo) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.FilledRegionMasking) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FireRating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FixedRotation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FlexibleInstanceFlip) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FloorAttrDefaultHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorAttrDefaultThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorAttrThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorHeightabovelevelParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorParamIsStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FloorParamSpanDirection) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FloorStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.FollowSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ForegroundAnyPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ForegroundDraftPatternIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ForegroundPatternColorParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.FramingLengthRoundoff) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FunctionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GbxmlEditDataParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GenericDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GenericZoneName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GeoLocation) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GeomVisibilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptions) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsBackground) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsFog) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsLighting) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsPhotoExposure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsShadows) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsSketchyLines) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GraphicDisplayOptionsSsIntensity) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.GridBankColNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBankColWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GridBankRowHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GridBankRowNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBubbleEndn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBubbleEndn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridBubbleLinePen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentPattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridCenterSegmentWeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentPattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentWeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GridEndSegmentsLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GridHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GridNetLocationMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GridlineSpecStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.GroupAllowedViewTypes) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GroupAttachedParentName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GroupLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GroupOffsetFromLevel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GroupnameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GuideGridNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.GuideGridSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.GutterMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.GutterProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.HandrailHandClearanceParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailProjectionParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsLayoutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsNumberParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HandrailSupportsTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.HeadOnPlacementMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HeavyEndPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HeavyTickMarkPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HostAreaComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HostIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.HostPanelScheduleAsPanelParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HostPerimeterComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.HostSseCurvedEdgeConditionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.HostVolumeComputed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.IconIndexParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.IdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.IfcApplicationName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcApplicationVersion) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcBuildingGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcOrganization) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcProjectGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcSiteGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.IfcTypeGuid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtComponentsDesc) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityRoll) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityStructType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityStyle) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ImportAdtEntityWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportBackground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ImportBaseLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ImportBaseLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportDisplayUnits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ImportInstanceScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ImportSymbolName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentDisplayedEndStation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentDisplayedStartStation) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.InfrastructureAlignmentName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InsertOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceElevationParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceFreeHostOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceFreeHostParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.InstanceHeadHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceMoveBaseWithGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceMoveTopWithGrids) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceMovesWithGridParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceOffsetPosParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InstanceReferenceLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.InstanceScheduleOnlyLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.InstanceSillHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InstanceStructUsageParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.InsulationScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InsulationWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.InteriorTickDisplay) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.IsVisibleParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoinStrengthOrder) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemClearSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemElemTagNewMembersView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.JoistSystemFixedSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemJustificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemLayoutRuleParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemMaximumSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNewBeamTypeNoFamNameParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNewBeamTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNumBeamsSameType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemNumberOfLinesParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.JoistSystemSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.KeepReadable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.KeySourceParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeyValue) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeynoteNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeynoteParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.KeynoteText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LayoutnodeCurvetypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LeaderArrowWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LeaderArrowhead) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LeaderLeftAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LeaderLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LeaderOffsetSheet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LeaderRightAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LegendComponent) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LegendComponentDetailLevel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LegendComponentLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LegendComponentView) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelAttrRoomComputationAutomatic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelAttrRoomComputationHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataFloorArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataFloorPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassFamilyAndTypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassFamilyParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassInstanceComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassTypeComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassTypeDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataMassTypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataOwningLevel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataSpaceUsage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelDataSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelDataVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelElev) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LevelIsBuildingStory) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelIsGroundPlane) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelIsStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LevelRelativeBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LevelRoomComputationHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LevelUpToLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LightingFixtureLamp) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LightingFixtureLightEmitter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LightingFixtureWattage) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LineColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LinePattern) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LinePen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LineShapeAtCorner) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LinearDimType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadAllNon0Loads) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadAreaArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFx1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFx2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFx3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFy1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFy2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFy3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFz1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFz2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaForceFz3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAreaIsProjected) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadArrowSeparation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrAreaForceScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrForceArrowType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadAttrForceScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrLinearForceScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadAttrMomentArrowArc) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadAttrMomentArrowLine) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadAttrMomentScaleFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadCaseId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCaseName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadCaseNature) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCaseNatureText) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCaseNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadCaseSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.LoadCombinationFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadCombinationName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadForceFx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadForceFy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadForceFz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadIsCreatedByApi) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsHosted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsProjected) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsReaction) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadIsUniform) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFx1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFx2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFy1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFy2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFz1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearForceFz2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadLinearLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMx1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMx2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMy) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMy1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMy2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMz1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadMomentMz2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LoadNatureName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadUsageName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.LoadUseLocalCoordinateSystem) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LockAlignmentUiToggle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.LockedBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LockedEndOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LockedStartOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LockedTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LvMullionLeg1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.LvMullionLeg2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MarkupsCreated) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsCreator) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsHistory) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsLabel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsModified) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsNotes) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsPrivate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MarkupsStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataConceptualConstruction) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassDataGlazingIsShaded) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataMassExteriorWallArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassInteriorWallArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassOpeningArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassRoofArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassSkylightArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataMassWindowArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataPercentageGlazing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataPercentageSkylights) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataShadeDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataSillHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataSkylightWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassDataSlab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassDataSurfaceDataSource) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassDataUnderground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassFloorAreaLevels) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.MassGrossArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassGrossSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassGrossVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassSurfacedataMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassZoneConditionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MassZoneFloorArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassZoneMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassZoneSpaceTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MassZoneVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MassingIntegrationLevel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MatchlineBottomOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MatchlineBottomPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MatchlineTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MatchlineTopPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MaterialArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MaterialAspaint) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamAssetLibId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamCommonSharedAsset) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamExternalMaterialId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamSource) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialAssetParamSourceUrl) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MaterialName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MaterialParamColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamGlow) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamShininess) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamSmoothness) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialParamTransparency) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MaterialVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MeasureFromStructure) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetOnDuty) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MechanicalEquipmentSetOnStandby) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAirloopFantype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAirloopHeatexchangerType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAirloopPreheatCoiltype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalCriticalpathParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalEquipmentName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalLoopBoundaryParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalLoopName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.MepAnalyticalPipeDesignflow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MepChilledWaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepCondenserWaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepCoolingCoilType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepElecZoneEquipmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepEquipmentCalcPipingflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MepEquipmentCalcPipingpressuredropParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MepEquipmentClassification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepHeatingCoilType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepHeatingHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepIgnoreFlowAnalysis) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepPreheatHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepProfileTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepReheatCoilType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepReheatHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepSystemFillGraphicsOverridesParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.MepSystemLineGraphicsOverridesParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.MepVrfLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepWaterloopChillertype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepWaterloopType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneAirLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipment) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipmentBehavior) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipmentDrawVentilation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneEquipmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MepZoneHotwaterLoop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ModelCategoryIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ModelGraphicsStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ModelGraphicsStyleAnonDraft) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ModelOrSymbolic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ModelTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MovesWithGridParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MullionAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionCornerType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MullionDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionDepth1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionDepth2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionFamType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MullionOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MullionPosition) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MullionProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationDimensionStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationGroupTagHeads) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationReferenceCategory) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationShowDimensionText) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MultiReferenceAnnotationTagType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.MultipleAlignmentUiToggle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.MultistoryStairsActualTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.MultistoryStairsRefLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.NodeConnectionStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberPartitionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.NumberSystemDisplayRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemJustify) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemJustifyOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.NumberSystemOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemReferenceOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.NumberSystemTagType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.NumberSystemTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ObjectStyleMaterialIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.OffsetfacesShowShapeHandles) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.OmniclassCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OmniclassDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OptionName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OptionSetId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.OptionSetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.OrdinateDimSetting) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.OrientByView) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PaddingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PanelScheduleName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PartMakerDivisionProfileOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfileEdgeMatch) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfileFlipAcross) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PartMakerSplitterProfileFlipAlong) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PartmakerParamDivisionGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelFromRoom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelLevelName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelSpeed) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelTime) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelToRoom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathOfTravelViewName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathReinAddlOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinAltOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinAlternating) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient1Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient1Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient2Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookOrient2Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookTypen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinEndHookTypen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinEndSpanhookAlt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinEndSpanhookPrim) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinFaceSlab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinFaceWall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient1Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient1Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient2Slab) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookOrient2Wall) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinHookTypen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinHookTypen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinLengthn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinLengthn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinNumberOfBars) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinShapen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinShapen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanhookAlt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanhookPrim) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthAltOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBarlengthAlt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBarlengthPrim) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBottomAlt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthBottomPrim) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSpanlengthTopAlt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PathReinSummary) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PathReinTypen1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PathReinTypen2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PatternIndent1ForDivisionRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PatternIndent2ForDivisionRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PatternMirrorForDivisionRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PeakAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PeakCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PeakHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PeakLatentCoolingLoad) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhaseCreated) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PhaseDemolished) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PhaseName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhaseSequenceNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamAverageModulus) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamBehavior) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamBending) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamBendingReinforcement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamClass) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamCompressionParallel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamCompressionPerpendicular) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamConcreteCompression) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeff3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeffn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamExpCoeffn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamFivepercentModulusOfElacticity) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamLightWeight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamMinimumTensileStrength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamMinimumYieldStress) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod12) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod23) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamPoissonMod3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamReductionFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamResistanceCalcStrength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod12) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearMod3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearParallel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearPerpendicular) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearReinforcement) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamShearStrengthReduction) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamSpecies) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamStructuralDensity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamStructuralSpecificHeat) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamStructuralThermalTreated) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamSubclass) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamTensionParallel) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamTensionPerpendicular) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivityX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivityY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamThermalConductivityZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamUnitWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamWoodConstruction) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungMod3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungModn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialParamYoungModn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PhyMaterialProperties) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PipingConnectionType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PipingGenderType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlanRegionViewRange) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PlanViewCutPlaneHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PlanViewLevel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlanViewNorth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlanViewRange) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PlanViewTopClipHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PlanViewViewDir) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesCwConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesDrain) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesHwConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesSupplyFitting) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesSupplyPipe) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesTrap) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesVentConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PlumbingFixturesWasteConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PocheMatId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveConstrained) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveNumParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveOrientationType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveShowNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointAdaptiveTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementChordLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementDriven) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementDriving) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementHostedOnFaceUParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementHostedOnFaceVParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementHostedParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementMeasureFrom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementMeasurementType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementMirrored) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementNonNormalizedCurveParamater) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementNormalizedCurveParamater) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementNormalizedSegmentLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementRotationAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementSegmentLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointElementShowNormalPlaneOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementShowPlanes) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElementZflipped) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleConstrained) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleNumParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleOrientationType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointFlexibleShowNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PointVisibilityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PointcloudinstanceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PointcloudtypeScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PreferDimSideUiFilter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PrimaryOptionId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.Profile1Angle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile1FamType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.Profile1FlippedHor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.Profile1OffsetX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile1OffsetY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile2Angle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile2FamType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.Profile2FlippedHor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.Profile2OffsetX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.Profile2OffsetY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileFamType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ProfileFamTypePlusNone) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ProfileFlippedHor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProfileOffsetX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileOffsetY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProfileParamAlongPath) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ProjectAddress) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectAuthor) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectBuildingName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectBuildingType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ProjectIssueDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectOrganizationDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectOrganizationName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectPostalCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionEnumeration) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionIssued) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionIssuedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionIssuedTo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionRevisionNum) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectRevisionSequenceNum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ProjectStatus) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ProjectedSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertyArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertyAreaOpen) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertyAreaUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PropertyLengthUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentBearing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentEW) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentLR) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentNS) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.PropertySegmentSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.PropertySetDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySetKeywords) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySetMaterialAspect) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.PropertySetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.PropertySubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RadialArrayArcRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RadiusSymbolLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RadiusSymbolText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsLatteralOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsPositionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHandrailsTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RailingSystemHasTopRail) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsLatteralOffset) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsPositionParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.RailingSystemSecondaryHandrailsTypesParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.RailingSystemTopRailHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RailingSystemTopRailTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RampAttrLeftBalusterAttachPt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RampAttrMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RampAttrMinInvSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RampAttrRightBalusterAttachPt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RampAttrShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RampAttrTextFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RampAttrTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RampAttrThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RampMaxRunLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterEnableSnaps) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterHorizontalScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterLockProportions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSheetheight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSheetwidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolFilename) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolLinkloadStatus) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolPagenumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolPixelheight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolPixelwidth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolResolution) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolViewname) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RasterSymbolWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RasterVerticalScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsAdditionalFlow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsAdjustableConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsBuildingConstructionclass) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsBuildingUseloadcredits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayBendradius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayRungheight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayRungspace) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayRungwidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayShapetype) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitBendorfitting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitConnectorelemType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitSystemType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayconduitrunLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayrunHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCabletrayrunWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCalculatedSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsComponentClassificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsConduitBendradius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitInnerDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitOuterDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitTradesize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsConduitrunDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitrunInnerDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConduitrunOuterDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConnectorDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsConnectorIsprimary) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsConnectorOffsetObsolete) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsConstructionSetParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsConstructionTypeShadingfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCtcBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCtcServiceType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsCtcTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveHorOffsetParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCurveSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveUtslope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurveVertOffsetParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCurveWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultBendParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultCapParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultCrossParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultElbowParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultElbowdownParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultElbowupParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultHorizontalBendParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultMechjointParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTakeoffParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTeeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTeedownParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTeeupParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultTransitionParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeDefaultUnionParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMaxHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMaxWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMultishapeTransitionOvalroundParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMultishapeTransitionParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeMultishapeTransitionRectovalParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypePreferredBranchParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsCurvetypeRoughnessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysConfigParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysNumwiresParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysPhaseParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysVlgParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsDistributionsysVllParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsDuctBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctCalculatedSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctConnectorSystemClassificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFittingLossMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFittingLossMethodServerParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFittingLossMethodSettings) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFlowConfigurationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFlowDirectionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFlowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctPipeSystemAbbreviationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctPressureDrop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctRoutingPreferenceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSizeFormattedParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctStaticPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSystemCalculationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsDuctSystemTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsDuctTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecAmbientTemperature) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalLoadDensity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalLoadNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalLoadTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentPhaseaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentPhasebParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentCurrentPhasecParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoad) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhase1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhase2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhase3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecApparentLoadPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecBalancedLoad) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCalcCoefficientUtilization) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitConnectionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitFrameParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitLengthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNaming) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNamingIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNotesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNumberOfElementsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitNumberingType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPanelParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPathModeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPathOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitPrefixSeparator) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitSlotIndex) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitStartSlot) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumGroundsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumHotsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumNeutralsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireNumRunsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireSizeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecCircuitWireTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecDemandfactorDemandloadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecDemandfactorLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecDemandfactorLoadclassificationParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodeSupplyFrom) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodeSupplyFrom1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodeSupplyFrom2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecEditCircuitNamingSettingsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsElecEnclosure) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadClassification) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryConnectedCurrentParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryConnectedLoadParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandCurrentParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandFactorParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandFactorRuleParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryDemandLoadParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecLoadsummaryLoadclassificationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecMains) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecMaxPoleBreakers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecModifications) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecMounting) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecNumberOfCircuits) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecNumberOfPoles) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitApparentLoadPhasea) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitApparentLoadPhaseb) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitApparentLoadPhasec) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitCurrentPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitCurrentPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBranchCircuitCurrentPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelBussingParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelConfigurationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelCurrentPhaseaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelCurrentPhasebParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelCurrentPhasecParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsApparentLoadPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsApparentLoadPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsApparentLoadPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsCurrentPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsCurrentPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsCurrentPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelFeedThruLugsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelGroundBusParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelLocationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelMainstypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelMcbRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNeutralBusParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNeutralRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNumphasesParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelNumwiresParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelScheduleFooterNotesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelScheduleHeaderNotesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelSubfeedLugsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelSupplyFromParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalConnectedCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalDemandCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalDemandFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadHvacParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadLightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadOtherParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalestloadPowerParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadHvacParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadLightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadOtherParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPanelTotalloadPowerParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPowerFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecPowerFactorState) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomAverageIllumination) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomCavityRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomLightingCalcLuminaireplane) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomLightingCalcWorkplane) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomReflectivityCeiling) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomReflectivityFloor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecRoomReflectivityWalls) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecShortCircuitRating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecSwitchIdParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentPhaseaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentPhasebParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueCurrentPhasecParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoad) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhase1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhase2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhase3) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhasea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhaseb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecTrueLoadPhasec) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecVoltage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecVoltageDropParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireCircuits) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireGroundAdjustment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireHotAdjustment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireNeutralAdjustment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireShareGround) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireShareNeutral) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireTickmarkState) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecWireType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElectricalData) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEndLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEndOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeAnalyticalGridCellSize) {
                return StorageType.Double;
            }

            if(forgeTypeId ==
               ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeAnalyticalSpaceIdentificationResolution) {
                return StorageType.Double;
            }

            if(forgeTypeId ==
               ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeAnalyticalSurfaceIdentificationResolution) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisBuildingEnvelopeDeterminationParam) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisExportCategoryParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisExportComplexityParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisExportGbxmlDefaultsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisGroundPlaneParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisIncludeThermalProperties) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisProjectPhaseParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceAdjacentSpaceId1) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceAdjacentSpaceId2) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceAzimuth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceCadobjectid) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceOriginX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceOriginY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceOriginZ) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisSurfaceTilt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewBuildingShellMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewCoordAxisMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewInnerShellMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewOuterShellMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewRbeMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewShadingSurfacesMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewSurfacesMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewTransparentMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsEnergyAnalysisViewUpdateSurfaces) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsEqDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentAnnotationDisplay) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentDistributionSystem) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentOffsetHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentOffsetWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentSecondaryDistribsys) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentTakeoffFixedLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentTakeoffLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFamilyContentTakeoffProjlength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFlexDuctTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFlexPatternParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFlexPipeTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFlexductRoundtypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsFlowFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFlowObsolete) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerCoverageParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerKFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerOrificeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerOrificeSizeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerPressureClassParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerResponseParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsFpSprinklerTemperatureRatingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsFriction) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlOpeningType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlSurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlSurfaceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsGbxmlSurfaceType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadDoorAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadDoorCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadFloorAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadPartitionAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadPartitionCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadPlenumCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadRoofAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadRoofCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadSkylightAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadSkylightCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWallAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWallCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWindowAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHvacloadWindowCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsHydraulicDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationLiningVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationThicknessForDuct) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsInsulationThicknessForPipe) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsIsCustomFitting) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsLiningThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsLiningThicknessForDuct) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsLoadSubClassificationMotor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsLookupTableName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsLossCoefficient) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsMaxFlow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsMinFlow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPanelScheduleSheetAppearanceInstParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsPanelScheduleSheetAppearanceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsHorizontalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsHorizontalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsVerticalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelconduitsVerticalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesHorizontalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesHorizontalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesVerticalNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsParallelpipesVerticalOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeAdditionalFlowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeCalculatedSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeClassParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeConnectiontypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeConnectorSystemClassificationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeCwfuParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeDiameterParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossKfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossMethodServerParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossMethodSettings) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFittingLossTableParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFixtureUnitsParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowConfigurationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowDirectionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFlowStateParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidDensityParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidTemperatureParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFluidViscosityParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFrictionFactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeFrictionParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeHwfuParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeInnerDiamParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeInsulationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeInvertElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeJointtypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeOuterDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipePressuredropParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeRelativeRoughnessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeReynoldsNumberParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeRoughnessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSegmentParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSizeFormattedParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSizeMaximum) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSizeMinimum) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSlopeDefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSlopeOptionsDefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeStaticPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSystemCalculationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeSystemFixtureUnitParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeFittingLossKfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeFittingLossMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeFittingLossTableParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPipeTypeValveLossCvfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeValveLossCvfactorParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeVelocityParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeVolumeParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipeWfuParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsPipingSystemTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsPressureDrop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsProjectConstructionTypeShadingfactorParam) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RbsProjectLocationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsProjectReporttypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceFreesize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceInsulationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceInsulationType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceLiningThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceLiningType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReferenceOverallsize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsReynoldsnumberParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsRoomCoefficientUtilization) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsRoutingPreferenceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RbsSection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSegmentDescriptionParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsServiceTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsShowProfileType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSizeLock) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsStartLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsStartOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsSystemAbbreviationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemBaseElementParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemClassificationParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemFlowConversionMethodParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsSystemNumElementsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1linedropsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1linerisesymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1lineteedownsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop1lineteeupsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop2linedropsymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedrop2linerisesymbolParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsSystemRisedropParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsVelocity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVelocityPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVoltagetypeMaxvoltageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVoltagetypeMinvoltageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsVoltagetypeVoltageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsWireCircuitDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireCircuitLoadName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireConduitTypeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireInsulationParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsWireMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RbsWireMaxConductorSizeParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RbsWireNeutralIncludedInBalancedLoadParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsWireNeutralModeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsWireNeutralMultiplierParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsWireNumConductorsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsWireTemperatureRatingParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarBarDeformationType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarBarDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarBarHookLengths) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarBarMaximumBendRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarBarStirrupBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarBarStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarContainerBarType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarDistributionType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemBarSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarElemEndtreatmentEnd) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemEndtreatmentStart) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookEndOrient) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookEndType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookStartOrient) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookStartType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarElemHookStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemHostMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarElemLayoutRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarElemQuantityOfBars) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarElemScheduleMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarElemTotalLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarElementRounding) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarElementVisibility) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarFreeFormHookEndPlaneAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarFreeFormHookStartPlaneAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarGeometryType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarHookAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookLengthOverride) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarHookLineLenFactor) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtEnd) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtEndSchedulesTagsFilters) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtStart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarHookRotationAtStartSchedulesTagsFilters) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.RebarHookStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarHostCategory) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarIncludeFirstBar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarIncludeLastBar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceBarDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceBarModelDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarInstanceStirrupTieAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarArcConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarDuplicate) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarEndConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarInternalMultiplanarStartConnector) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarMaxLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarMaximSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarMinLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarMinimSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarModelBarDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarModifiedSet) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarNumberSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarQuanityByDistrib) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShape) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeAllowedBarTypes) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndHookLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndHookOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndtreatmentEndType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeEndtreatmentStartType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookEndType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookRotationAtEnd) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookRotationAtStart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookStartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeHookStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeImage) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarShapeOutOfPlaneBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeParamEndHookTanLen) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeParamStartHookTanLen) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralBaseFinishingTurns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralPitch) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeSpiralTopFinishingTurns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarShapeStartHookLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeStartHookOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarShapeStirrupTieAttachment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarStandardBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarStandardHookBendDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBackDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBackDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveFrontDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveFrontDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemActiveTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlBottomOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlExteriorOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlInteriorOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemAddlTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBackDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBackDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDir1Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDir2Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeBottomDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeFrontDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeFrontDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDir1Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDir2Generic) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBarTypeTopDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemBottomMajorMatchesBottomMinor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemCoverBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemCoverSide) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemCoverTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBackDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBackDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBottomDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientFrontDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientFrontDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientTopDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookOrientTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBackDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBackDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBottomDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeBottomDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeFrontDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeFrontDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeTopDirn1) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemHookTypeTopDirn2) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir1NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir1WithSpacing) {
                return StorageType.String;
            }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir2NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryBottomDir2WithSpacing) {
                return StorageType.String;
            }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir1NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir1WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir2NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryDir2WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryNoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir1NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir1WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir2NoSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryTopDir2WithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayerSummaryWithSpacing) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RebarSystemLayoutRule) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBackDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBackDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesFrontDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesFrontDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDir1Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDir2Generic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemNumberOfLinesTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemOverride) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBackDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBackDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDir1Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDir2Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingBottomDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingFrontDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingFrontDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDir1Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDir2Generic) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDirn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpacingTopDirn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanactiveDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanactiveDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookBottomDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookLeftDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookRightDirn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemSpanhookTopDirn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemTopMajorMatchesBottomMajor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemTopMajorMatchesTopMinor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarSystemTopMinorMatchesBottomMinor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RebarWorkshopInstructions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RectMullionThick) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RectMullionWidth1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RectMullionWidth2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RefTableElemName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RefTableParamName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ReferenceLineSubcategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceOtherViewUiRefView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceOtherViewUiToggle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerAttrTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerTargetView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerUiTargetFilter) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ReferenceViewerUiTargetView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReferencedView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ReinEstBarLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ReinEstBarVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ReinEstNumberOfBars) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ReinforcementVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RelatedToMass) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RenderPlantHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RenderPlantName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RenderPlantTrimHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RenderRpcFilename) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RenderRpcProperties) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailElement) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailInside) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailLayout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailRotation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RepeatingDetailSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RevealProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevision) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionIssuedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionIssuedTo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevisionCloudRevisionNum) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RevolutionEndAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RevolutionStartAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RgbBParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RgbGParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RgbRParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofAttrDefaultThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofAttrThicknessParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoofConstraintLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoofConstraintOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofCurveHeightAtWall) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofCurveHeightOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofCurveIsSlopeDefining) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofEaveCutParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofFacesLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofRafterOrTrussParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoofSlope) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoofUptoLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoofUptoLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomActualExhaustAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualLightingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualLightingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualPowerLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualPowerLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualReturnAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomActualSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomAirChangesPerHourParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomAreaPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomBaseHeatLoadOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomBaseLightingLoadOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomBasePowerLoadOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomBaseReturnAirflowOnParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedCoolingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedHeatingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculatedSupplyAirflowPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomCalculationPoint) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomComputationHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomComputationMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomConditionTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomConstructionSetParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomDepartment) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomDesignCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignExhaustAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignLightingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignLightingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignMechanicalLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignOtherLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignPowerLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignPowerLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignReturnAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomDesignSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomEditElectricalLoadsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoomEditPeopleLoadsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoomFinishBase) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomFinishCeiling) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomFinishFloor) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomFinishWall) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomLevelId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomLightingLoadUnitsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomLowerOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomNumberOfPeopleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOccupancy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomOccupancyUnitParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirInfoParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomOutdoorAirflowStandardParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomPeopleLatentHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPeopleSensibleHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPeopleTotalHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomPhaseId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomPlenumLightingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomPowerLoadUnitsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomSpaceTypeParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomTagOrientationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RoomUpperLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RoomUpperOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RoomVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RouteAnalysisSettingsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RoutingPreferenceParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RvtHostLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.RvtLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RvtLinkFileNameWithoutExt) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RvtLinkInstanceName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.RvtLinkPhaseMap) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.RvtLinkReferenceType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RvtSourceLevel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ScheduleBaseLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ScheduleBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleCategory) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleEmbeddedParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleFieldsParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleFilterParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleFormatParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleGroupParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleSheetAppearanceParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ScheduleTopLevelOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ScheduleTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ScheduleTypeForBrowser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionAttrHeadTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SectionAttrTailLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SectionAttrTailTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SectionAttrTailWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SectionBrokenDisplayStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionCoarserScalePulldownImperial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionCoarserScalePulldownMetric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionParentViewName) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SectionShowInOneViewOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SectionTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SeekItemId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SelectionEditableOnly) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetApprovedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyAssemblyCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyAssemblyDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyCost) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyKeynote) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyManufacturer) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyModel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyTypeComments) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyTypeMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetAssemblyUrl) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCheckedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevision) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionIssued) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionIssuedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetCurrentRevisionIssuedTo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetDesignedBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetDrawnBy) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetFilePath) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetGuideGrid) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SheetHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SheetIssueDate) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetKeyNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetRevisionsOnSheet) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SheetScale) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SheetScheduled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SheetWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ShowArrowheadToCutMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ShowIconParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ShowTitle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SketchGridSpacingParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SketchPlaneParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SlabEdgeMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlabEdgeProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnBaseCutStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnBaseExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnGeometryTreatmentBase) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnGeometryTreatmentTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnTopCutStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnTopExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SlantedColumnTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SlopeArrowLevelEnd) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlopeArrowLevelStart) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SlopeEndHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SlopeStartHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAirChangesPerHour) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAirflowPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAreaPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceAssocRoomName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpaceAssocRoomNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpaceCarpetingParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpaceCoolingSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceDehumidificationSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceElecEquipmentRadiantPercentageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceHeatingSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceHumidificationSetPoint) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceInfiltrationAirflow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceInfiltrationAirflowPerArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceInfiltrationParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceIsOccupiable) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpaceIsPlenum) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpaceLightingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceLightingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceLightingScheduleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceOccupancyScheduleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceOutdoorAirflow) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceOutdoorAirflowPerArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceOutdoorAirflowPerPerson) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePeopleLatentHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePeopleLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePeopleSensibleHeatGainPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePowerLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePowerLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacePowerScheduleParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceReferenceLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpaceVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpaceZoneName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingJustificationn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLayoutn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthU) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthV) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthVert) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthn1) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingLengthn2) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisions) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsHoriz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsU) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsV) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsn1) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpacingNumDivisionsn2) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpanDirInstParamAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpanDirSymParamTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrCurrentName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendHorOriginGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendShowConfigName) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendShowDescription) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendTextType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendVertOriginGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrLegendWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrRange) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpatialFieldMgrResultsVisibility) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpecifySlopeOrOffset) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateBase) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateBottomPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateBottomSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateElevationPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateElevationSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateIncludeElevation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateTopPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotCoordinateTopSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotDimLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotDimLeaderLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotDimStyleSlopeUnits) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpotDimStyleSlopeUnitsAlt) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpotElevBase) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevBendLeader) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevBotValue) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevDisplayElevations) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevFlipTextVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndBottom) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndElevation) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndEw) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndNs) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTop) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTypeBottom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTypeElevation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevIndTypeTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevLeaderArrowhead) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpotElevLinePen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevLowerPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevLowerSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevLowerValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotElevRelativeBase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpotElevRotateWithComponent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevSingleOrUpperPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevSingleOrUpperSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotElevSingleOrUpperValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotElevSymbol) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SpotElevTextHorizOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotElevTextLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevTextOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevTickMarkPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotElevTopValue) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeLeaderLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeOffsetFromReference) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SpotSlopePrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeSlopeDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeSlopeRepresentation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SpotSlopeSuffix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SpotTextFromLeader) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsActualNumRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsActualNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsActualRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsActualTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrBodyMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrBreakSymInCutline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrCalcEnabled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrCalcMax) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrCalcMin) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrEqResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrFirstRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLandingCarriage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLandingsOverlapping) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLastRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrLeftSideStringer) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrMaxRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrMinimumTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrMonolithicStairs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrNosingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrNosingPlacement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrNumMidStringers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRightSideStringer) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserMult) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserTreadConnect) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRiserType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrRisersPresent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrSideStringerTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStairCalculator) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStairsBottom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStairsCutOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerCarriage) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrStringerThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTextFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadFrontProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadMult) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTreadWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsAttrTrimTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsBaseLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsCurveType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowAnnotationCutMark) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowBoundary2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowBoundary3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLandingBoundary) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLandingFaces) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLandingPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLeftRunBoundary2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowLeftRunBoundary3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowMonolithicSupportCorseGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowMonolithicSupportGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRightRunBoundary2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRightRunBoundary3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunCorseGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunOutlineForPlan) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunPath2d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunPath3d) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowRunRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowSupportPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowTreadFaces) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowTriserCorseGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDbgShowTriserGeom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDesiredNumRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDesiredNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsDownText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsEnableCalculationRuleChecking) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstAlwaysUp) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstDownArrowOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstDownLabelOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstDownLabelText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsInstUpArrowOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstUpLabelOn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsInstUpLabelText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsLandingBaseElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsLandingOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsLandingStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsLandingThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeHasMonolithicSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeLandingMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeStructure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeUseSameTriserAsRun) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsMinAutomaticLandingDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsMultistoryTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsMultistoryUpToLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsPathFullStepArrow) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsPathStartExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsPathStartFromRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingAngledConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterBottomAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterFamily) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterIsPost) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterPlacement) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterSlopeAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterSpacingType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterTopAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalusterWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBalustersPerTread) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingBaseLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsRailingConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeightOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeightShiftType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingHeightShiftVal) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingPlacementOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingRailStructure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsRailingShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingTangentConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRailingThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRailingWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualNumberOfTreads) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualRunWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunActualTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunBeginWithRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunBottomElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunCcw) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunCenterMarkVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunCreateAutoLanding) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunEndWithRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunExtendBelowRiserBase) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunExtendBelowTreadBase) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunLocationpathJustfication) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunStructural) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunTopElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRunWidthMeasurement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunWinderBeginWithStraight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRunWinderEndWithStraight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeHasMonolithicSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeRunMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeStructuralDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeStructure) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeTotalDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsRuntypeUndersideSurfaceType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsShowDownText) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsShowUpText) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsStairsHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsStringersPresent) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportHorizontalOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupportLandingsupportType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportLowerEndCut) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportTrimSupportUpper) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportUpperEndCut) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupportVerticalOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeFlipSectionProfile) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeSectionProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeStructuralDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeStructuralDepthOnLanding) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeStructuralDepthOnRun) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeTopsideSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeTotalDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeUndersideSurface) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsSupporttypeWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTextOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTextType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTopLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTopLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTotalNumberOfRisers) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTotalNumberOfTreads) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserIsTypeOverridden) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserNumberBaseIndex) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserRiserMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsTriserRiserNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTriserTreadMark) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsTriserTreadNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeBackNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeFrontNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeLeftNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeNosingLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeNosingPlacement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeNosingProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRightNosing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiser) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserIsSlanted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeRiserTreadConnection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTread) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTreadMaterial) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTreadProfile) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairsTrisertypeTreadThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsUpText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternFilletInsideCorner) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternMinimumWidthCorner) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternMinimumWidthInsideWalkline) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternNumberOfStraightStepsAtBegin) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternNumberOfStraightStepsAtEnd) {
                return StorageType.Integer;
            }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternRadiusInterior) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternStairPathOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairsWinderpatternWinderStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleMaxResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleMinResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleRiserMultiplier) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleTargetResult) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalcRuleTreadMultiplier) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCalculationRules) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairstypeConstructionMethod) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeCutmarkType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeGeomunjoinedEndCutStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeHasIntermediateSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeHasLeftSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeHasRightSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeIntermediateSupportType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeIsAssembledStairs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeLandingType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeLeftSideSupportType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeLeftSupportLateralOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMaximumRiserHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMinimumRunWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMinimumTreadDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeMinimumTreadWidthInsideBoundary) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchCustomWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchHorizontalGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchVerticalGap) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeNotchWidth) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeNumberOfIntermediateSupports) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeRightSideSupportType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeRightSupportLateralOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StairstypeRunType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StairstypeShowCutline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeShowStairPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeShowUpdown) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StairstypeWinderStepFrontMeasurement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StartExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StartJoinCutback) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StartSymbolType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StartYJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StartYOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StartZJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StartZOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorAssembly) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorDiameter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorLength) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorStandard) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemAnchorTotalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltAssembly) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltCoating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltDiameter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltFinishCalculationAtGap) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltGripLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltGripLengthIncrease) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltInverted) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltStandard) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemBoltTotalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCoating) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemContourGapWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemContourSide1dist) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemContourSide2dist) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeAroundAxis) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeAxisAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeDistanceAxis) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeWidthx) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeXAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCopeZAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCutLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemCutType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemExactWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleAlpha) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleAngle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleBackTaperThread) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDefinition) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDepthOfBoltHead) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleHeadDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleSlotDirection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleSlotLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleTapping) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleTappingHole) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemHoleType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPaintArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemParamBoringout) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemParamRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternEdgeDistanceX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternEdgeDistanceY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternIntermediateDistanceX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternIntermediateDistanceY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternNumber) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternNumberX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternNumberY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternRadius) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternTotalLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPatternTotalWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateExactWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateJustification) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlatePaintArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateShortenAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateShortenCutstraight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateShortenSuction) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemPlateWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemProfileLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemProfileType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemProfileVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudDiameter) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudGrade) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudStandard) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemShearstudTotalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShortenAngley) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShortenAnglez) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemShortenReflength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldContinuous) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleEffectivethroat) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoublePrepdepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleRootopening) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleSurfaceshape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldDoubleWeldprep) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainEffectivethroat) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainPrepdepth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainRootopening) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainSurfaceshape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldMainWeldprep) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldPitch) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldPrefix) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemWeldTextModule) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SteelElemXDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemYDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SteelElemZclipType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructConnectionApplyTo) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructConnectionBeamEnd) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionBeamStart) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionColumnBase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionColumnTop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructConnectionCutback) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructConnectionTypeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructFramJoinStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalBeamHorizontalProjectionPlane) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalBeamRigidLink) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalColumnHorizontalProjectionPlane) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalColumnRigidLink) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalHardPoints) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalModel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectFloorPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectMemberPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectMemberPlaneColumnBottom) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalProjectMemberPlaneColumnTop) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalTessDeviation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyticalTessellate) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAnalyzesAs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAssetParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseReferencedend) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndLevelReference) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndRefelementEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndValueDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndValueElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentEndValueRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartLevelReference) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartRefelementEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartValueDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartValueElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentStartValueRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopRatio) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopReferencedend) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralAttachmentTopType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamCutbackForColumn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEnd0Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEnd1Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndAttachmentDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndAttachmentRefcolumnEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndAttachmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamEndSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartAttachmentDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartAttachmentRefcolumnEnd) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartAttachmentType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBeamStartSupport) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBendDirAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBottomReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralBraceRepresentation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralCamber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionApprovalStatus) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionCodeCheckingStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionEditRangesOfApplicability) {
                return StorageType.None;
            }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionEditType) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionInputElements) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionModifyConnectionParameters) {
                return StorageType.None;
            }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionNobleStatus) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionOverrideType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralCopingDistance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralDisplayInHiddenViews) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralDisplayInHiddenViewsColumn) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralDisplayInHiddenViewsFraming) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtBottomCore) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtBottomSurvey) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtTopCore) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralElevationAtTopSurvey) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralFamilyCodeName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralFamilyNameKey) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralFloorAnalyzesAs) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralFloorCoreThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFoundationLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFoundationThickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFoundationWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralFrameCutLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralMaterialParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralMaterialType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralMemberForces) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StructuralNumberOfStuds) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralReferenceLevelElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionBottomCutHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionBottomCutWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCantileverHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCantileverLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonAlpha) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonCentroidHoriz) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonCentroidVertical) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonElasticModulusStrongAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonElasticModulusWeakAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonMomentOfInertiaStrongAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonMomentOfInertiaWeakAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonNominalWeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonPerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonPlasticModulusStrongAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonPlasticModulusWeakAxis) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonShearAreaStrongAxis) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonShearAreaWeakAxis) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonTorsionalModulus) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonTorsionalMomentOfInertia) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonWarpingConstant) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCommonWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionCprofileFoldLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionHssInnerfillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionHssOuterfillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltDiameter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacing) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacingBetweenRows) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacingTwoRows) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeBoltSpacingWeb) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeClearWebHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangeToeOfFillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangefillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangethickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeFlangethicknessLocation) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebToeOfFillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebfillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebheight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebthickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIshapeWebthicknessLocation) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedBottomflangethickness) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedBottomflangewidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedTopflangethickness) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionIweldedTopflangewidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltDiameterLongerFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltDiameterShorterFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltSpacing1LongerFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltSpacing2LongerFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLangleBoltSpacingShorterFlange) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionLprofileLipLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionNameKey) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionPipestandardWalldesignthickness) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionPipestandardWallnominalthickness) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionShape) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSigmaProfileBendWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSigmaProfileMiddleBendWidth) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSigmaProfileTopBendWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSlopedFlangeAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionSlopedWebAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionTopCutHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionTopCutWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionTopWebFillet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.StructuralSectionZprofileBottomFlangeLength) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralStickSymbolLocation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseFx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseFy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseFz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseMx) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseMy) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseMz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralTopReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.StructuralWallBottomProjectionPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralWallProjectionSurface) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.StructuralWallTopProjectionPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SupportHandClearance) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SupportHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SurfaceArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SurfacePerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepBaseFloorSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SweepBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepBaseRoofSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SweepBaseVertOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepMaxSegAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.SweepTrajSegmented) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.SymbolFamilyAndTypeNamesParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SymbolFamilyNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SymbolIdParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SymbolNameParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SystemEquipmentSets) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SystemZoneLevelId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.SystemsAnalysisReportFolder) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.SystemsAnalysisReportStyle) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TagElementCount) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagLeaderType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagNoBreakParamStrings) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagOnPlacementUi) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagOrientationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TagSampleText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TagTag) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.TemplateName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TerminationExtensionLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextAlignHorz) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextAlignVert) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextAlignment) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextBackground) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextBoxVisibility) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextColor) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextDistToLine) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TextPosition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextStyleBold) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextStyleFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TextStyleItalic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextStyleSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextStyleUnderline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TextTabSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TextText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TextWidthScale) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamCompressibility) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamElectricalResistivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamEmissivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamGasViscosity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamLiquidViscosity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamPermeability) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamPorosity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamReflectivity) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamSpecificHeatOfVaporization) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamTransmitsLight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ThermalMaterialParamVaporPressure) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TickMarkPen) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternFamrefComponentExtents) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridCellsX) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridCellsY) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridUnitX) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TilePatternGridUnitY) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TitleFont) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TitleSize) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TitleStyleBold) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TitleStyleItalic) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TitleStyleUnderline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TopographyLinkName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TopographyLinkPath) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TrapMullWidth) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussBearingChordTopBottomParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementBearingJustParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementClassParam) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.TrussElementCreateBottomParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementCreateTopParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementEnd0Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementEnd1Elevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementReferenceLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussElementRotateChordsWithTruss) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementSpanParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussElementStickJustParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussElementTagNewMembersView) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordStructuralTypesParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.TrussFamilyBottomChordVerticalProjectionParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyDiagWebStructuralTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordStructuralTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTopChordVerticalProjectionParam) {
                return StorageType.ElementId;
            }

            if(forgeTypeId == ParameterTypeId.TrussFamilyTransformationParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebAngleParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebEndReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebStartReleaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyVertWebStructuralTypesParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.TrussFamilyWebsHaveSymbolicCutbackParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.TrussHeight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussLength) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TrussNonBearingOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.TypeWallClosure) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.UniformatCode) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.UniformatDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewAnalysisDisplayStyle) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewAnalysisResultsVisibility) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewAssociatedAssemblyInstanceId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewBackClipping) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewCameraOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewCameraPosition) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewCleanJoins) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewDependency) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewDepth) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewDescription) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewDesignOptionsConfig) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewDetailLevel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewDiscipline) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewFamily) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewFamilyAndTypeSchedules) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewFamilySchedules) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewFixedSketchPlane) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedBottomLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedGridAppearance) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedGroupSimilar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedHiddenLevels) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedLevelRelativeBaseType) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedLocationsHigh) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedLocationsLow) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedMaterialTypes) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedNumberColumns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedOffGrid) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedRowsCount) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedRowsFrom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTextAppearance) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTitle) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTopLevel) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTotalColumns) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedTotalRows) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSchedUnitsFormat) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSunPath) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewGraphSunPathSize) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewModelDisplayMode) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewPartsVisibility) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewPhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewPhaseFilter) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewReferencingDetail) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewReferencingSheet) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewScale) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewScaleCustomname) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewScaleHavename) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewScalePulldownImperial) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewScalePulldownMetric) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewSchemaSettingForBuilding) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewSchemaSettingForSystem) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewSchemaSettingForSystemTemplate) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewSheetViewportInfo) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewShowGrids) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewShowHiddenLines) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewShowMassing) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewSlantedColumnSymbolOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewTemplate) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewTemplateForSchedule) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewType) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewTypeSchedules) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewUnderlayBottomId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewUnderlayOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewUnderlayTopId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewVisibleCategories) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.Viewer3dRenderSettings) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ViewerAnnotationCropActive) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveBottom) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveFar) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveLeft) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveNear) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveRight) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundActiveTop) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundFarClipping) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetFar) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetLeft) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetNear) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetRight) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerBoundOffsetTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerCropRegion) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerCropRegionDisabled) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerCropRegionVisible) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerDetailNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerEyeElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerIsReference) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerModelClipBoxActive) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerOptionVisibility) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewerPerspective) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerReferenceLabel) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerReferenceLabelText) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerSheetNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewerShowUncropped) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewerTargetElevation) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ViewerVolumeOfInterestCrop) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrLabelTag) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrOrientationOnSheet) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrShowBox) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrShowExtensionLine) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportAttrShowLabel) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ViewportDetailNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportScale) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportSheetName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportSheetNumber) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ViewportViewName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsAnalyticalModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsAnnotation) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsCoordinationModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsDesignoptions) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsFilters) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsImport) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsModel) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsPointClouds) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsRvtLinks) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VisGraphicsWorksets) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.VoidCutsGeometry) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.VolumeCut) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.VolumeFill) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.VolumeNet) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.VolumeOfInterestName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.VolumeOfInterestViewsVisible) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.WalkthroughFramesCount) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.WallAlignKeyRefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallAttrDefheightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallAttrHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallAttrRoomBounding) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallAttrWidthParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBaseConstraint) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallBaseHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBaseOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBottomExtensionDistParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallBottomIsAttached) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallCrossSection) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallHeightType) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallKeyRefParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallLocationLineOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSingleSlantAngleFromVertical) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallStructuralSignificant) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallStructuralUsageParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallStructureIdParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.WallSweepCutByInsertsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallSweepCutsWallParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallSweepDefaultSetbackParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSweepLevelParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallSweepOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSweepOrientation) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallSweepProfileParam) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallSweepWallOffsetParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallSweepWallSubcategoryId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WallTaperedExteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTaperedInteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTaperedUseInstanceAngles) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallTaperedWidthAtBottom) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTaperedWidthAtTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTopExtensionDistParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTopIsAttached) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallTopOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTypeDefaultTaperedExteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTypeDefaultTaperedInteriorInwardAngle) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WallTypeWidthMeasuredAt) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WallUserHeightParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WindowTypeId) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.WitnsLineExtension) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WitnsLineGapToElt) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.WitnsLineTickMark) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.WrappingAtEndsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.WrappingAtInsertsParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.YJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.YOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.YzJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZJustification) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZOffsetValue) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneAirVolumeCalculationTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneArea) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneAreaGross) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedAreaPerCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedAreaPerHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedCoolingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedCoolingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHeatingLoadParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHeatingLoadPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHydronicCoolingflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedHydronicHeatingflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedSupplyAirflowParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCalculatedSupplyAirflowPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCoilBypassPercentageParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCoolingAirTemperatureParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneCoolingInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ZoneCoolingSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneDehumidificationSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneHeatingAirTemperatureParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneHeatingInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ZoneHeatingSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneHumidificationSetPointParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneLevelId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ZoneLevelOffset) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneLevelOffsetTop) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneName) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.ZoneOaRatePerAchParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneOutdoorAirInformationParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.ZoneOutsideAirPerAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneOutsideAirPerPersonParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZonePerimeter) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZonePhase) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ZonePhaseId) { return StorageType.ElementId; }

            if(forgeTypeId == ParameterTypeId.ZoneServiceTypeParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneSpaceOutdoorAirOptionParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseAirChangesPerHourParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseDehumidificationSetpointParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseHumidificationSetpointParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseOutsideAirPerAreaParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneUseOutsideAirPerPersonParam) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.ZoneVolume) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.ZoneVolumeGross) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsDuctFittingLossTableParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpacePeopleActivityLevelParam) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpacingAppend) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SpacingJustification) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StairsLandingtypeTreadriserType) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.StructuralConnectionSymbol) { return StorageType.None; }

            if(forgeTypeId == ParameterTypeId.SurfacePatternIdParam) { return StorageType.None; }

            throw new System.ArgumentOutOfRangeException(nameof(forgeTypeId),
                $"Не удалось определить тип параметра для \"{forgeTypeId}\".");
        }

        /// <summary>
        /// Возвращает тип параметра.
        /// </summary>
        /// <param name="definition">Определение параметра.</param>
        /// <returns>Возвращает тип параметра.</returns>
        /// <exception cref="System.ArgumentOutOfRangeException">Выбрасывает исключение если не был сопоставлен тип данных к параметру.</exception>
        public static StorageType GetStorageType(this Definition definition) {
            if(definition == null) {
                throw new ArgumentNullException(nameof(definition));
            }


            ForgeTypeId dataType = definition.GetDataType();
            if(dataType == SpecTypeId.Acceleration) { return StorageType.Double; }

            if(dataType == SpecTypeId.AirFlow) { return StorageType.Double; }

            if(dataType == SpecTypeId.AirFlowDensity) { return StorageType.Double; }

            if(dataType == SpecTypeId.AirFlowDividedByCoolingLoad) { return StorageType.Double; }

            if(dataType == SpecTypeId.AirFlowDividedByVolume) { return StorageType.Double; }

            if(dataType == SpecTypeId.Angle) { return StorageType.Double; }

            if(dataType == SpecTypeId.AngularSpeed) { return StorageType.Double; }

            if(dataType == SpecTypeId.ApparentPower) { return StorageType.Double; }

            if(dataType == SpecTypeId.Area) { return StorageType.Double; }

            if(dataType == SpecTypeId.AreaDividedByCoolingLoad) { return StorageType.Double; }

            if(dataType == SpecTypeId.AreaDividedByHeatingLoad) { return StorageType.Double; }

            if(dataType == SpecTypeId.AreaForce) { return StorageType.Double; }

            if(dataType == SpecTypeId.AreaForceScale) { return StorageType.Double; }

            if(dataType == SpecTypeId.AreaSpringCoefficient) { return StorageType.Double; }

            if(dataType == SpecTypeId.BarDiameter) { return StorageType.Double; }

            if(dataType == SpecTypeId.CableTraySize) { return StorageType.Double; }

            if(dataType == SpecTypeId.ColorTemperature) { return StorageType.Double; }

            if(dataType == SpecTypeId.ConduitSize) { return StorageType.Double; }

            if(dataType == SpecTypeId.CoolingLoad) { return StorageType.Double; }

            if(dataType == SpecTypeId.CoolingLoadDividedByArea) { return StorageType.Double; }

            if(dataType == SpecTypeId.CoolingLoadDividedByVolume) { return StorageType.Double; }

            if(dataType == SpecTypeId.CostPerArea) { return StorageType.Double; }

            if(dataType == SpecTypeId.CostRateEnergy) { return StorageType.Double; }

            if(dataType == SpecTypeId.CostRatePower) { return StorageType.Double; }

            if(dataType == SpecTypeId.CrackWidth) { return StorageType.Double; }

            if(dataType == SpecTypeId.CrossSection) { return StorageType.Double; }

            if(dataType == SpecTypeId.Currency) { return StorageType.Double; }

            if(dataType == SpecTypeId.Current) { return StorageType.Double; }

            if(dataType == SpecTypeId.DecimalSheetLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.DemandFactor) { return StorageType.Double; }

            if(dataType == SpecTypeId.Diffusivity) { return StorageType.Double; }

            if(dataType == SpecTypeId.Displacement) { return StorageType.Double; }

            if(dataType == SpecTypeId.Distance) { return StorageType.Double; }

            if(dataType == SpecTypeId.DuctInsulationThickness) { return StorageType.Double; }

            if(dataType == SpecTypeId.DuctLiningThickness) { return StorageType.Double; }

            if(dataType == SpecTypeId.DuctSize) { return StorageType.Double; }

            if(dataType == SpecTypeId.Efficacy) { return StorageType.Double; }

            if(dataType == SpecTypeId.ElectricalFrequency) { return StorageType.Double; }

            if(dataType == SpecTypeId.ElectricalPotential) { return StorageType.Double; }

            if(dataType == SpecTypeId.ElectricalPower) { return StorageType.Double; }

            if(dataType == SpecTypeId.ElectricalPowerDensity) { return StorageType.Double; }

            if(dataType == SpecTypeId.ElectricalResistivity) { return StorageType.Double; }

            if(dataType == SpecTypeId.ElectricalTemperature) { return StorageType.Double; }

            if(dataType == SpecTypeId.ElectricalTemperatureDifference) { return StorageType.Double; }

            if(dataType == SpecTypeId.Energy) { return StorageType.Double; }

            if(dataType == SpecTypeId.Factor) { return StorageType.Double; }

            if(dataType == SpecTypeId.Flow) { return StorageType.Double; }

            if(dataType == SpecTypeId.FlowPerPower) { return StorageType.Double; }

            if(dataType == SpecTypeId.Force) { return StorageType.Double; }

            if(dataType == SpecTypeId.ForceScale) { return StorageType.Double; }

            if(dataType == SpecTypeId.HeatCapacityPerArea) { return StorageType.Double; }

            if(dataType == SpecTypeId.HeatGain) { return StorageType.Double; }

            if(dataType == SpecTypeId.HeatTransferCoefficient) { return StorageType.Double; }

            if(dataType == SpecTypeId.HeatingLoad) { return StorageType.Double; }

            if(dataType == SpecTypeId.HeatingLoadDividedByArea) { return StorageType.Double; }

            if(dataType == SpecTypeId.HeatingLoadDividedByVolume) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacDensity) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacEnergy) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacFriction) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacMassPerTime) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacPower) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacPowerDensity) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacPressure) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacRoughness) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacSlope) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacTemperature) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacTemperatureDifference) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacVelocity) { return StorageType.Double; }

            if(dataType == SpecTypeId.HvacViscosity) { return StorageType.Double; }

            if(dataType == SpecTypeId.Illuminance) { return StorageType.Double; }

            if(dataType == SpecTypeId.Reference.Image) { return StorageType.ElementId; }

            if(dataType == SpecTypeId.Int.Integer) { return StorageType.Integer; }

            if(dataType == SpecTypeId.IsothermalMoistureCapacity) { return StorageType.Double; }

            if(dataType == SpecTypeId.Length) { return StorageType.Double; }

            if(dataType == SpecTypeId.LineSpringCoefficient) { return StorageType.Double; }

            if(dataType == SpecTypeId.LinearForce) { return StorageType.Double; }

            if(dataType == SpecTypeId.LinearForceScale) { return StorageType.Double; }

            if(dataType == SpecTypeId.LinearMoment) { return StorageType.Double; }

            if(dataType == SpecTypeId.LinearMomentScale) { return StorageType.Double; }

            if(dataType == SpecTypeId.Reference.LoadClassification) { return StorageType.ElementId; }

            if(dataType == SpecTypeId.Luminance) { return StorageType.Double; }

            if(dataType == SpecTypeId.LuminousFlux) { return StorageType.Double; }

            if(dataType == SpecTypeId.LuminousIntensity) { return StorageType.Double; }

            if(dataType == SpecTypeId.Mass) { return StorageType.Double; }

            if(dataType == SpecTypeId.MassDensity) { return StorageType.Double; }

            if(dataType == SpecTypeId.MassPerUnitArea) { return StorageType.Double; }

            if(dataType == SpecTypeId.MassPerUnitLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.Reference.Material) { return StorageType.ElementId; }

            if(dataType == SpecTypeId.Moment) { return StorageType.Double; }

            if(dataType == SpecTypeId.MomentOfInertia) { return StorageType.Double; }

            if(dataType == SpecTypeId.MomentScale) { return StorageType.Double; }

            if(dataType == SpecTypeId.String.MultilineText) { return StorageType.String; }

            if(dataType == SpecTypeId.Number) { return StorageType.Double; }

            if(dataType == SpecTypeId.Int.NumberOfPoles) { return StorageType.Integer; }

            if(dataType == SpecTypeId.Period) { return StorageType.Double; }

            if(dataType == SpecTypeId.Permeability) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipeDimension) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipeInsulationThickness) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipeMassPerUnitLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipeSize) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingDensity) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingFriction) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingMass) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingMassPerTime) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingPressure) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingRoughness) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingSlope) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingTemperature) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingTemperatureDifference) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingVelocity) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingViscosity) { return StorageType.Double; }

            if(dataType == SpecTypeId.PipingVolume) { return StorageType.Double; }

            if(dataType == SpecTypeId.PointSpringCoefficient) { return StorageType.Double; }

            if(dataType == SpecTypeId.PowerPerFlow) { return StorageType.Double; }

            if(dataType == SpecTypeId.PowerPerLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.Pulsation) { return StorageType.Double; }

            if(dataType == SpecTypeId.ReinforcementArea) { return StorageType.Double; }

            if(dataType == SpecTypeId.ReinforcementAreaPerUnitLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.ReinforcementCover) { return StorageType.Double; }

            if(dataType == SpecTypeId.ReinforcementLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.ReinforcementSpacing) { return StorageType.Double; }

            if(dataType == SpecTypeId.ReinforcementVolume) { return StorageType.Double; }

            if(dataType == SpecTypeId.Rotation) { return StorageType.Double; }

            if(dataType == SpecTypeId.RotationAngle) { return StorageType.Double; }

            if(dataType == SpecTypeId.RotationalLineSpringCoefficient) { return StorageType.Double; }

            if(dataType == SpecTypeId.RotationalPointSpringCoefficient) { return StorageType.Double; }

            if(dataType == SpecTypeId.SectionArea) { return StorageType.Double; }

            if(dataType == SpecTypeId.SectionDimension) { return StorageType.Double; }

            if(dataType == SpecTypeId.SectionModulus) { return StorageType.Double; }

            if(dataType == SpecTypeId.SectionProperty) { return StorageType.Double; }

            if(dataType == SpecTypeId.SheetLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.SiteAngle) { return StorageType.Double; }

            if(dataType == SpecTypeId.Slope) { return StorageType.Double; }

            if(dataType == SpecTypeId.SpecificHeat) { return StorageType.Double; }

            if(dataType == SpecTypeId.SpecificHeatOfVaporization) { return StorageType.Double; }

            if(dataType == SpecTypeId.Speed) { return StorageType.Double; }

            if(dataType == SpecTypeId.Stationing) { return StorageType.Double; }

            if(dataType == SpecTypeId.StationingInterval) { return StorageType.Double; }

            if(dataType == SpecTypeId.Stress) { return StorageType.Double; }

            if(dataType == SpecTypeId.StructuralFrequency) { return StorageType.Double; }

            if(dataType == SpecTypeId.StructuralVelocity) { return StorageType.Double; }

            if(dataType == SpecTypeId.SurfaceAreaPerUnitLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.String.Text) { return StorageType.String; }

            if(dataType == SpecTypeId.ThermalConductivity) { return StorageType.Double; }

            if(dataType == SpecTypeId.ThermalExpansionCoefficient) { return StorageType.Double; }

            if(dataType == SpecTypeId.ThermalGradientCoefficientForMoistureCapacity) { return StorageType.Double; }

            if(dataType == SpecTypeId.ThermalMass) { return StorageType.Double; }

            if(dataType == SpecTypeId.ThermalResistance) { return StorageType.Double; }

            if(dataType == SpecTypeId.Time) { return StorageType.Double; }

            if(dataType == SpecTypeId.UnitWeight) { return StorageType.Double; }

            if(dataType == SpecTypeId.String.Url) { return StorageType.String; }

            if(dataType == SpecTypeId.Volume) { return StorageType.Double; }

            if(dataType == SpecTypeId.WarpingConstant) { return StorageType.Double; }

            if(dataType == SpecTypeId.Wattage) { return StorageType.Double; }

            if(dataType == SpecTypeId.Weight) { return StorageType.Double; }

            if(dataType == SpecTypeId.WeightPerUnitLength) { return StorageType.Double; }

            if(dataType == SpecTypeId.WireDiameter) { return StorageType.Double; }

            if(dataType == SpecTypeId.Boolean.YesNo) { return StorageType.Integer; }

#if REVIT_2021

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodePowerSource) { return StorageType.String; }
            
            if(forgeTypeId == ParameterTypeId.MultiLeaderTagUi) { return StorageType.Integer; }
            
            if(forgeTypeId == ParameterTypeId.FabricationBraSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationCenterlineElevationOfPart) { return StorageType.Double; }
            
            if(forgeTypeId == ParameterTypeId.FabricationPriSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationSecSize) { return StorageType.String; }
            
            if(forgeTypeId == ParameterTypeId.FabricationSpotBottomElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationSpotBottomElevationOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationSpotTopElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationSpotTopElevationOfPart) { return StorageType.Double; }
            
            if(forgeTypeId == ParameterTypeId.RbsElectricalLoadZoneType) { return StorageType.ElementId; }
            
            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalAreaMeasurement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalAreaParam) { return StorageType.Double; }
            
            if(forgeTypeId == ParameterTypeId.FabricationBraSize) { return StorageType.String; }

            if(forgeTypeId == ParameterTypeId.FabricationCenterlineElevationOfPart) { return StorageType.Double; }
            
            if(forgeTypeId == ParameterTypeId.FabricationPriSize) { return StorageType.String; }
            
            if(forgeTypeId == ParameterTypeId.FabricationSpotBottomElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationSpotBottomElevationOfPart) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.FabricationSpotTopElevationIncludeInsulationOfPart) {
                return StorageType.Double;
            }

            if(forgeTypeId == ParameterTypeId.FabricationSpotTopElevationOfPart) { return StorageType.Double; }
            
            if(forgeTypeId == ParameterTypeId.MultiLeaderTagUi) { return StorageType.Integer; }
            
            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalAreaMeasurement) { return StorageType.Integer; }

            if(forgeTypeId == ParameterTypeId.RbsElecAnalyticalAreaParam) { return StorageType.Double; }

            if(forgeTypeId == ParameterTypeId.RbsElecDistributionNodePowerSource) { return StorageType.String; }
            
            if(forgeTypeId == ParameterTypeId.RbsElectricalLoadZoneType) { return StorageType.ElementId; }
            
            if(forgeTypeId == ParameterTypeId.FabricationSecSize) { return StorageType.String; }

#endif

            throw new System.ArgumentOutOfRangeException($"Не удалось определить тип параметра для \"{dataType}\".");
        }

#endif
    }
}